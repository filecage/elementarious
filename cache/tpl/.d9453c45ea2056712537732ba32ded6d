8efdac4c17305358146ed5c0ce7ea2c6
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head profile="http://purl.org/NET/erdf/profile"><title>PHP: Arrays - Manual</title><style type="text/css" media="all">@import url("/styles/site.css"); @import url("/styles/mirror.css");</style><!-- [if IE]><![if gte IE 6]><![endif] !--><style type="text/css" media="print">@import url("/styles/print.css");</style><!-- [if IE]><![endif]><![endif] !--><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><link rel="shortcut icon" href="/favicon.ico"/><link rel="contents" href="index.php"/><link rel="index" href="language.types.php"/><link rel="prev" href="language.types.string.php"/><link rel="next" href="language.types.object.php"/><link rel="schema.dc" href="http://purl.org/dc/elements/1.1/"/><link rel="schema.rdfs" href="http://www.w3.org/2000/01/rdf-schema#"/><link rev="canonical" rel="self alternate shorter shorturl shortlink" href="http://php.net/types.array"/><link rel="license" href="http://creativecommons.org/licenses/by/3.0/" about="#content"/><link rel="canonical" href="http://php.net/manual/en/language.types.array.php"/><script type="text/javascript" src="/userprefs.js"></script><base href="http://de.php.net/manual/en/language.types.array.php"></base><meta http-equiv="Content-language" value="en"/><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/jquery-ui.min.js"></script><script type="text/javascript">$(document).ready(function() {	var toggleImage = function(elem) {		if ($(elem).hasClass("shown")) {			$(elem).removeClass("shown").addClass("hidden");			$("img", elem).attr("src", "/images/notes-add.gif");		'];?>		else {			$(elem).removeClass("hidden").addClass("shown");			$("img", elem).attr("src", "/images/notes-reject.gif");		'];?>	'];?>;	$(".refsect1 h3.title").each(function() { url = "http://bugs.php.net/report.php?bug_type=Documentation+problem&amp;amp;manpage=" + $(this).parent().parent().attr("id") + "%23" + $(this).text();		$(this).parent().prepend("<div class='reportbug'><a href='" + url + "'>Report a bug");		$(this).prepend("<a class='toggler shown' href='#'><img src='/images/notes-reject.gif' /> ");	'];?>);	$("#usernotes .head").each(function() {		$(this).prepend("<a class='toggler shown' href='#'><img src='/images/notes-reject.gif' /> ");	'];?>);	$(".refsect1 h3.title .toggler").click(function() {		$(this).parent().siblings().slideToggle("slow");		toggleImage(this);		return false;	'];?>);	$("#usernotes .head .toggler").click(function() {		$(this).parent().next().slideToggle("slow");		toggleImage(this);		return false;	'];?>);'];?>);</script></head><body><div id="headnav"><a href="/" rel="home"><img src="/images/php.gif" alt="PHP" width="120" height="67" id="phplogo"/></a><div id="headmenu"><a href="/downloads.php">downloads</a>|<a href="/docs.php">documentation</a>|<a href="/FAQ.php">faq</a>|<a href="/support.php">getting help</a>|<a href="/mailing-lists.php">mailing lists</a>|<a href="/license">licenses</a>|<a href="http://wiki.php.net/">wiki</a>|<a href="http://bugs.php.net/">reporting bugs</a>|<a href="/sites.php">php.net sites</a>|<a href="/links.php">links</a>|<a href="/conferences/">conferences</a>|<a href="/my.php">my php.net</a></div></div><div id="headsearch"><form method="post" action="/search.php" id="topsearch"><p><span title="Keyboard shortcut: Alt+S (Win), Ctrl+S (Apple)"><span class="shortkey">s</span>earch for</span><input type="text" name="pattern" value="" size="30" accesskey="s"/><span>in the</span><select name="show"><option value="all">all php.net sites</option><option value="local">this mirror only</option><option value="quickref" selected="selected">function list</option><option value="manual">online documentation</option><option value="bugdb">bug database</option><option value="news_archive">Site News Archive</option><option value="changelogs">All Changelogs</option><option value="pear">just pear.php.net</option><option value="pecl">just pecl.php.net</option><option value="talks">just talks.php.net</option><option value="maillist">general mailing list</option><option value="devlist">developer mailing list</option><option value="phpdoc">documentation mailing list</option></select><input type="image" src="/images/small_submit_white.gif" class="submit" alt="search"/><input type="hidden" name="lang" value="en"/></p></form></div><div id="layout_2"><div id="leftbar"><!-- UdmComment !--><ul class="toc"><li class="header home"><a href="index.php">PHP Manual</a></li><li class="header up"><a href="langref.php">Language Reference</a></li><li class="header up"><a href="language.types.php">Types</a></li><li><a href="language.types.intro.php">Introduction</a></li><li><a href="language.types.boolean.php">Booleans</a></li><li><a href="language.types.integer.php">Integers</a></li><li><a href="language.types.float.php">Floating point numbers</a></li><li><a href="language.types.string.php">Strings</a></li><li class="active"><a href="language.types.array.php">Arrays</a></li><li><a href="language.types.object.php">Objects</a></li><li><a href="language.types.resource.php">Resources</a></li><li><a href="language.types.null.php">NULL</a></li><li><a href="language.pseudo-types.php">Pseudo-types and variables used in this documentation</a></li><li><a href="language.types.type-juggling.php">Type Juggling</a></li></ul><!-- /UdmComment !--></div><div id="content" class="manual/en"><!-- UdmComment !--><div class="manualnavbar manualnavbar_top"><span class="next"><a href="language.types.object.php">Objects<img src="/images/caret-r.gif" alt="&gt;" width="11" height="7"/></a></span><span class="prev"><a href="language.types.string.php"><img src="/images/caret-l.gif" alt="&lt;" width="11" height="7"/>Strings</a></span><hr></hr><span class="lastupdated">Last updated: Fri, 04 Mar 2011</span><div class="langchooser"><form action="/manual/change.php" method="get"><p>view this page in</p><fieldset><select name="page"><option value="pt_BR/language.types.array.php">Brazilian Portuguese</option><option value="zh/language.types.array.php">Chinese (Simplified)</option><option value="fr/language.types.array.php">French</option><option value="de/language.types.array.php">German</option><option value="ja/language.types.array.php">Japanese</option><option value="pl/language.types.array.php">Polish</option><option value="ro/language.types.array.php">Romanian</option><option value="fa/language.types.array.php">Persian</option><option value="es/language.types.array.php">Spanish</option><option value="tr/language.types.array.php">Turkish</option><option value="help-translate.php">Other</option></select><input type="image" src="/images/small_submit.gif" id="changeLangImage" alt="Change language"/></fieldset></form></div></div><!-- /UdmComment !--><div id="language.types.array" class="sect1"><h2 class="title">Arrays</h2><p class="para">An<span class="type"><a href="language.types.array.php" class="type array">array</a></span>in PHP is actually an ordered map. A map is a type that associates<em class="emphasis">values</em>to<em class="emphasis">keys</em>. This type is optimized for several different uses; it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary, collection, stack, queue, and probably more. As<span class="type"><a href="language.types.array.php" class="type array">array</a></span>values can be other<span class="type"><a href="language.types.array.php" class="type array">array</a></span>s, trees and multidimensional<span class="type"><a href="language.types.array.php" class="type array">array</a></span>s are also possible.</p><p class="para">Explanation of those data structures is beyond the scope of this manual, but at least one example is provided for each of them. For more information, look towards the considerable literature that exists about this broad topic.</p><div class="sect2" id="language.types.array.syntax" name="language.types.array.syntax"><h3 class="title">Syntax</h3><div class="sect3" id="language.types.array.syntax.array-func" name="language.types.array.syntax.array-func"><h4 class="title">Specifying with<span class="function"><a href="function.array.php" class="function">array()</a></span></h4><p class="para">An<span class="type"><a href="language.types.array.php" class="type array">array</a></span>can be created by the<span class="function"><a href="function.array.php" class="function">array()</a></span>language construct. It takes as parameters any number of comma-separated<i><span class="replaceable">key</span>=&gt;<span class="replaceable">value</span></i>pairs.</p><pre class="synopsis">array(<span class="optional"><span class="replaceable">key</span>=&gt;</span><span class="replaceable">value</span>, ...     )//<span class="replaceable">key</span>may only be an<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>or<span class="type"><a href="language.types.string.php" class="type string">string</a></span>//<span class="replaceable">value</span>may be any value of any type</pre><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$arr&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"foo"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"bar"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">12&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">true</span><span style="color: #007700">);<br></br><br></br>echo&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;bar<br></br></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #0000BB">12</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;1<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">A<var class="varname"><var class="varname">key</var></var>may be either an<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>or a<span class="type"><a href="language.types.string.php" class="type string">string</a></span>. If a key is the standard representation of an<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, it will be interpreted as such (i.e.<i>&quot;8&quot;</i>will be interpreted as<i>8</i>, while<i>&quot;08&quot;</i>will be interpreted as<i>&quot;08&quot;</i>).<span class="type"><a href="language.types.float.php" class="type Float">Float</a></span>s in<var class="varname"><var class="varname">key</var></var>are truncated to<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>. The indexed and associative<span class="type"><a href="language.types.array.php" class="type array">array</a></span>types are the same type in PHP, which can both contain<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>and<span class="type"><a href="language.types.string.php" class="type string">string</a></span>indices.</p><p class="para">A value can be any PHP type.</p><blockquote><p><b class="note">Note</b>:</p><p class="para">Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an<b><tt>E_NOTICE</tt></b>-level error message will be issued, and the result will be<b><tt>NULL</tt></b>.</p></blockquote><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$arr&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"somearray"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(</span><span style="color: #0000BB">6&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">13&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">9</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">42</span><span style="color: #007700">));<br></br><br></br>echo&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"somearray"</span><span style="color: #007700">][</span><span style="color: #0000BB">6</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;5<br></br></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"somearray"</span><span style="color: #007700">][</span><span style="color: #0000BB">13</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;9<br></br></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"somearray"</span><span style="color: #007700">][</span><span style="color: #DD0000">"a"</span><span style="color: #007700">];&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;42<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">If a key is not specified for a value, the maximum of the<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>indices is taken and the new key will be that value plus 1. If a key that already has an assigned value is specified, that value will be overwritten.</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #FF8000">//&nbsp;This&nbsp;array&nbsp;is&nbsp;the&nbsp;same&nbsp;as&nbsp;...<br></br></span><span style="color: #007700">array(</span><span style="color: #0000BB">5&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">43</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">32</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">56</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">12</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;...this&nbsp;array<br></br></span><span style="color: #007700">array(</span><span style="color: #0000BB">5&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">43</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">6&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">32</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">7&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">56</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">12</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><div class="warning"><b class="warning">Warning</b><p class="simpara">Before PHP 4.3.0, appending to an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>in which the current maximum key was negative would create a new key as described above. Since PHP 4.3.0, the new key will be<i></i>.</p></div><p class="para">Using<b><tt>TRUE</tt></b>as<var class="varname"><var class="varname">key</var></var>will evaluate to<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span><i>1</i>as a key. Using<b><tt>FALSE</tt></b>as<var class="varname"><var class="varname">key</var></var>will evaluate to<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span><i></i>as a key. Using<b><tt>NULL</tt></b>as a key will evaluate to the empty string. Using the empty string as a key will create (or overwrite) a key with the empty string and its value; it is<em class="emphasis">not</em>the same as using empty brackets.</p><p class="para"><span class="type"><a href="language.types.array.php" class="type Array">Array</a></span>s and<span class="type"><a href="language.types.object.php" class="type object">object</a></span>s can not be used as keys. Doing so will result in a warning:<i>Illegal offset type</i>.</p></div><div class="sect3" id="language.types.array.syntax.modifying" name="language.types.array.syntax.modifying"><h4 class="title">Creating/modifying with square bracket syntax</h4><p class="para">An existing<span class="type"><a href="language.types.array.php" class="type array">array</a></span>can be modified by explicitly setting values in it.</p><p class="para">This is done by assigning values to the<span class="type"><a href="language.types.array.php" class="type array">array</a></span>, specifying the key in brackets. The key can also be omitted, resulting in an empty pair of brackets (<i>[]</i>).</p><pre class="synopsis">$arr[<span class="replaceable">key</span>] =<span class="replaceable">value</span>;$arr[] =<span class="replaceable">value</span>;//<span class="replaceable">key</span>may be an<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>or<span class="type"><a href="language.types.string.php" class="type string">string</a></span>//<span class="replaceable">value</span>may be any value of any type</pre><p class="para">If<var class="varname"><var class="varname">$arr</var></var>doesn&#039;t exist yet, it will be created, so this is also an alternative way to create an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>. To change a certain value, assign a new value to that element using its key. To remove a key/value pair, call the<span class="function"><a href="function.unset.php" class="function">unset()</a></span>function on it.</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$arr&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">5&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">12&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #0000BB">$arr</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">56</span><span style="color: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;is&nbsp;the&nbsp;same&nbsp;as&nbsp;$arr[13]&nbsp;=&nbsp;56;<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;at&nbsp;this&nbsp;point&nbsp;of&nbsp;the&nbsp;script<br></br><br></br></span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">"x"</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #0000BB">42</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;adds&nbsp;a&nbsp;new&nbsp;element&nbsp;to<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;the&nbsp;array&nbsp;with&nbsp;key&nbsp;"x"<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></br></span><span style="color: #007700">unset(</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #0000BB">5</span><span style="color: #007700">]);&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;removes&nbsp;the&nbsp;element&nbsp;from&nbsp;the&nbsp;array<br></br><br></br></span><span style="color: #007700">unset(</span><span style="color: #0000BB">$arr</span><span style="color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;deletes&nbsp;the&nbsp;whole&nbsp;array<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><blockquote><p><b class="note">Note</b>:</p><p class="para">As mentioned above, if no key is specified, the maximum of the existing<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>indices is taken, and the new key will be that maximum value plus 1. If no<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>indices exist yet, the key will be<i></i>(zero).</p><p class="para">Note that the maximum integer key used for this<em class="emphasis">need not currently exist in the<span class="type"><a href="language.types.array.php" class="type array">array</a></span></em>. It need only have existed in the<span class="type"><a href="language.types.array.php" class="type array">array</a></span>at some time since the last time the<span class="type"><a href="language.types.array.php" class="type array">array</a></span>was re-indexed. The following example illustrates:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #FF8000">//&nbsp;Create&nbsp;a&nbsp;simple&nbsp;array.<br></br></span><span style="color: #0000BB">$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">5</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;Now&nbsp;delete&nbsp;every&nbsp;item,&nbsp;but&nbsp;leave&nbsp;the&nbsp;array&nbsp;itself&nbsp;intact:<br></br></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #0000BB">$array&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #0000BB">$i&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">$value</span><span style="color: #007700">)&nbsp;{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;unset(</span><span style="color: #0000BB">$array</span><span style="color: #007700">[</span><span style="color: #0000BB">$i</span><span style="color: #007700">]);<br></br>']; ?><br></br></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;Append&nbsp;an&nbsp;item&nbsp;(note&nbsp;that&nbsp;the&nbsp;new&nbsp;key&nbsp;is&nbsp;5,&nbsp;instead&nbsp;of&nbsp;0).<br></br></span><span style="color: #0000BB">$array</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">6</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;Re-index:<br></br></span><span style="color: #0000BB">$array&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">array_values</span><span style="color: #007700">(</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">$array</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">7</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div><p class="para">The above example will output:</p><div class="example-contents screen"><div class="cdata"><pre>Array(    [0] =&gt; 1    [1] =&gt; 2    [2] =&gt; 3    [3] =&gt; 4    [4] =&gt; 5)Array()Array(    [5] =&gt; 6)Array(    [0] =&gt; 6    [1] =&gt; 7)</pre></div></div></div></blockquote></div></div><div class="sect2" id="language.types.array.useful-funcs" name="language.types.array.useful-funcs"><h3 class="title">Useful functions</h3><p class="para">There are quite a few useful functions for working with arrays. See the<a href="ref.array.php" class="link">array functions</a>section.</p><blockquote><p><b class="note">Note</b>:</p><p class="para">The<span class="function"><a href="function.unset.php" class="function">unset()</a></span>function allows removing keys from an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>. Be aware that the array will<em class="emphasis">not</em>be reindexed. If a true &quot;remove and shift&quot; behavior is desired, the<span class="type"><a href="language.types.array.php" class="type array">array</a></span>can be reindexed using the<span class="function"><a href="function.array-values.php" class="function">array_values()</a></span>function.</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$a&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'one'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">2&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'two'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">3&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'three'</span><span style="color: #007700">);<br></br>unset(</span><span style="color: #0000BB">$a</span><span style="color: #007700">[</span><span style="color: #0000BB">2</span><span style="color: #007700">]);<br></br></span><span style="color: #FF8000">/*&nbsp;will&nbsp;produce&nbsp;an&nbsp;array&nbsp;that&nbsp;would&nbsp;have&nbsp;been&nbsp;defined&nbsp;as<br></br>&nbsp;&nbsp;&nbsp;$a&nbsp;=&nbsp;array(1&nbsp;=&gt;&nbsp;'one',&nbsp;3&nbsp;=&gt;&nbsp;'three');<br></br>&nbsp;&nbsp;&nbsp;and&nbsp;NOT<br></br>&nbsp;&nbsp;&nbsp;$a&nbsp;=&nbsp;array(1&nbsp;=&gt;&nbsp;'one',&nbsp;2&nbsp;=&gt;'three');<br></br>*/<br></br><br></br></span><span style="color: #0000BB">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">array_values</span><span style="color: #007700">(</span><span style="color: #0000BB">$a</span><span style="color: #007700">);<br></br></span><span style="color: #FF8000">//&nbsp;Now&nbsp;$b&nbsp;is&nbsp;array(0&nbsp;=&gt;&nbsp;'one',&nbsp;1&nbsp;=&gt;'three')<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div></blockquote><p class="para">The<a href="control-structures.foreach.php" class="link">foreach</a>control structure exists specifically for<span class="type"><a href="language.types.array.php" class="type array">array</a></span>s. It provides an easy way to traverse an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>.</p></div><div class="sect2" id="language.types.array.donts" name="language.types.array.donts"><h3 class="title">Array do&#039;s and don&#039;ts</h3><div class="sect3" id="language.types.array.foo-bar" name="language.types.array.foo-bar"><h4 class="title">Why is<i>$foo[bar]</i>wrong?</h4><p class="para">Always use quotes around a string literal array index. For example,<i>$foo[&#039;bar&#039;]</i>is correct, while<i>$foo[bar]</i>is not. But why? It is common to encounter this kind of syntax in old scripts:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$foo</span><span style="color: #007700">[</span><span style="color: #0000BB">bar</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'enemy'</span><span style="color: #007700">;<br></br>echo&nbsp;</span><span style="color: #0000BB">$foo</span><span style="color: #007700">[</span><span style="color: #0000BB">bar</span><span style="color: #007700">];<br></br></span><span style="color: #FF8000">//&nbsp;etc<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">This is wrong, but it works. The reason is that this code has an undefined constant (bar) rather than a<span class="type"><a href="language.types.string.php" class="type string">string</a></span>(&#039;bar&#039; - notice the quotes). PHP may in future define constants which, unfortunately for such code, have the same name. It works because PHP automatically converts a<em class="emphasis">bare string</em>(an unquoted<span class="type"><a href="language.types.string.php" class="type string">string</a></span>which does not correspond to any known symbol) into a<span class="type"><a href="language.types.string.php" class="type string">string</a></span>which contains the bare<span class="type"><a href="language.types.string.php" class="type string">string</a></span>. For instance, if there is no defined  constant named<b><tt>bar</tt></b>, then PHP will substitute in the<span class="type"><a href="language.types.string.php" class="type string">string</a></span><i>&#039;bar&#039;</i>and use that.</p><blockquote><p><b class="note">Note</b>:<span class="simpara">This does not mean to<em class="emphasis">always</em>quote the key. Do not quote keys which are<a href="language.constants.php" class="link">constants</a>or<a href="language.variables.php" class="link">variables</a>, as this will prevent PHP from interpreting them.</span></p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>error_reporting</span><span style="color: #007700">(</span><span style="color: #0000BB">E_ALL</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">ini_set</span><span style="color: #007700">(</span><span style="color: #DD0000">'display_errors'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">true</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">ini_set</span><span style="color: #007700">(</span><span style="color: #DD0000">'html_errors'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">false</span><span style="color: #007700">);<br></br></span><span style="color: #FF8000">//&nbsp;Simple&nbsp;array:<br></br></span><span style="color: #0000BB">$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">$count&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">count</span><span style="color: #007700">(</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br></br>for&nbsp;(</span><span style="color: #0000BB">$i&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB"></span><span style="color: #007700">;&nbsp;</span><span style="color: #0000BB">$i&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #0000BB">$count</span><span style="color: #007700">;&nbsp;</span><span style="color: #0000BB">$i</span><span style="color: #007700">++)&nbsp;{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"\nChecking&nbsp;</span><span style="color: #0000BB">$i</span><span style="color: #DD0000">:&nbsp;\n"</span><span style="color: #007700">;<br></br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Bad:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #0000BB">$array</span><span style="color: #007700">[</span><span style="color: #DD0000">'$i'</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br></br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Good:&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #0000BB">$array</span><span style="color: #007700">[</span><span style="color: #0000BB">$i</span><span style="color: #007700">]&nbsp;.&nbsp;</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br></br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Bad:&nbsp;</span><span style="color: #007700">{</span><span style="color: #0000BB">$array</span><span style="color: #007700">[</span><span style="color: #DD0000">'$i'</span><span style="color: #007700">]']; ?></span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br></br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Good:&nbsp;</span><span style="color: #007700">{</span><span style="color: #0000BB">$array</span><span style="color: #007700">[</span><span style="color: #0000BB">$i</span><span style="color: #007700">]']; ?></span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br></br>']; ?><br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">The above example will output:</p><div class="example-contents screen"><div class="cdata"><pre>Checking 0: Notice: Undefined index:  $i in /path/to/script.html on line 9Bad: Good: 1Notice: Undefined index:  $i in /path/to/script.html on line 11Bad: Good: 1Checking 1: Notice: Undefined index:  $i in /path/to/script.html on line 9Bad: Good: 2Notice: Undefined index:  $i in /path/to/script.html on line 11Bad: Good: 2</pre></div></div></blockquote><p class="para">More examples to demonstrate this behaviour:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #FF8000">//&nbsp;Show&nbsp;all&nbsp;errors<br></br></span><span style="color: #0000BB">error_reporting</span><span style="color: #007700">(</span><span style="color: #0000BB">E_ALL</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #0000BB">$arr&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'fruit'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'veggie'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'carrot'</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;Correct<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">'fruit'</span><span style="color: #007700">];&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;apple<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">'veggie'</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;carrot<br></br><br></br>//&nbsp;Incorrect.&nbsp;&nbsp;This&nbsp;works&nbsp;but&nbsp;also&nbsp;throws&nbsp;a&nbsp;PHP&nbsp;error&nbsp;of&nbsp;level&nbsp;E_NOTICE&nbsp;because<br></br>//&nbsp;of&nbsp;an&nbsp;undefined&nbsp;constant&nbsp;named&nbsp;fruit<br></br>//&nbsp;<br></br>//&nbsp;Notice:&nbsp;Use&nbsp;of&nbsp;undefined&nbsp;constant&nbsp;fruit&nbsp;-&nbsp;assumed&nbsp;'fruit'&nbsp;in...<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #0000BB">fruit</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;apple<br></br><br></br>//&nbsp;This&nbsp;defines&nbsp;a&nbsp;constant&nbsp;to&nbsp;demonstrate&nbsp;what's&nbsp;going&nbsp;on.&nbsp;&nbsp;The&nbsp;value&nbsp;'veggie'<br></br>//&nbsp;is&nbsp;assigned&nbsp;to&nbsp;a&nbsp;constant&nbsp;named&nbsp;fruit.<br></br></span><span style="color: #0000BB">define</span><span style="color: #007700">(</span><span style="color: #DD0000">'fruit'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'veggie'</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;Notice&nbsp;the&nbsp;difference&nbsp;now<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">'fruit'</span><span style="color: #007700">];&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;apple<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #0000BB">fruit</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;carrot<br></br><br></br>//&nbsp;The&nbsp;following&nbsp;is&nbsp;okay,&nbsp;as&nbsp;it's&nbsp;inside&nbsp;a&nbsp;string.&nbsp;Constants&nbsp;are&nbsp;not&nbsp;looked&nbsp;for<br></br>//&nbsp;within&nbsp;strings,&nbsp;so&nbsp;no&nbsp;E_NOTICE&nbsp;occurs&nbsp;here<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #0000BB">fruit</span><span style="color: #007700">]</span><span style="color: #DD0000">"</span><span style="color: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;apple<br></br><br></br>//&nbsp;With&nbsp;one&nbsp;exception:&nbsp;braces&nbsp;surrounding&nbsp;arrays&nbsp;within&nbsp;strings&nbsp;allows&nbsp;constants<br></br>//&nbsp;to&nbsp;be&nbsp;interpreted<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;</span><span style="color: #007700">{</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #0000BB">fruit</span><span style="color: #007700">]']; ?></span><span style="color: #DD0000">"</span><span style="color: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;carrot<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;</span><span style="color: #007700">{</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">'fruit'</span><span style="color: #007700">]']; ?></span><span style="color: #DD0000">"</span><span style="color: #007700">;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;apple<br></br><br></br>//&nbsp;This&nbsp;will&nbsp;not&nbsp;work,&nbsp;and&nbsp;will&nbsp;result&nbsp;in&nbsp;a&nbsp;parse&nbsp;error,&nbsp;such&nbsp;as:<br></br>//&nbsp;Parse&nbsp;error:&nbsp;parse&nbsp;error,&nbsp;expecting&nbsp;T_STRING'&nbsp;or&nbsp;T_VARIABLE'&nbsp;or&nbsp;T_NUM_STRING'<br></br>//&nbsp;This&nbsp;of&nbsp;course&nbsp;applies&nbsp;to&nbsp;using&nbsp;superglobals&nbsp;in&nbsp;strings&nbsp;as&nbsp;well<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">'fruit']"</span><span style="color: #007700">;<br></br>print&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;</span><span style="color: #0000BB">$_GET</span><span style="color: #007700">[</span><span style="color: #DD0000">'foo']"</span><span style="color: #007700">;<br></br><br></br></span><span style="color: #FF8000">//&nbsp;Concatenation&nbsp;is&nbsp;another&nbsp;option<br></br></span><span style="color: #007700">print&nbsp;</span><span style="color: #DD0000">"Hello&nbsp;"&nbsp;</span><span style="color: #007700">.&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #DD0000">'fruit'</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;Hello&nbsp;apple<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">When<a href="errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a>is set to show<b><tt>E_NOTICE</tt></b>level errors (by setting it to<b><tt>E_ALL</tt></b>, for example), such uses will become immediately visible. By default,<a href="errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a>is set not to show notices.</p><p class="para">As stated in the<a href="language.types.array.php#language.types.array.syntax" class="link">syntax</a>section, what&#039;s inside the square brackets (&#039;<i>[</i>&#039; and &#039;<i>]</i>&#039;) must be an expression. This means that code like this works:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$arr</span><span style="color: #007700">[</span><span style="color: #0000BB">somefunc</span><span style="color: #007700">(</span><span style="color: #0000BB">$bar</span><span style="color: #007700">)];<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">This is an example of using a function return value as the array index. PHP also knows about constants:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$error_descriptions</span><span style="color: #007700">[</span><span style="color: #0000BB">E_ERROR</span><span style="color: #007700">]&nbsp;&nbsp;&nbsp;=&nbsp;</span><span style="color: #DD0000">"A&nbsp;fatal&nbsp;error&nbsp;has&nbsp;occured"</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$error_descriptions</span><span style="color: #007700">[</span><span style="color: #0000BB">E_WARNING</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"PHP&nbsp;issued&nbsp;a&nbsp;warning"</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$error_descriptions</span><span style="color: #007700">[</span><span style="color: #0000BB">E_NOTICE</span><span style="color: #007700">]&nbsp;&nbsp;=&nbsp;</span><span style="color: #DD0000">"This&nbsp;is&nbsp;just&nbsp;an&nbsp;informal&nbsp;notice"</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">Note that<b><tt>E_ERROR</tt></b>is also a valid identifier, just like<i>bar</i>in the first example. But the last example is in fact the same as writing:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$error_descriptions</span><span style="color: #007700">[</span><span style="color: #0000BB">1</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"A&nbsp;fatal&nbsp;error&nbsp;has&nbsp;occured"</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$error_descriptions</span><span style="color: #007700">[</span><span style="color: #0000BB">2</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"PHP&nbsp;issued&nbsp;a&nbsp;warning"</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$error_descriptions</span><span style="color: #007700">[</span><span style="color: #0000BB">8</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"This&nbsp;is&nbsp;just&nbsp;an&nbsp;informal&nbsp;notice"</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">because<b><tt>E_ERROR</tt></b>equals<i>1</i>, etc.</p><div class="sect4" id="language.types.array.foo-bar.why" name="language.types.array.foo-bar.why"><h5 class="title">So why is it bad then?</h5><p class="para">At some point in the future, the PHP team might want to add another constant or keyword, or a constant in other code may interfere. For example, it is already wrong to use the words<i>empty</i>and<i>default</i>this way, since they are<a href="reserved.php" class="link">reserved keywords</a>.</p><blockquote><p><b class="note">Note</b>:<span class="simpara">To reiterate, inside a double-quoted<span class="type"><a href="language.types.string.php" class="type string">string</a></span>, it&#039;s valid to not surround array indexes with quotes so<i>&quot;$foo[bar]&quot;</i>is valid. See the above examples for details on why as well as the section on<a href="language.types.string.php#language.types.string.parsing" class="link">variable parsing in strings</a>.</span></p></blockquote></div></div></div><div class="sect2" id="language.types.array.casting" name="language.types.array.casting"><h3 class="title">Converting to array</h3><p class="para">For any of the types:<span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>,<span class="type"><a href="language.types.float.php" class="type float">float</a></span>,<span class="type"><a href="language.types.string.php" class="type string">string</a></span>,<span class="type"><a href="language.types.boolean.php" class="type boolean">boolean</a></span>and<span class="type"><a href="language.types.resource.php" class="type resource">resource</a></span>, converting a value to an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>results in an array with a single element with index zero and the value of the scalar which was converted. In other words,<i>(array)$scalarValue</i>is exactly the same as<i>array($scalarValue)</i>.</p><p class="para">If an<span class="type"><a href="language.types.object.php" class="type object">object</a></span>is converted to an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>, the result is an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>whose elements are the<span class="type"><a href="language.types.object.php" class="type object">object</a></span>&#039;s properties. The keys are the member variable names, with a few notable exceptions: integer properties are unaccessible; private variables have the class name prepended to the variable name; protected variables have a &#039;*&#039; prepended to the variable name. These prepended values have null bytes on either side. This can result in some unexpected behaviour:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br><br></br></span><span style="color: #007700">class&nbsp;</span><span style="color: #0000BB">A&nbsp;</span><span style="color: #007700">{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #0000BB">$A</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;will&nbsp;become&nbsp;'\0A\0A'<br></br></span><span style="color: #007700">']; ?><br></br><br></br>class&nbsp;</span><span style="color: #0000BB">B&nbsp;</span><span style="color: #007700">extends&nbsp;</span><span style="color: #0000BB">A&nbsp;</span><span style="color: #007700">{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style="color: #0000BB">$A</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;will&nbsp;become&nbsp;'\0B\0A'<br></br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">public&nbsp;</span><span style="color: #0000BB">$AA</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;This&nbsp;will&nbsp;become&nbsp;'AA'<br></br></span><span style="color: #007700">']; ?><br></br><br></br></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">((array)&nbsp;new&nbsp;</span><span style="color: #0000BB">B</span><span style="color: #007700">());<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">The above will appear to have two keys named &#039;AA&#039;, although one of them is actually named &#039;\0A\0A&#039;.</p><p class="para">Converting<b><tt>NULL</tt></b>to an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>results in an empty<span class="type"><a href="language.types.array.php" class="type array">array</a></span>.</p></div><div class="sect2" id="language.types.array.comparing" name="language.types.array.comparing"><h3 class="title">Comparing</h3><p class="para">It is possible to compare arrays with the<span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span>function and with<a href="language.operators.array.php" class="link">array operators</a>.</p></div><div class="sect2" id="language.types.array.examples" name="language.types.array.examples"><h3 class="title">Examples</h3><p class="para">The array type in PHP is very versatile. Here are some examples:</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #FF8000">//&nbsp;This:<br></br></span><span style="color: #0000BB">$a&nbsp;</span><span style="color: #007700">=&nbsp;array(&nbsp;</span><span style="color: #DD0000">'color'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'red'</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'taste'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'sweet'</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'shape'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'round'</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'name'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;key&nbsp;will&nbsp;be&nbsp;0<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #0000BB">$b&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'a'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'b'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'c'</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;.&nbsp;.&nbsp;.is&nbsp;completely&nbsp;equivalent&nbsp;with&nbsp;this:<br></br></span><span style="color: #0000BB">$a&nbsp;</span><span style="color: #007700">=&nbsp;array();<br></br></span><span style="color: #0000BB">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'color'</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'red'</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'taste'</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'sweet'</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'shape'</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">'round'</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$a</span><span style="color: #007700">[</span><span style="color: #DD0000">'name'</span><span style="color: #007700">]&nbsp;&nbsp;=&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$a</span><span style="color: #007700">[]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;key&nbsp;will&nbsp;be&nbsp;0<br></br><br></br></span><span style="color: #0000BB">$b&nbsp;</span><span style="color: #007700">=&nbsp;array();<br></br></span><span style="color: #0000BB">$b</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #DD0000">'a'</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$b</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #DD0000">'b'</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$b</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #DD0000">'c'</span><span style="color: #007700">;<br></br><br></br></span><span style="color: #FF8000">//&nbsp;After&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;executed,&nbsp;$a&nbsp;will&nbsp;be&nbsp;the&nbsp;array<br></br>//&nbsp;array('color'&nbsp;=&gt;&nbsp;'red',&nbsp;'taste'&nbsp;=&gt;&nbsp;'sweet',&nbsp;'shape'&nbsp;=&gt;&nbsp;'round',&nbsp;<br></br>//&nbsp;'name'&nbsp;=&gt;&nbsp;'apple',&nbsp;0&nbsp;=&gt;&nbsp;4),&nbsp;and&nbsp;$b&nbsp;will&nbsp;be&nbsp;the&nbsp;array&nbsp;<br></br>//&nbsp;array(0&nbsp;=&gt;&nbsp;'a',&nbsp;1&nbsp;=&gt;&nbsp;'b',&nbsp;2&nbsp;=&gt;&nbsp;'c'),&nbsp;or&nbsp;simply&nbsp;array('a',&nbsp;'b',&nbsp;'c').<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><div class="example"><p><b>Example #1 Using array()</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #FF8000">//&nbsp;Array&nbsp;as&nbsp;(property-)map<br></br></span><span style="color: #0000BB">$map&nbsp;</span><span style="color: #007700">=&nbsp;array(&nbsp;</span><span style="color: #DD0000">'version'&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'OS'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Linux'</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'lang'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'english'</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'short_tags'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">true<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">);<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></br></span><span style="color: #FF8000">//&nbsp;strictly&nbsp;numerical&nbsp;keys<br></br></span><span style="color: #0000BB">$array&nbsp;</span><span style="color: #007700">=&nbsp;array(&nbsp;</span><span style="color: #0000BB">7</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">8</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB"></span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">156</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-</span><span style="color: #0000BB">10<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">);<br></br></span><span style="color: #FF8000">//&nbsp;this&nbsp;is&nbsp;the&nbsp;same&nbsp;as&nbsp;array(0&nbsp;=&gt;&nbsp;7,&nbsp;1&nbsp;=&gt;&nbsp;8,&nbsp;...)<br></br><br></br></span><span style="color: #0000BB">$switching&nbsp;</span><span style="color: #007700">=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #FF8000">//&nbsp;key&nbsp;=&nbsp;0<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">5&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;&nbsp;</span><span style="color: #0000BB">6</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">3&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;&nbsp;</span><span style="color: #0000BB">7</span><span style="color: #007700">,&nbsp;<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'a'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">11</span><span style="color: #007700">,&nbsp;</span><span style="color: #FF8000">//&nbsp;key&nbsp;=&nbsp;6&nbsp;(maximum&nbsp;of&nbsp;integer-indices&nbsp;was&nbsp;5)<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'8'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #FF8000">//&nbsp;key&nbsp;=&nbsp;8&nbsp;(integer!)<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'02'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">77</span><span style="color: #007700">,&nbsp;</span><span style="color: #FF8000">//&nbsp;key&nbsp;=&nbsp;'02'<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">0&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">12&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;the&nbsp;value&nbsp;10&nbsp;will&nbsp;be&nbsp;overwritten&nbsp;by&nbsp;12<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">);<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></br></span><span style="color: #FF8000">//&nbsp;empty&nbsp;array<br></br></span><span style="color: #0000BB">$empty&nbsp;</span><span style="color: #007700">=&nbsp;array();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><div class="example"><p><b>Example #2 Collection</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$colors&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'red'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'blue'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'green'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'yellow'</span><span style="color: #007700">);<br></br><br></br>foreach&nbsp;(</span><span style="color: #0000BB">$colors&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #0000BB">$color</span><span style="color: #007700">)&nbsp;{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Do&nbsp;you&nbsp;like&nbsp;</span><span style="color: #0000BB">$color</span><span style="color: #DD0000">?\n"</span><span style="color: #007700">;<br></br>']; ?><br></br><br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div><div class="example-contents"><p>The above example will output:</p></div><div class="example-contents screen"><div class="cdata"><pre>Do you like red?Do you like blue?Do you like green?Do you like yellow?</pre></div></div></div><p class="para">Changing the values of the<span class="type"><a href="language.types.array.php" class="type array">array</a></span>directly is possible since PHP 5 by passing them by reference. Before that, a workaround is necessary:</p><div class="example"><p><b>Example #3 Changing element in the loop</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #FF8000">//&nbsp;PHP&nbsp;5<br></br></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #0000BB">$colors&nbsp;</span><span style="color: #007700">as&nbsp;&amp;</span><span style="color: #0000BB">$color</span><span style="color: #007700">)&nbsp;{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$color&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">strtoupper</span><span style="color: #007700">(</span><span style="color: #0000BB">$color</span><span style="color: #007700">);<br></br>']; ?><br></br>unset(</span><span style="color: #0000BB">$color</span><span style="color: #007700">);&nbsp;</span><span style="color: #FF8000">/*&nbsp;ensure&nbsp;that&nbsp;following&nbsp;writes&nbsp;to<br></br>$color&nbsp;will&nbsp;not&nbsp;modify&nbsp;the&nbsp;last&nbsp;array&nbsp;element&nbsp;*/<br></br><br></br>//&nbsp;Workaround&nbsp;for&nbsp;older&nbsp;versions<br></br></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #0000BB">$colors&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #0000BB">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">$color</span><span style="color: #007700">)&nbsp;{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$colors</span><span style="color: #007700">[</span><span style="color: #0000BB">$key</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #0000BB">strtoupper</span><span style="color: #007700">(</span><span style="color: #0000BB">$color</span><span style="color: #007700">);<br></br>']; ?><br></br><br></br></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$colors</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div><div class="example-contents"><p>The above example will output:</p></div><div class="example-contents screen"><div class="cdata"><pre>Array(    [0] =&gt; RED    [1] =&gt; BLUE    [2] =&gt; GREEN    [3] =&gt; YELLOW)</pre></div></div></div><p class="para">This example creates a one-based array.</p><div class="example"><p><b>Example #4 One-based index</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$firstquarter&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">1&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'January'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'February'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'March'</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$firstquarter</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div><div class="example-contents"><p>The above example will output:</p></div><div class="example-contents screen"><div class="cdata"><pre>Array (    [1] =&gt; &#039;January&#039;    [2] =&gt; &#039;February&#039;    [3] =&gt; &#039;March&#039;)</pre></div></div></div><div class="example"><p><b>Example #5 Filling an array</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br></span><span style="color: #FF8000">//&nbsp;fill&nbsp;an&nbsp;array&nbsp;with&nbsp;all&nbsp;items&nbsp;from&nbsp;a&nbsp;directory<br></br></span><span style="color: #0000BB">$handle&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">opendir</span><span style="color: #007700">(</span><span style="color: #DD0000">'.'</span><span style="color: #007700">);<br></br>while&nbsp;(</span><span style="color: #0000BB">false&nbsp;</span><span style="color: #007700">!==&nbsp;(</span><span style="color: #0000BB">$file&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">readdir</span><span style="color: #007700">(</span><span style="color: #0000BB">$handle</span><span style="color: #007700">)))&nbsp;{<br></br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$files</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">$file</span><span style="color: #007700">;<br></br>']; ?><br></br></span><span style="color: #0000BB">closedir</span><span style="color: #007700">(</span><span style="color: #0000BB">$handle</span><span style="color: #007700">);&nbsp;<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para"><span class="type"><a href="language.types.array.php" class="type Array">Array</a></span>s are ordered. The order can be changed using various sorting functions. See the<a href="ref.array.php" class="link">array functions</a>section for more information. The<span class="function"><a href="function.count.php" class="function">count()</a></span>function can be used to count the number of items in an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>.</p><div class="example"><p><b>Example #6 Sorting an array</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>sort</span><span style="color: #007700">(</span><span style="color: #0000BB">$files</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$files</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para">Because the value of an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>can be anything, it can also be another<span class="type"><a href="language.types.array.php" class="type array">array</a></span>. This enables the creation of recursive and multi-dimensional<span class="type"><a href="language.types.array.php" class="type array">array</a></span>s.</p><div class="example"><p><b>Example #7 Recursive and multi-dimensional arrays</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$fruits&nbsp;</span><span style="color: #007700">=&nbsp;array&nbsp;(&nbsp;</span><span style="color: #DD0000">"fruits"&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array&nbsp;(&nbsp;</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"orange"</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"banana"</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"apple"<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">),<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"numbers"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array&nbsp;(&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">3</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">5</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">6<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">),<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"holes"&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"first"</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">5&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"second"</span><span style="color: #007700">,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"third"<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">)<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br></br><br></br></span><span style="color: #FF8000">//&nbsp;Some&nbsp;examples&nbsp;to&nbsp;address&nbsp;values&nbsp;in&nbsp;the&nbsp;array&nbsp;above&nbsp;<br></br></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$fruits</span><span style="color: #007700">[</span><span style="color: #DD0000">"holes"</span><span style="color: #007700">][</span><span style="color: #0000BB">5</span><span style="color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;prints&nbsp;"second"<br></br></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$fruits</span><span style="color: #007700">[</span><span style="color: #DD0000">"fruits"</span><span style="color: #007700">][</span><span style="color: #DD0000">"a"</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;prints&nbsp;"orange"<br></br></span><span style="color: #007700">unset(</span><span style="color: #0000BB">$fruits</span><span style="color: #007700">[</span><span style="color: #DD0000">"holes"</span><span style="color: #007700">][</span><span style="color: #0000BB"></span><span style="color: #007700">]);&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;remove&nbsp;"first"<br></br><br></br>//&nbsp;Create&nbsp;a&nbsp;new&nbsp;multi-dimensional&nbsp;array<br></br></span><span style="color: #0000BB">$juices</span><span style="color: #007700">[</span><span style="color: #DD0000">"apple"</span><span style="color: #007700">][</span><span style="color: #DD0000">"green"</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #DD0000">"good"</span><span style="color: #007700">;&nbsp;<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div><p class="para"><span class="type"><a href="language.types.array.php" class="type Array">Array</a></span>assignment always involves value copying. Use the<a href="language.operators.php" class="link">reference operator</a>to copy an<span class="type"><a href="language.types.array.php" class="type array">array</a></span>by reference.</p><div class="informalexample"><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br>$arr1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">3</span><span style="color: #007700">);<br></br></span><span style="color: #0000BB">$arr2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">$arr1</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$arr2</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;$arr2&nbsp;is&nbsp;changed,<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;$arr1&nbsp;is&nbsp;still&nbsp;array(2,&nbsp;3)<br></br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></br></span><span style="color: #0000BB">$arr3&nbsp;</span><span style="color: #007700">=&nbsp;&amp;</span><span style="color: #0000BB">$arr1</span><span style="color: #007700">;<br></br></span><span style="color: #0000BB">$arr3</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;now&nbsp;$arr1&nbsp;and&nbsp;$arr3&nbsp;are&nbsp;the&nbsp;same<br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div></div></div></div><br></br><br></br><!-- UdmComment !--><div class="manualnavbar manualnavbar_bottom"><span class="next"><a href="language.types.object.php">Objects<img src="/images/caret-r.gif" alt="&gt;" width="11" height="7"/></a></span><span class="prev"><a href="language.types.string.php"><img src="/images/caret-l.gif" alt="&lt;" width="11" height="7"/>Strings</a></span><hr></hr><span class="lastupdated">Last updated: Fri, 04 Mar 2011</span><div class="langchooser">&nbsp;</div></div><!-- /UdmComment !--><div id="usernotes"><div class="head"><span class="action"><a href="/manual/add-note.php?sect=language.types.array&amp;redirect=http://de.php.net/manual/en/language.types.array.php"><img src="/images/notes-add.gif" alt="add a note" width="13" height="13" class="middle"/></a><small><a href="/manual/add-note.php?sect=language.types.array&amp;redirect=http://de.php.net/manual/en/language.types.array.php">add a note</a></small></span><small>User Contributed Notes</small><strong>Arrays</strong></div><div id="allnotes"><a name="102865"></a><div class="note"><strong class="user">lemurjan at gmail dot com</strong><a href="#102865" class="date">11-Mar-2011 12:54</a><div class="text"><div class="phpcode"><code><span class="html">Sometimes you may need an array of constants including concatenated strings.<br></br><br></br>That works fine in this case:<br></br><br></br><span class="default">&lt;?php<br></br>define</span><span class="keyword">(</span><span class="string">"GLUE"</span><span class="keyword">,</span><span class="string">"&amp;"</span><span class="keyword">);<br></br><br></br>function</span><span class="default">array_to_string</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$r</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; foreach (</span><span class="default">$a</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">) {</span><span class="default">$r</span><span class="keyword">.=</span><span class="string">"</span><span class="default">$key</span><span class="string">=&gt;</span><span class="default">$value</span><span class="string">&lt;br&gt;"</span><span class="keyword">; ']; ?>;<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$r</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="comment">// DECLARING ARRAY (1)<br></br></span><span class="default">$array</span><span class="keyword">= array(</span><span class="string">"one"</span><span class="keyword">,</span><span class="string">"two"</span><span class="keyword">,</span><span class="string">"one"</span><span class="keyword">.</span><span class="default">GLUE</span><span class="keyword">.</span><span class="string">"two"</span><span class="keyword">);<br></br><br></br>echo</span><span class="default">array_to_string</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>This seems rather strange behavior in a CLASS nevertheless:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">class</span><span class="default">wrong_class</span><span class="keyword">{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// DECLARING ARRAY (2)<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span class="default">$array</span><span class="keyword">= array(</span><span class="string">"one"</span><span class="keyword">,</span><span class="string">"two"</span><span class="keyword">,</span><span class="string">"one"</span><span class="keyword">.</span><span class="default">GLUE</span><span class="keyword">.</span><span class="string">"two"</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; function</span><span class="default">__toString</span><span class="keyword">() {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">array_to_string</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">array</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?><br></br></span><span class="default">$wc</span><span class="keyword">= new</span><span class="default">wrong_class</span><span class="keyword">();<br></br>echo</span><span class="default">$wc</span><span class="keyword">;<br></br></span><span class="comment">/*<br></br>&nbsp;&nbsp;&nbsp; Parse error: parse error, expecting `')'' in ... code on line 21<br></br>*/<br></br></span><span class="default">?&gt;<br></br></span><br></br>Anyway, if you force this declaring method inside a CLASS, you could change the object map directly:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">class</span><span class="default">proper_class</span><span class="keyword">{<br></br>&nbsp;&nbsp;&nbsp; function</span><span class="default">__construct</span><span class="keyword">() {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">// DECLARING ARRAY (3)<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">array</span><span class="keyword">= array(</span><span class="string">"one"</span><span class="keyword">,</span><span class="string">"two"</span><span class="keyword">,</span><span class="string">"one"</span><span class="keyword">.</span><span class="default">GLUE</span><span class="keyword">.</span><span class="string">"two"</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; function</span><span class="default">__toString</span><span class="keyword">() {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">array_to_string</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">array</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?><br></br></span><span class="default">$pc</span><span class="keyword">= new</span><span class="default">proper_class</span><span class="keyword">();<br></br>echo</span><span class="default">$pc</span><span class="keyword">;<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="102156"></a><div class="note"><strong class="user">falkon303 at gmail dot com</strong><a href="#102156" class="date">30-Jan-2011 09:08</a><div class="text"><div class="phpcode"><code><span class="html">Multidimensional arrays work great for checking search options if they exist in a $_GET string.&nbsp; The following saved me a lot of time.<br></br><br></br><span class="default">&lt;?php<br></br><br></br>$advanced_option</span><span class="keyword">[</span><span class="string">'color'</span><span class="keyword">] = array(</span><span class="string">"red"</span><span class="keyword">,</span><span class="string">"blue"</span><span class="keyword">,</span><span class="string">"green"</span><span class="keyword">);<br></br></span><span class="default">$advanced_option</span><span class="keyword">[</span><span class="string">'state'</span><span class="keyword">] = array(</span><span class="string">"new"</span><span class="keyword">,</span><span class="string">"broken"</span><span class="keyword">);<br></br></span><span class="default">$advanced_option</span><span class="keyword">[</span><span class="string">'state'</span><span class="keyword">] = array(</span><span class="string">"on"</span><span class="keyword">,</span><span class="string">"off"</span><span class="keyword">);<br></br><br></br>foreach(</span><span class="default">$advanced_option</span><span class="keyword">as</span><span class="default">$y</span><span class="keyword">=&gt;</span><span class="default">$advanced_option</span><span class="keyword">[</span><span class="default">$y</span><span class="keyword">])<br></br>{<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// HERE WARE ARE GOING INTO EACH ARRAY'S VALUES/ITEMS<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$sub_array</span><span class="keyword">=</span><span class="default">$advanced_option</span><span class="keyword">[</span><span class="default">$y</span><span class="keyword">];<br></br>&nbsp;&nbsp;&nbsp; foreach(</span><span class="default">$sub_array</span><span class="keyword">as</span><span class="default">$z</span><span class="keyword">=&gt;</span><span class="default">$sub_array</span><span class="keyword">[</span><span class="default">$z</span><span class="keyword">])<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">// IF THE SEARCH OPTI0N EXISTS IN THE GET STRING, SET AN ARRAY NAMED AFTER THAT VALUE TO BE CHECKED (FOR CHECKBOXES &amp; RADIOBUTTONS)<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">if (</span><span class="default">$_GET</span><span class="keyword">[</span><span class="default">$y</span><span class="keyword">] ==</span><span class="default">$advanced_option</span><span class="keyword">[</span><span class="default">$y</span><span class="keyword">][</span><span class="default">$z</span><span class="keyword">])<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$checked</span><span class="keyword">[</span><span class="default">$advanced_option</span><span class="keyword">[</span><span class="default">$y</span><span class="keyword">][</span><span class="default">$z</span><span class="keyword">]] =</span><span class="string">"checked"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?><br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="101060"></a><div class="note"><strong class="user">Anonymous</strong><a href="#101060" class="date">23-Nov-2010 10:27</a><div class="text"><div class="phpcode"><code><span class="html">In case you had to get an element from a function-returned array without having to save the array to a variable, here's a workaround I've come up with.<br></br><br></br><span class="default">&lt;?php<br></br>$stuff</span><span class="keyword">=</span><span class="string">'something random here'</span><span class="keyword">;<br></br><br></br></span><span class="comment">// To get the first element in the array, use reset<br></br></span><span class="keyword">echo</span><span class="default">reset</span><span class="keyword">(</span><span class="default">explode</span><span class="keyword">(</span><span class="string">' '</span><span class="keyword">,</span><span class="default">$stuff</span><span class="keyword">));<br></br></span><span class="comment">// Returns "something"<br></br><br></br>// To get the last element, use end<br></br></span><span class="keyword">echo</span><span class="default">end</span><span class="keyword">(</span><span class="default">explode</span><span class="keyword">(</span><span class="string">' '</span><span class="keyword">,</span><span class="default">$stuff</span><span class="keyword">));<br></br></span><span class="comment">// Returns "here"<br></br><br></br>// For an in-between element, you can use array_search on the flipped array<br></br></span><span class="default">$i</span><span class="keyword">=</span><span class="default">1</span><span class="keyword">;</span><span class="comment">//key for the element<br></br></span><span class="keyword">echo</span><span class="default">array_search</span><span class="keyword">(</span><span class="default">$i</span><span class="keyword">,</span><span class="default">array_flip</span><span class="keyword">(</span><span class="default">explode</span><span class="keyword">(</span><span class="string">' '</span><span class="keyword">,</span><span class="default">$stuff</span><span class="keyword">)));<br></br></span><span class="comment">// Returns "random"<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="99506"></a><div class="note"><strong class="user">Flappi282</strong><a href="#99506" class="date">20-Aug-2010 05:03</a><div class="text"><div class="phpcode"><code><span class="html">Heres a simple function I wrote to remove a value from an array, without leaving a hole:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">removeFromArray</span><span class="keyword">(&amp;</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$key</span><span class="keyword">){<br></br>foreach(</span><span class="default">$array</span><span class="keyword">as</span><span class="default">$j</span><span class="keyword">=&gt;</span><span class="default">$i</span><span class="keyword">){<br></br>if(</span><span class="default">$i</span><span class="keyword">==</span><span class="default">$key</span><span class="keyword">){<br></br></span><span class="default">$array</span><span class="keyword">=</span><span class="default">array_values</span><span class="keyword">(unset(</span><span class="default">$array</span><span class="keyword">[</span><span class="default">$j</span><span class="keyword">]));<br></br>return</span><span class="default">true</span><span class="keyword">;<br></br>break;<br></br>']; ?><br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>Returns true on success, or false on failure. The array will be automatically updated</span></code></div></div></div><a name="99363"></a><div class="note"><strong class="user">Walter Tross</strong><a href="#99363" class="date">12-Aug-2010 06:04</a><div class="text"><div class="phpcode"><code><span class="html">It is true that "array assignment always involves value copying", but the copy is a "lazy copy". This means that the data of the two variables occupy the same memory as long as no array element changes.<br></br><br></br>E.g., if you have to pass an array to a function that only needs to read it, there is no advantage at all in passing it by reference.</span></code></div></div></div><a name="99015"></a><div class="note"><strong class="user">ivegner at yandex dot ru</strong><a href="#99015" class="date">22-Jul-2010 11:20</a><div class="text"><div class="phpcode"><code><span class="html">Like in Perl, you can use curly braces ({']; ?>) instead of square brackets ([]) to access array members:<br></br><br></br><span class="default">&lt;?php<br></br>$a</span><span class="keyword">= array ();<br></br></span><span class="default">$a</span><span class="keyword">[</span><span class="default">7</span><span class="keyword">] =</span><span class="string">'seven'</span><span class="keyword">;<br></br></span><span class="default">$a</span><span class="keyword">{</span><span class="string">'hello'</span><span class="keyword">']; ?> =</span><span class="string">'world'</span><span class="keyword">;<br></br>print</span><span class="default">$a</span><span class="keyword">{</span><span class="default">7</span><span class="keyword">']; ?> .</span><span class="string">' '</span><span class="keyword">.</span><span class="default">$a</span><span class="keyword">[</span><span class="string">'hello'</span><span class="keyword">];<br></br></span><span class="default">?&gt;<br></br></span><br></br>Prints 'seven world'.</span></code></div></div></div><a name="98345"></a><div class="note"><strong class="user">william at cycronsystems dot com</strong><a href="#98345" class="date">09-Jun-2010 11:28</a><div class="text"><div class="phpcode"><code><span class="html">I couldn't find a way to Trim an array in PHP so i wrote this little function that seemed to do the trick. It will trim the array down to a specified size<br></br><br></br><span class="default">&lt;?php<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">//Utility Function to Trim Array<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">function</span><span class="default">trim_array</span><span class="keyword">(array</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$int</span><span class="keyword">){<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$newArray</span><span class="keyword">= array();<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; for(</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">$int</span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">++){<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">array_push</span><span class="keyword">(</span><span class="default">$newArray</span><span class="keyword">,</span><span class="default">$array</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return (array)</span><span class="default">$newArray</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br><br></br></span><span class="default">?&gt;<br></br></span><br></br>Example:<br></br>var_dump($treatList);<br></br>&nbsp;array(3) {<br></br>&nbsp;&nbsp;&nbsp; ["id"]=&gt;<br></br>&nbsp;&nbsp;&nbsp; string(3) "476"<br></br>&nbsp;&nbsp;&nbsp; ["categoryID"]=&gt;<br></br>&nbsp;&nbsp;&nbsp; string(2) "49"<br></br>&nbsp;&nbsp;&nbsp; ["title"]=&gt;<br></br>&nbsp;&nbsp;&nbsp; string(55) "80% off Sidewalk Crawling Classes from Urban Adventures"<br></br><br></br>$treatList = trim_array($listist,2);<br></br>Will result in:<br></br>var_dump($treatList);<br></br>&nbsp;array(2) {<br></br>&nbsp;&nbsp;&nbsp; ["id"]=&gt;<br></br>&nbsp;&nbsp;&nbsp; string(3) "476"<br></br>&nbsp;&nbsp;&nbsp; ["categoryID"]=&gt;<br></br>&nbsp;&nbsp;&nbsp; string(2) "49"</span></code></div></div></div><a name="98246"></a><div class="note"><strong class="user">zachera</strong><a href="#98246" class="date">03-Jun-2010 07:39</a><div class="text"><div class="phpcode"><code><span class="html">function array_closest_key($needle,$haystack){<br></br>&nbsp;&nbsp;&nbsp; foreach($haystack as $key =&gt; $value){<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if($needle &lt;= $value){<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return $key;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?><br></br><br></br>Get the closest key to the specified $needle out of $haystack.</span></code></div></div></div><a name="97864"></a><div class="note"><strong class="user">dtomasiewicz at gmail dot com</strong><a href="#97864" class="date">12-May-2010 05:42</a><div class="text"><div class="phpcode"><code><span class="html"><span class="default">&lt;?php<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">/**<br></br>&nbsp;&nbsp; &nbsp; * Functions for examining and manipulating matrices (n-dimensional arrays) of data<br></br>&nbsp;&nbsp; &nbsp; * with string dot-separated paths. For example, you might do this with multidimensional<br></br>&nbsp;&nbsp; &nbsp; * array:<br></br>&nbsp;&nbsp; &nbsp; *&nbsp;&nbsp; $var = $array['someKey']['cats']['dogs']['potato'];<br></br>&nbsp;&nbsp; &nbsp; *<br></br>&nbsp;&nbsp; &nbsp; * Accomplishing this can be a nightmare if you don't know the depth of the path or the array<br></br>&nbsp;&nbsp; &nbsp; * is of a variable dimension.<br></br>&nbsp;&nbsp; &nbsp; *<br></br>&nbsp;&nbsp; &nbsp; * You can accomplish the same by using $array as a Matrix:<br></br>&nbsp;&nbsp; &nbsp; *&nbsp;&nbsp; $array = new Matrix($array);<br></br>&nbsp;&nbsp; &nbsp; *&nbsp;&nbsp; $var = $array-&gt;get('someKey.cats.dogs.potato);<br></br>&nbsp;&nbsp; &nbsp; *&nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; * @author Daniel Tomasiewicz &lt;www.fourstaples.com&gt;<br></br>&nbsp;&nbsp; &nbsp; */<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">class</span><span class="default">Matrix</span><span class="keyword">{<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; private</span><span class="default">$data</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; public function</span><span class="default">__construct</span><span class="keyword">(array</span><span class="default">$data</span><span class="keyword">= array()) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">=</span><span class="default">$data</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">/**<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * Gets the value at the specified path.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">public function</span><span class="default">get</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">=</span><span class="default">null</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$path</span><span class="keyword">===</span><span class="default">null</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$segs</span><span class="keyword">=</span><span class="default">explode</span><span class="keyword">(</span><span class="string">'.'</span><span class="keyword">,</span><span class="default">$path</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$target</span><span class="keyword">=&amp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; for(</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">++) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(isset(</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]]) &amp;&amp;</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]])) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$target</span><span class="keyword">=&amp;</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]];<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?> else {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">null</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(isset(</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">]])) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">]];<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?> else {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">null</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">/**<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * Sets a value to a specified path. If the provided value is<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * null, the existing value at the path will be unset.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">public function</span><span class="default">set</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">,</span><span class="default">$value</span><span class="keyword">=</span><span class="default">null</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">)) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$path</span><span class="keyword">as</span><span class="default">$p</span><span class="keyword">=&gt;</span><span class="default">$v</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">set</span><span class="keyword">(</span><span class="default">$p</span><span class="keyword">,</span><span class="default">$v</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?> else {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$segs</span><span class="keyword">=</span><span class="default">explode</span><span class="keyword">(</span><span class="string">'.'</span><span class="keyword">,</span><span class="default">$path</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$target</span><span class="keyword">=&amp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">data</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; for(</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">++) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(!isset(</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]])) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]] = array();<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$target</span><span class="keyword">=&amp;</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]];<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">] ==</span><span class="string">'*'</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$target</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$key</span><span class="keyword">];<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?> elseif(</span><span class="default">$value</span><span class="keyword">===</span><span class="default">null</span><span class="keyword">&amp;&amp; isset(</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">]])) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; unset(</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">]]);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?> else {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$target</span><span class="keyword">[</span><span class="default">$segs</span><span class="keyword">[</span><span class="default">count</span><span class="keyword">(</span><span class="default">$segs</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">]] =</span><span class="default">$value</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">/**<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * Returns a flattened version of the data (one-dimensional array<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * with dot-separated paths as its keys).<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">public function</span><span class="default">flatten</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">=</span><span class="default">null</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$data</span><span class="keyword">=</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">get</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$path</span><span class="keyword">===</span><span class="default">null</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$path</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?> else {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$path</span><span class="keyword">.=</span><span class="string">'.'</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flat</span><span class="keyword">= array();<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$data</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$value</span><span class="keyword">)) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flat</span><span class="keyword">+=</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">flatten</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">.</span><span class="default">$key</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?> else {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flat</span><span class="keyword">[</span><span class="default">$path</span><span class="keyword">.</span><span class="default">$key</span><span class="keyword">] =</span><span class="default">$value</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$flat</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">/**<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * Expands a flattened array to an n-dimensional matrix.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">public static function</span><span class="default">expand</span><span class="keyword">(</span><span class="default">$flat</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$matrix</span><span class="keyword">= new</span><span class="default">Matrix</span><span class="keyword">();<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$flat</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$matrix</span><span class="keyword">-&gt;</span><span class="default">set</span><span class="keyword">(</span><span class="default">$key</span><span class="keyword">,</span><span class="default">$value</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$matrix</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="95210"></a><div class="note"><strong class="user">john at nowhere dot com</strong><a href="#95210" class="date">18-Dec-2009 05:33</a><div class="text"><div class="phpcode"><code><span class="html">If you ever wondered if you can do something like:<br></br><br></br><span class="default">&lt;?php<br></br>$a</span><span class="keyword">=</span><span class="default">function_that_returns_an_array</span><span class="keyword">()[</span><span class="string">'some_index'</span><span class="keyword">][</span><span class="string">'some_other_index'</span><span class="keyword">] ;<br></br></span><span class="default">?&gt;<br></br></span><br></br>The answer is no, you can't. But you can use the following function. I named it i() because it's a short name and stands for "to index".<br></br><br></br><span class="default">&lt;?php<br></br><br></br></span><span class="comment">/**<br></br>&nbsp;* Usage: i( $array, $index [, $index2, $index3 ...] )<br></br>&nbsp;*<br></br>&nbsp;* This is functionally equivalent to $array[$index1][$index2][$index3]...<br></br>&nbsp;*&nbsp;<br></br>&nbsp;* It can replace the more prolix<br></br>&nbsp;*<br></br>&nbsp;*&nbsp;&nbsp; $tmp = some_function_that_returns_an_array() ;<br></br>&nbsp;*&nbsp;&nbsp; $value = $tmp['some_index']['some_other_index'] ;<br></br>&nbsp;*<br></br>&nbsp;* by doing the job with a single line of code as in<br></br>&nbsp;*<br></br>&nbsp;*&nbsp;&nbsp; $value = i( some_function_that_returns_an_array(), 'some_index', 'some_other_index' ) ;<br></br>&nbsp;*<br></br>&nbsp;* Note that since this function is slower than direct indexing, it should only be used in cases like the one<br></br>&nbsp;* described above, for improving legibility.<br></br>&nbsp;*<br></br>&nbsp;* @param $array<br></br>&nbsp;* @param $index<br></br>&nbsp;* @param [optional] $index2, index3, ...<br></br>&nbsp;* @throws Exception when the indexes do not exist<br></br>&nbsp;*/<br></br></span><span class="keyword">function</span><span class="default">i</span><span class="keyword">(){<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$args</span><span class="keyword">=</span><span class="default">func_get_args</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">=</span><span class="default">$args</span><span class="keyword">[</span><span class="default"></span><span class="keyword">];</span><span class="comment">//gets the fist parameter, $array<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$indexes</span><span class="keyword">=</span><span class="default">$args</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; unset(</span><span class="default">$indexes</span><span class="keyword">[</span><span class="default"></span><span class="keyword">]);</span><span class="comment">//because indexes[0] is actually not an index, but the first parameter, $array<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">foreach(</span><span class="default">$indexes</span><span class="keyword">as</span><span class="default">$index</span><span class="keyword">){<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if( (!</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">)) || (!</span><span class="default">array_key_exists</span><span class="keyword">(</span><span class="default">$index</span><span class="keyword">,</span><span class="default">$array</span><span class="keyword">)) ){<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; throw new</span><span class="default">Exception</span><span class="keyword">(</span><span class="string">"Array index out of bounds. Parameters:"</span><span class="keyword">.</span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$args</span><span class="keyword">,</span><span class="default">true</span><span class="keyword">));&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">=</span><span class="default">$array</span><span class="keyword">[</span><span class="default">$index</span><span class="keyword">];<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$array</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp;<br></br>']; ?><br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="94241"></a><div class="note"><strong class="user">aaron at tekserve dot com</strong><a href="#94241" class="date">25-Oct-2009 01:16</a><div class="text"><div class="phpcode"><code><span class="html">Here's a function to recursively convert objects to arrays and remove the special characters from private and protected variables. I use it with XML_Serializer to convert objects to XML.<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">object_to_array</span><span class="keyword">(</span><span class="default">$mixed</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp; if(</span><span class="default">is_object</span><span class="keyword">(</span><span class="default">$mixed</span><span class="keyword">))</span><span class="default">$mixed</span><span class="keyword">= (array)</span><span class="default">$mixed</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; if(</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$mixed</span><span class="keyword">)) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$new</span><span class="keyword">= array();<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$mixed</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$val</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$key</span><span class="keyword">=</span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">"/^\\0(.*)\\0/"</span><span class="keyword">,</span><span class="string">""</span><span class="keyword">,</span><span class="default">$key</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$new</span><span class="keyword">[</span><span class="default">$key</span><span class="keyword">] =</span><span class="default">object_to_array</span><span class="keyword">(</span><span class="default">$val</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; else</span><span class="default">$new</span><span class="keyword">=</span><span class="default">$mixed</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$new</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp;<br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="94165"></a><div class="note"><strong class="user">unix at bujanoci dot net</strong><a href="#94165" class="date">20-Oct-2009 05:55</a><div class="text"><div class="phpcode"><code><span class="html">Just in case someone finds it usefull.<br></br>If you want to capitalize the first letter of each word in the array you could:<br></br><span class="default">&lt;?php<br></br>$myarray</span><span class="keyword">= array(</span><span class="string">"one"</span><span class="keyword">,</span><span class="string">"two"</span><span class="keyword">,</span><span class="string">"three"</span><span class="keyword">,</span><span class="string">"four"</span><span class="keyword">,</span><span class="string">"etc.."</span><span class="keyword">);<br></br><br></br></span><span class="default">$map</span><span class="keyword">=</span><span class="default">array_map</span><span class="keyword">(</span><span class="string">'ucfirst'</span><span class="keyword">,</span><span class="default">$myarray</span><span class="keyword">);<br></br><br></br></span><span class="default">$j</span><span class="keyword">=</span><span class="default">join</span><span class="keyword">(</span><span class="string">' , '</span><span class="keyword">,</span><span class="default">$map</span><span class="keyword">);<br></br>echo</span><span class="default">$j</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>This will return:&nbsp; One , Two , Three , Four , Etc..<br></br>Probably it's not worth of posting it, but just thought beginners might find it usefull.</span></code></div></div></div><a name="93848"></a><div class="note"><strong class="user">Anonymous</strong><a href="#93848" class="date">02-Oct-2009 11:33</a><div class="text"><div class="phpcode"><code><span class="html">This is a modification of a function like this which works with two dimensional arrays. Pass a 2d array to this function and my function will return an array of the arrays with the specified key-value pair (specified by $key and $value).<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">seekKey</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$key</span><span class="keyword">,</span><span class="default">$value</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">= array();<br></br>&nbsp;&nbsp;&nbsp; for (</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">count</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">);</span><span class="default">$i</span><span class="keyword">++)<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$array</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">][</span><span class="default">$key</span><span class="keyword">]==</span><span class="default">$value</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">[] =</span><span class="default">$array</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">];<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$ret</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="93776"></a><div class="note"><strong class="user">Martin</strong><a href="#93776" class="date">28-Sep-2009 06:04</a><div class="text"><div class="phpcode"><code><span class="html">You can actually create arrays in arrays; just consider the following code:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">LoadData</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">)<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$lines</span><span class="keyword">=</span><span class="default">file</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">) or die(</span><span class="string">'Could not open file'</span><span class="keyword">);<br></br>foreach(</span><span class="default">$lines</span><span class="keyword">as</span><span class="default">$line</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$i</span><span class="keyword">[] = array(</span><span class="default">$line</span><span class="keyword">);<br></br></span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$i</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">])<br></br>']; ?><br></br></span><span class="default">LoadData</span><span class="keyword">(</span><span class="string">'file.csv'</span><span class="keyword">);<br></br><br></br></span><span class="default">?&gt;<br></br></span><br></br>A (.csv-)file is loaded into the function LoadData and stored in the array $lines. Then foreach puts the values from the $lines-array into $line and $i is defined as an array of the array $line. Please note that this type of code could take up much of CPU-usage; it generates a multi-dimensional array.<br></br><br></br>When $i is printed (in the example, value 1 of the array) it would display:<br></br><br></br>Array ( [0] =&gt; Array (<br></br>[0] =&gt; 7;75;X;0;0;1;0;3;Gr;Br;Do;0;0;0;0;0;0;0;0;<br></br>[1] =&gt; ;200;K;0;0;0;0;0;Gr;0;0;0;0;ZL;0;0;0;0;0;<br></br>[2] =&gt; ;260;Z;;;;;;Gr;;;;;VL;;;;;;<br></br>[3] =&gt; ;270;K;;;;1;;Gr;Br;Li;;;;;;;;;<br></br>[4] =&gt; ;500;V;;;;;;Br;;;;;;;;;;;<br></br>[5] =&gt; 6;60;X;;;;;;;;;;;;;;;;;<br></br>[6] =&gt; ;80;K;;;;;;Gr;;;;;ZL;;;;;;<br></br>[7] =&gt; ;210;Z;;;;;;Gr;;;;;;;;;;;<br></br>)</span></code></div></div></div><a name="92186"></a><div class="note"><strong class="user">Ant-1</strong><a href="#92186" class="date">13-Jul-2009 04:12</a><div class="text"><div class="phpcode"><code><span class="html">Note for PHP 5.3 changed behavior in 'erroneous' array creation:<br></br><br></br>Prior to PHP 5.3, this array definition (note the duplicate key):<br></br><span class="default">&lt;?php $a</span><span class="keyword">= array (</span><span class="string">'foo'</span><span class="keyword">=&gt;</span><span class="default">1</span><span class="keyword">,</span><span class="string">'bar'</span><span class="keyword">=&gt;</span><span class="default">2</span><span class="keyword">,</span><span class="string">'foo'</span><span class="keyword">=&gt;</span><span class="default">3</span><span class="keyword">);</span><span class="default">?&gt;<br></br></span><br></br>Would create the following array:<br></br>array(<br></br>&nbsp;&nbsp;&nbsp; 'foo' =&gt; 3,<br></br>&nbsp;&nbsp;&nbsp; 'bar' =&gt; 2<br></br>)<br></br>So the /second/ key in the duplicate would override the first declaration.<br></br><br></br>Now with PHP 5.3, the following array will be created:<br></br>array(<br></br>&nbsp;&nbsp;&nbsp; 'foo' =&gt; 1,<br></br>&nbsp;&nbsp;&nbsp; 'bar' =&gt; 2<br></br>)<br></br><br></br>So the second duplicate key would be ignored.<br></br><br></br>Note that the array declaration indeed contains an error, but if your legacy code contains such array declaration, you will be hurt because of the changed behavior.</span></code></div></div></div><a name="90690"></a><div class="note"><strong class="user">webmaster at oehoeboeroe dot nl</strong><a href="#90690" class="date">05-May-2009 02:47</a><div class="text"><div class="phpcode"><code><span class="html">A simple function to check if you can use your variable as an array offset validly and without getting it typecasted.<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$offset</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">array_pop</span><span class="keyword">(@</span><span class="default">array_flip</span><span class="keyword">(array(</span><span class="default">$offset</span><span class="keyword">=&gt;</span><span class="default"></span><span class="keyword">))) ===</span><span class="default">$offset</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">$a</span><span class="keyword">=</span><span class="default">8</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">));&nbsp;</span><span class="comment">// true<br></br><br></br></span><span class="default">$b</span><span class="keyword">=</span><span class="string">'8'</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$b</span><span class="keyword">));&nbsp;</span><span class="comment">// false<br></br><br></br></span><span class="default">$c</span><span class="keyword">=</span><span class="string">'08'</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$c</span><span class="keyword">));&nbsp;</span><span class="comment">// true<br></br><br></br></span><span class="default">$d</span><span class="keyword">=</span><span class="string">'foo'</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$d</span><span class="keyword">));&nbsp;</span><span class="comment">// true<br></br><br></br></span><span class="default">$e</span><span class="keyword">=</span><span class="default">3.8</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$e</span><span class="keyword">));&nbsp;</span><span class="comment">// false<br></br><br></br></span><span class="default">$f</span><span class="keyword">=</span><span class="default">false</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$f</span><span class="keyword">));&nbsp;</span><span class="comment">// false<br></br><br></br></span><span class="default">$g</span><span class="keyword">=</span><span class="default">null</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$g</span><span class="keyword">));&nbsp;</span><span class="comment">// false<br></br><br></br></span><span class="default">$h</span><span class="keyword">= array();<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$h</span><span class="keyword">));&nbsp;</span><span class="comment">// false<br></br><br></br></span><span class="default">$i</span><span class="keyword">= new</span><span class="default">StdClass</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">is_safe_offset</span><span class="keyword">(</span><span class="default">$i</span><span class="keyword">));&nbsp;</span><span class="comment">// false<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="89425"></a><div class="note"><strong class="user">genix at arctoz dot de</strong><a href="#89425" class="date">07-Mar-2009 12:41</a><div class="text"><div class="phpcode"><code><span class="html">Hello,<br></br><br></br>to check if an element was set is actually pretty simple:<br></br><br></br><span class="default">&lt;?php<br></br><br></br>$array</span><span class="keyword">= (</span><span class="string">'first'</span><span class="keyword">=&gt;</span><span class="default">1</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'sec'</span><span class="keyword">=&gt;</span><span class="default">2<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</span><span class="keyword">);<br></br><br></br></span><span class="default">$out</span><span class="keyword">= (isset(</span><span class="default">$array</span><span class="keyword">[</span><span class="string">'third'</span><span class="keyword">])) ?</span><span class="default">$array</span><span class="keyword">[</span><span class="string">'third'</span><span class="keyword">] :</span><span class="string">'third not set...'</span><span class="keyword">;<br></br><br></br>echo</span><span class="default">$out</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>greets,<br></br>genix</span></code></div></div></div><a name="87713"></a><div class="note"><strong class="user">Dawid Krysiak</strong><a href="#87713" class="date">17-Dec-2008 11:09</a><div class="text"><div class="phpcode"><code><span class="html">Trying to get array element that was not set, throws ERROR_NOTICE and returns NULL. Example:<br></br><span class="default">&lt;?php</span><span class="comment">/* php v.4.4.7 */<br></br></span><span class="default">$array</span><span class="keyword">= array(<br></br>&nbsp;&nbsp;&nbsp;</span><span class="string">'apple'</span><span class="keyword">=&gt;</span><span class="string">'green'</span><span class="keyword">,<br></br>&nbsp;&nbsp;&nbsp;</span><span class="string">'orange'</span><span class="keyword">=&gt;</span><span class="string">'orange'</span><span class="keyword">,<br></br>);<br></br></span><span class="default">$pear_color</span><span class="keyword">=</span><span class="default">$array</span><span class="keyword">[</span><span class="string">'pear'</span><span class="keyword">];&nbsp; &nbsp;</span><span class="comment">// Notice: Undefined index: pear in /path/to/file.php on line 123<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$pear_color</span><span class="keyword">);&nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// NULL<br></br></span><span class="default">?&gt;<br></br></span>Haven't found that mentioned on this page.</span></code></div></div></div><a name="86581"></a><div class="note"><strong class="user">hek at theeks dot net</strong><a href="#86581" class="date">24-Oct-2008 03:58</a><div class="text"><div class="phpcode"><code><span class="html">Note that NULL is not exactly a scalar value, so the following two lines of code do NOT produce identical arrays.<br></br><br></br><span class="default">&lt;?php<br></br>$x</span><span class="keyword">= (array)</span><span class="default">null</span><span class="keyword">;</span><span class="comment">// $x ends up an empty array (zero elements)<br></br></span><span class="default">$y</span><span class="keyword">= array(</span><span class="default">null</span><span class="keyword">);</span><span class="comment">// $y ends up an array containing one element (a null)<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="85713"></a><div class="note"><strong class="user">pinkgothic at gmail dot com</strong><a href="#85713" class="date">13-Sep-2008 03:49</a><div class="text"><div class="phpcode"><code><span class="html">Re: fmouse,<br></br><br></br>the phenomenom you're describing pertains to superglobals, not arrays, and it only applies in a very specific scope. Check out<a href="http://de.php.net/manual/en/language.variables.variable.php" rel="nofollow" target="_blank">http://de.php.net/manual/en/language.variables.variable.php</a>:<br></br><br></br>"Please note that variable variables cannot be used with PHP's Superglobal arrays within functions or class methods. The variable $this is also a special variable that cannot be referenced dynamically."</span></code></div></div></div><a name="83623"></a><div class="note"><strong class="user">frywater</strong><a href="#83623" class="date">04-Jun-2008 11:43</a><div class="text"><div class="phpcode"><code><span class="html">&gt;fmouse<br></br><br></br>Variable variables can be used with arrays as discussed in the variable variable section.<br></br>Also, from your code, $somevar can be an array and still work fine.<br></br><br></br>$fum = "somevar";<br></br>$$fum = array(); // $somevar is now an array<br></br>$foo = $$fum;<br></br>print_r( $foo); // we get an empty array printed<br></br><br></br>print_r() doesn't just print arrays, it prints any variable type.<br></br>If you pass it a variable, that hasn't been defined yet, it won't know how to print it.<br></br><br></br>You would get this same results by passing any undefined variable such as:<br></br>print_r( $bar );&nbsp; // PHP Notice: undefined variable ...$bar</span></code></div></div></div><a name="82864"></a><div class="note"><strong class="user">fmouse at fmp dot com</strong><a href="#82864" class="date">29-Apr-2008 08:14</a><div class="text"><div class="phpcode"><code><span class="html">Using variables as array names no longer works in PHP5.<br></br><br></br>$fum = "somevar";<br></br>$foo = $$fum;<br></br><br></br># Still works if $somevar isn't an array.&nbsp; $foo contains the value of $somevar<br></br><br></br>but ....<br></br><br></br>$fum = "_POST";<br></br>print_r($$fum);<br></br>print_r($<?php echo $vars['fum']; ?>);<br></br><br></br>Neither form of indirection works in this context.&nbsp; $$fum comes back empty.<br></br><br></br>If you have PHP4 code that used this kind of indirection you can work around the change in PHP5 using an eval().<br></br><br></br>$fum = "_POST";<br></br>$foo = eval("return $$fum;");<br></br>print_r($foo);<br></br><br></br>This works!</span></code></div></div></div><a name="81902"></a><div class="note"><strong class="user">rama dot devi at gmail dot com</strong><a href="#81902" class="date">18-Mar-2008 09:52</a><div class="text"><div class="phpcode"><code><span class="html">Sorting double dimensional arrays by a specified key bothe for Strings and for integers:<br></br>Ex:<br></br>&nbsp;<br></br>&nbsp;$personDetails =&nbsp; array( array("firstName" =&gt; "Nancy", "lastName" =&gt; "Grace", "age" =&gt; 22), array("firstName" =&gt; "Andy",&nbsp; "lastName" =&gt; "Peter", "age" =&gt; 28),&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; array("firstName" =&gt; "Jim",&nbsp;&nbsp; "lastName" =&gt; "Gary",&nbsp; "age" =&gt; 25), array("firstName" =&gt; "Lary",&nbsp; "lastName" =&gt; "James", "age" =&gt; 28),&nbsp; array("firstName" =&gt; "Peter", "lastName" =&gt; "David", "age" =&gt; 17), array("firstName" =&gt; "Raj",&nbsp;&nbsp; "lastName" =&gt; "King",&nbsp; "age" =&gt; 9),&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; array("firstName" =&gt; "John",&nbsp; "lastName" =&gt; "Baxter","age" =&gt; 35) );<br></br>//To sort the array by firstName:-<br></br>&nbsp;&nbsp; &nbsp; function sortFirstName($p1, $p2) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return strnatcmp($p1['firstName'], $p2['firstName']);<br></br>&nbsp;&nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp;&nbsp; usort($personDetails, 'sortFirstName');<br></br><br></br>//To sort by an integer Field<br></br><br></br>&nbsp;&nbsp; function sortByInteger(&amp;$personDetails, $field) {<br></br>&nbsp;&nbsp; &nbsp;&nbsp; $sort = "return strnatcmp(\$p1['$field'], \$p2['$field']);";<br></br>&nbsp;&nbsp; &nbsp; &nbsp; usort($personDetails, create_function('$p1,$p2', $sort));<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return $personDetails;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br><br></br>&nbsp;&nbsp;&nbsp; $personDetails = sortByInteger($personDetails, 'age');<br></br>//To sort the array in Descending order by a key, It can be done by adding "-" sign before strnatcmp() function.<br></br><br></br>I hope this helps</span></code></div></div></div><a name="80311"></a><div class="note"><strong class="user">ken underscore yap atsign email dot com</strong><a href="#80311" class="date">09-Jan-2008 04:00</a><div class="text"><div class="phpcode"><code><span class="html">"If you convert a NULL value to an array, you get an empty array."<br></br><br></br>This turns out to be a useful property. Say you have a search function that returns an array of values on success or NULL if nothing found.<br></br><br></br>$values = search(...);<br></br><br></br>Now you want to merge the array with another array. What do we do if $values is NULL? No problem:<br></br><br></br>$combined = array_merge((array)$values, $other);<br></br><br></br>Voila.</span></code></div></div></div><a name="79904"></a><div class="note"><strong class="user">pepesantillan at gmail dot com</strong><a href="#79904" class="date">19-Dec-2007 12:25</a><div class="text"><div class="phpcode"><code><span class="html">z on 22-Apr-2005 12:10 wrote:<br></br>-----------------------------------------------<br></br>Here's a simple function to insert a value into some position in an array<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">array_insert</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$pos</span><span class="keyword">,</span><span class="default">$val</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array2</span><span class="keyword">=</span><span class="default">array_splice</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$pos</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">[] =</span><span class="default">$val</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">=</span><span class="default">array_merge</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$array2</span><span class="keyword">);<br></br>&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$array</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>and now for example...<br></br><span class="default">&lt;?php<br></br>$a</span><span class="keyword">= array(</span><span class="string">"John"</span><span class="keyword">,</span><span class="string">"Paul"</span><span class="keyword">,</span><span class="string">"Peter"</span><span class="keyword">);<br></br></span><span class="default">$a</span><span class="keyword">=</span><span class="default">array_insert</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">,</span><span class="string">"Mike"</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>Now $a will be "John","Mike","Paul","Peter"<br></br>-----------------------------------------------<br></br><br></br>Im learning to use PHP and reading about array_splice found that<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">array_insert</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$pos</span><span class="keyword">,</span><span class="default">$val</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array2</span><span class="keyword">=</span><span class="default">array_splice</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$pos</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">[] =</span><span class="default">$val</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">=</span><span class="default">array_merge</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$array2</span><span class="keyword">);<br></br><br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$array</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">$a</span><span class="keyword">= array(</span><span class="string">"John"</span><span class="keyword">,</span><span class="string">"Paul"</span><span class="keyword">,</span><span class="string">"Peter"</span><span class="keyword">);<br></br></span><span class="default">$a</span><span class="keyword">=</span><span class="default">array_insert</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">,</span><span class="string">"Mike"</span><span class="keyword">);<br></br></span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>would output the same as<br></br><br></br><span class="default">&lt;?php<br></br>$b</span><span class="keyword">= array(</span><span class="string">"John"</span><span class="keyword">,</span><span class="string">"Paul"</span><span class="keyword">,</span><span class="string">"Peter"</span><span class="keyword">);<br></br></span><span class="default">array_splice</span><span class="keyword">(</span><span class="default">$b</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">,</span><span class="default"></span><span class="keyword">,array(</span><span class="string">"Mike"</span><span class="keyword">));<br></br></span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$b</span><span class="keyword">);<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="78396"></a><div class="note"><strong class="user">SID TRIVEDI</strong><a href="#78396" class="date">10-Oct-2007 09:14</a><div class="text"><div class="phpcode"><code><span class="html"><span class="default">&lt;?php<br></br><br></br></span><span class="comment">//Simple Login Script using associative array.<br></br><br></br>//You may modify the codes and use $_POST['FORM_FIELD_DATA'] for your web-page.<br></br>//You may spice-up the codes with more form field validation &amp; security features.<br></br><br></br>//$user_name=$_POST['user_name'];<br></br>//$password=$_POST['password'];<br></br><br></br></span><span class="default">$test_user_name</span><span class="keyword">=</span><span class="string">'michelle_smith'</span><span class="keyword">;</span><span class="comment">//for testing purpose only<br></br></span><span class="default">$test_password</span><span class="keyword">=</span><span class="string">'msmith321'</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">//for testing purpose only<br></br></span><span class="default">$user_name</span><span class="keyword">=</span><span class="default">$test_user_name</span><span class="keyword">;<br></br></span><span class="default">$password</span><span class="keyword">=</span><span class="default">$test_password</span><span class="keyword">;<br></br><br></br></span><span class="comment">// here user_name is key and password is the value of an array..<br></br>// website owner has to add new user/site member manually in $login_array<br></br><br></br></span><span class="default">$login_array</span><span class="keyword">= array(<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'user_name'</span><span class="keyword">=&gt;</span><span class="string">'password'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'alex_duff'</span><span class="keyword">=&gt;</span><span class="string">'alx321'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'xena78'</span><span class="keyword">=&gt;</span><span class="string">'xena321'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'dela_pena'</span><span class="keyword">=&gt;</span><span class="string">'delp321'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'shawn_1981'</span><span class="keyword">=&gt;</span><span class="string">'shw81'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'michelle_smith'</span><span class="keyword">=&gt;</span><span class="string">'msmith321'</span><span class="keyword">);<br></br><br></br></span><span class="default">ksort</span><span class="keyword">(</span><span class="default">$login_array</span><span class="keyword">);<br></br></span><span class="default">reset</span><span class="keyword">(</span><span class="default">$login_array</span><span class="keyword">);<br></br>if (isset(</span><span class="default">$login_array</span><span class="keyword">[</span><span class="default">$user_name</span><span class="keyword">]))<br></br>{<br></br></span><span class="default">$pass_check</span><span class="keyword">=</span><span class="default">$login_array</span><span class="keyword">[</span><span class="default">$user_name</span><span class="keyword">];<br></br>if (</span><span class="default">$password</span><span class="keyword">===</span><span class="default">$pass_check</span><span class="keyword">)<br></br>{<br></br>echo&nbsp;</span><span class="string">"Welcome,</span><span class="default">$user_name</span><span class="string">!\n&lt;br&gt;"</span><span class="keyword">;</span><span class="comment">//may redirect to specific webpage.<br></br></span><span class="keyword">']; ?><br></br>else<br></br>{<br></br>echo</span><span class="string">"Please try again!"</span><span class="keyword">;</span><span class="comment">//may redirect to Error page.<br></br></span><span class="keyword">']; ?><br></br>']; ?><br></br>else<br></br>{<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="string">"Please register with us. Thanks!"</span><span class="keyword">;</span><span class="comment">//may redirect to registration page.<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">exit();<br></br>&nbsp;&nbsp;&nbsp;<br></br>']; ?><br></br>echo(</span><span class="string">"\n&lt;br&gt;"</span><span class="keyword">);<br></br>echo</span><span class="string">'Thanks to Thies C. Arntzen, Stig Bakken, Shane Caraveo, Andi Gutmans, Rasmus Lerdorf, Sam Ruby, Sascha Schumann, Zeev Suraski, Jim Winstead, Andrei Zmievski for wonderful PHP!'</span><span class="keyword">;<br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="77642"></a><div class="note"><strong class="user">carl at linkleaf dot com</strong><a href="#77642" class="date">06-Sep-2007 06:36</a><div class="text"><div class="phpcode"><code><span class="html">Its worth noting that there does not appear to be any functional limitations on the length or content of string indexes. The string indexes for your arrays can contain any characters, including new line characters, and can be of any length:<br></br><br></br><span class="default">&lt;?php<br></br><br></br>$key</span><span class="keyword">=</span><span class="string">"XXXXX"</span><span class="keyword">;<br></br></span><span class="default">$test</span><span class="keyword">= array(</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="string">"test5"</span><span class="keyword">);<br></br><br></br>for (</span><span class="default">$x</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$x</span><span class="keyword">&lt;</span><span class="default">500</span><span class="keyword">;</span><span class="default">$x</span><span class="keyword">++) {<br></br>&nbsp;</span><span class="default">$key</span><span class="keyword">.=</span><span class="string">"X"</span><span class="keyword">;<br></br>&nbsp;</span><span class="default">$value</span><span class="keyword">=</span><span class="string">"test"</span><span class="keyword">.</span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$key</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$test</span><span class="keyword">[</span><span class="default">$key</span><span class="keyword">] =</span><span class="default">$value</span><span class="keyword">;<br></br>']; ?><br></br><br></br>echo</span><span class="string">"&lt;pre&gt;"</span><span class="keyword">;<br></br></span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$test</span><span class="keyword">);<br></br>echo</span><span class="string">"&lt;/pre&gt;"</span><span class="keyword">;<br></br><br></br></span><span class="default">?&gt;<br></br></span><br></br>Keep in mind that using extremely long array indexes is not a good practice and could cost you lots of extra CPU time. However, if you have to use a long string as an array index you won't have to worry about the length or content.</span></code></div></div></div><a name="77473"></a><div class="note"><strong class="user">Gautam</strong><a href="#77473" class="date">30-Aug-2007 08:56</a><div class="text"><div class="phpcode"><code><span class="html"><span class="default">&lt;?php<br></br></span><span class="comment">//EXAMPLE&nbsp; of Multi-Dimentional Array where as an array's keys are an array itself.<br></br>//It's so easy to create one like this.<br></br><br></br></span><span class="default">$movie_to_watch</span><span class="keyword">= array (</span><span class="string">'Action'</span><span class="keyword">=&gt;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; array(</span><span class="string">'Kanu Reeves'</span><span class="keyword">=&gt;</span><span class="string">'Matrix Reloaded'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'Pearce Brosnan'</span><span class="keyword">=&gt;</span><span class="string">'Die Another Day'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'Tom Cruz'</span><span class="keyword">=&gt;</span><span class="string">'Mission Impossible'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'Jason Statham'</span><span class="keyword">=&gt;</span><span class="string">'Crank'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'Danzel Washington'</span><span class="keyword">=&gt;</span><span class="string">'Man on Fire'</span><span class="keyword">),<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'Comedy'</span><span class="keyword">=&gt;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; array (</span><span class="string">'Charlie Chaplin'</span><span class="keyword">=&gt;</span><span class="string">'City Lights'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="string">'Jim Carrey'&nbsp; &nbsp;</span><span class="keyword">=&gt;</span><span class="string">'Cable Guy'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="string">'Rowan Atkinson'</span><span class="keyword">=&gt;</span><span class="string">'The Ultimate Disaster'</span><span class="keyword">));<br></br></span><span class="default">$type_wanted</span><span class="keyword">=</span><span class="string">'Action'</span><span class="keyword">;</span><span class="comment">//You may switch type from Action to Comedy.<br></br></span><span class="default">$hero_wanted</span><span class="keyword">=</span><span class="string">'Pearce Brosnan'</span><span class="keyword">;</span><span class="comment">// You may switch hero from Pearce Brosnan to Jim Carrey.<br></br><br></br></span><span class="keyword">print (</span><span class="string">"</span><span class="default">$hero_wanted</span><span class="string">'s&nbsp;</span><span class="default">$type_wanted</span><span class="string">movie is "</span><span class="keyword">.</span><span class="default">$movie_to_watch</span><span class="keyword">[</span><span class="default">$type_wanted</span><span class="keyword">][</span><span class="default">$hero_wanted</span><span class="keyword">].</span><span class="string">"."</span><span class="keyword">);<br></br></span><span class="comment">// produces browser output as under:<br></br>// Pearce Brosnan 's Action movie is Die Another Day.<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="77236"></a><div class="note"><strong class="user">Olegk, getmequick[at]gmail[dot]com</strong><a href="#77236" class="date">21-Aug-2007 09:59</a><div class="text"><div class="phpcode"><code><span class="html">Hey..<br></br><br></br>here is a function which helps to avoid using empty/isset<br></br>checkings for arrays.<br></br><br></br>(it's acts simillar to 'default' modifier in Smarty)<br></br><br></br>Using this function you will avoid 'Undefined index' or<br></br>'Undefined offset' error.<br></br><br></br><span class="default">&lt;?php<br></br><br></br>$_POST</span><span class="keyword">[</span><span class="string">'id'</span><span class="keyword">][</span><span class="string">'other'</span><span class="keyword">] =</span><span class="string">'val1'</span><span class="keyword">;<br></br><br></br></span><span class="comment">/*<br></br>key exist (same as $_POST['id'][other])<br></br>*/<br></br></span><span class="keyword">echo</span><span class="default">getRequestParam</span><span class="keyword">(</span><span class="string">'id[other]'</span><span class="keyword">,</span><span class="string">'default value'</span><span class="keyword">);<br></br><br></br></span><span class="comment">/*<br></br>key doesn't exist, we get default value (same as $_POST['var'])<br></br>*/<br></br><br></br></span><span class="keyword">echo</span><span class="default">getRequestParam</span><span class="keyword">(</span><span class="string">'var'</span><span class="keyword">,</span><span class="string">'default value'</span><span class="keyword">);<br></br><br></br>function</span><span class="default">getRequestParam</span><span class="keyword">(</span><span class="default">$var</span><span class="keyword">,</span><span class="default">$default</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">,</span><span class="default">$method</span><span class="keyword">=</span><span class="string">'post'</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">preg_match_all</span><span class="keyword">(</span><span class="string">'!(\w+)!i'</span><span class="keyword">,</span><span class="default">$var</span><span class="keyword">,</span><span class="default">$match</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">array_shift</span><span class="keyword">(</span><span class="default">$match</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$_vars</span><span class="keyword">=</span><span class="default">$match</span><span class="keyword">[</span><span class="default"></span><span class="keyword">];<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=</span><span class="default">null</span><span class="keyword">;&nbsp; &nbsp;<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; if(&nbsp; &nbsp;&nbsp;</span><span class="default">strtoupper</span><span class="keyword">(</span><span class="default">$method</span><span class="keyword">)&nbsp;&nbsp; ==&nbsp;</span><span class="string">'POST'</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=</span><span class="default">_findRequestParam</span><span class="keyword">(</span><span class="default">$_vars</span><span class="keyword">,</span><span class="default">$_POST</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; elseif(</span><span class="default">strtoupper</span><span class="keyword">(</span><span class="default">$method</span><span class="keyword">) ==</span><span class="string">'GET'</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=</span><span class="default">_findRequestParam</span><span class="keyword">(</span><span class="default">$_vars</span><span class="keyword">,</span><span class="default">$_GET</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; elseif(</span><span class="default">strtoupper</span><span class="keyword">(</span><span class="default">$method</span><span class="keyword">) ==</span><span class="string">'COOKIE'</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=</span><span class="default">_findRequestParam</span><span class="keyword">(</span><span class="default">$_vars</span><span class="keyword">,</span><span class="default">$_COOKIE</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; elseif(</span><span class="default">strtoupper</span><span class="keyword">(</span><span class="default">$method</span><span class="keyword">) ==</span><span class="string">'SESSION'</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=</span><span class="default">_findRequestParam</span><span class="keyword">(</span><span class="default">$_vars</span><span class="keyword">,</span><span class="default">$_SESSION</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?>&nbsp; &nbsp;<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; if (!</span><span class="default">$ret</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$default</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; else<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$ret</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp;<br></br>&nbsp;&nbsp;&nbsp;<br></br>']; ?><br></br><br></br></span><span class="comment">/**<br></br>@access private<br></br>*/<br></br><br></br></span><span class="keyword">function</span><span class="default">_findRequestParam</span><span class="keyword">(</span><span class="default">$vars</span><span class="keyword">,</span><span class="default">$find_in</span><span class="keyword">,</span><span class="default">$curr_key</span><span class="keyword">=</span><span class="default"></span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp; static</span><span class="default">$ret</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; if(</span><span class="default">array_key_exists</span><span class="keyword">(</span><span class="default">$vars</span><span class="keyword">[</span><span class="default">$curr_key</span><span class="keyword">],</span><span class="default">$find_in</span><span class="keyword">) ) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">count</span><span class="keyword">(</span><span class="default">$vars</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">==</span><span class="default">$curr_key</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=&nbsp;</span><span class="default">$find_in</span><span class="keyword">[</span><span class="default">$vars</span><span class="keyword">[</span><span class="default">$curr_key</span><span class="keyword">]];<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; elseif(</span><span class="default">$curr_key</span><span class="keyword">&lt;</span><span class="default">count</span><span class="keyword">(</span><span class="default">$vars</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">_findRequestParam</span><span class="keyword">(</span><span class="default">$vars</span><span class="keyword">,</span><span class="default">$find_in</span><span class="keyword">[</span><span class="default">$vars</span><span class="keyword">[</span><span class="default">$curr_key</span><span class="keyword">]],</span><span class="default">$curr_key</span><span class="keyword">+</span><span class="default">1&nbsp;</span><span class="keyword">);&nbsp; &nbsp; &nbsp; &nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?>&nbsp; &nbsp;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br><br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$ret</span><span class="keyword">;<br></br><br></br>']; ?><br></br><br></br></span><span class="default">?&gt;<br></br></span><br></br>Hope this will help someone!</span></code></div></div></div><a name="76423"></a><div class="note"><strong class="user">conorj</strong><a href="#76423" class="date">14-Jul-2007 03:34</a><div class="text"><div class="phpcode"><code><span class="html">Another note on unquoted array indices. Because it is first interpreted as a constant, it must obey the naming convention of constants. i.e. a letter or underscore followed by optional letter, digit and/or underscore characters.<br></br><br></br>Therefore while the following array declaration is legal:<br></br>$a = array('1st'=&gt;'First','2nd'=&gt;'Second');<br></br><br></br>Trying to access either array item as follows causes an error:<br></br><br></br>$first = "$a[1st]";<br></br>$second = "$a[2nd]";</span></code></div></div></div><a name="76332"></a><div class="note"><strong class="user">moehbass at gmail dot com</strong><a href="#76332" class="date">11-Jul-2007 12:41</a><div class="text"><div class="phpcode"><code><span class="html">&lt;b&gt;Mark Gukov&lt;/b&gt; wrote below:<br></br><br></br>Regarding the fact that there's no need to quote arrays keys when enclosed in double quotes: it only applies to single dimensional arrays.<br></br><br></br>The following works fine:<br></br><br></br><span class="default">&lt;?php<br></br>$r</span><span class="keyword">[</span><span class="string">'a'</span><span class="keyword">] =</span><span class="string">'apple'</span><span class="keyword">;<br></br>echo</span><span class="string">"</span><span class="default">$r</span><span class="keyword">[</span><span class="default">a</span><span class="keyword">]</span><span class="string">is tasty."</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>...but in the case of multi-dimensional arrays:<br></br><br></br><span class="default">&lt;?php<br></br>$r</span><span class="keyword">[</span><span class="string">'a'</span><span class="keyword">][</span><span class="string">'b'</span><span class="keyword">] =</span><span class="string">'banana'</span><span class="keyword">;<br></br>echo</span><span class="string">"</span><span class="default">$r</span><span class="keyword">[</span><span class="default">a</span><span class="keyword">]</span><span class="string">[b] is tasty."</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>would result in "Array[c] is tasty."<br></br>-----------------------------------------------------------------<br></br><br></br>However, the following runs fine;<br></br>$r['a']['b'] = 'banana';<br></br>echo "<?php echo $vars['r[a][b]']; ?> is tasty.";<br></br><br></br>Just box it!</span></code></div></div></div><a name="75326"></a><div class="note"><strong class="user">don dot hosek at gmail dot com</strong><a href="#75326" class="date">24-May-2007 12:37</a><div class="text"><div class="phpcode"><code><span class="html">It's slightly faster to use array_splice to remove an element of an array:<br></br>array_splice($array, $index, 1)<br></br>than to do it using the suggested method of unset and reindex:<br></br>unset($array[$index]);<br></br>$array = array_values($array);<br></br><br></br>The difference, however, is very small. With 950 iterations I had times of<br></br>unset and reindex: 0.22837495803833<br></br>splice: 0.22392416000366</span></code></div></div></div><a name="73993"></a><div class="note"><strong class="user">lesantoso at yahoo dot com</strong><a href="#73993" class="date">20-Mar-2007 10:14</a><div class="text"><div class="phpcode"><code><span class="html">This Indonesian number speller function is twice<br></br>faster(*) than the one provided in class Terbilang by<br></br>anghuda(at)gmail(dot)com (25-May-2006 08:52):<br></br><br></br><a href="http://www.lesantoso.com/terbilang.html" rel="nofollow" target="_blank">http://www.lesantoso.com/terbilang.html</a><br></br><br></br>(*) 2.1 vs. 4.2 seconds in processing 10000 random numbers</span></code></div></div></div><a name="73936"></a><div class="note"><strong class="user">Spudley</strong><a href="#73936" class="date">16-Mar-2007 09:44</a><div class="text"><div class="phpcode"><code><span class="html">On array recursion...<br></br><br></br>Given the following code:<br></br><br></br><span class="default">&lt;?<br></br>$myarray</span><span class="keyword">= array(</span><span class="string">'test'</span><span class="keyword">,</span><span class="default">123</span><span class="keyword">);<br></br></span><span class="default">$myarray</span><span class="keyword">[] = &amp;</span><span class="default">$myarray</span><span class="keyword">;<br></br></span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$myarray</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>The print_r() will display *RECURSION* when it gets to the third element of the array.<br></br><br></br>There doesn't appear to be any other way to scan an array for recursive references, so if you need to check for them, you'll have to use print_r() with its second parameter to capture the output and look for the word *RECURSION*.<br></br><br></br>It's not an elegant solution, but it's the only one I've found, so I hope it helps someone.</span></code></div></div></div><a name="72385"></a><div class="note"><strong class="user">kal at kalunite dot com i mean dot net</strong><a href="#72385" class="date">17-Jan-2007 01:55</a><div class="text"><div class="phpcode"><code><span class="html">About the automatic conversion of bare strings...<br></br>My opinion is that it never should have been implemented. Isn't it easier to NOT implement this "handy" feature in the first place? It is such a convenient way for "smart" programmers to write unsafe, not-futureproof code. Please remove this feature from future versions of PHP, please. (Hey, if you could change the OOP mechanisms between PHP 4 and PHP 5, why can't you make this change, right?)</span></code></div></div></div><a name="70730"></a><div class="note"><a href="#70730" class="date">25-Oct-2006 04:18</a><div class="text"><div class="phpcode"><code><span class="html">This page should include details about how associative arrays are implemened inside PHP; e.g. using hash-maps or b-trees.<br></br><br></br>This has important implictions on the permance characteristics of associative arrays and how they should be used; e.g. b-tree are slow to insert but handle collisions better than hashmaps.&nbsp; Hashmaps are faster if there are no collisions, but are slower to retrieve when there are collisions.&nbsp; These factors have implictions on how associative arrays should be used.</span></code></div></div></div><a name="69958"></a><div class="note"><strong class="user">Mark Gukov</strong><a href="#69958" class="date">27-Sep-2006 09:18</a><div class="text"><div class="phpcode"><code><span class="html">Regarding the fact that there's no need to quote arrays keys when enclosed in double quotes: it only applies to single dimensional arrays.<br></br><br></br>The following works fine:<br></br><br></br><span class="default">&lt;?php<br></br>$r</span><span class="keyword">[</span><span class="string">'a'</span><span class="keyword">] =</span><span class="string">'apple'</span><span class="keyword">;<br></br>echo</span><span class="string">"</span><span class="default">$r</span><span class="keyword">[</span><span class="default">a</span><span class="keyword">]</span><span class="string">is tasty."</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>...but in the case of multi-dimensional arrays:<br></br><br></br><span class="default">&lt;?php<br></br>$r</span><span class="keyword">[</span><span class="string">'a'</span><span class="keyword">][</span><span class="string">'b'</span><span class="keyword">] =</span><span class="string">'banana'</span><span class="keyword">;<br></br>echo</span><span class="string">"</span><span class="default">$r</span><span class="keyword">[</span><span class="default">a</span><span class="keyword">]</span><span class="string">[b] is tasty."</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>would result in "Array[c] is tasty."</span></code></div></div></div><a name="69797"></a><div class="note"><strong class="user">petruzanautico at yahoo dot com dot ar</strong><a href="#69797" class="date">21-Sep-2006 03:30</a><div class="text"><div class="phpcode"><code><span class="html">Regarding the message of phoenixbytes:<br></br><br></br>The line foreach($bad as $baddies); will just yield in $baddies the last value of the array $bad.<br></br>I think that wasn't your intention, in that case there are faster and better ways than foreach.<br></br><br></br>I think what you wanted to do is:<br></br><span class="default">&lt;?php<br></br></span><span class="keyword">foreach(</span><span class="default">$bad</span><span class="keyword">as</span><span class="default">$baddies</span><span class="keyword">)</span><span class="comment">// make a collection<br></br></span><span class="keyword">{<br></br>&nbsp;&nbsp;&nbsp; if (</span><span class="default">preg_match</span><span class="keyword">(</span><span class="string">"/</span><span class="default">$baddies</span><span class="string">/i"</span><span class="keyword">,</span><span class="default">$mailto</span><span class="keyword">))</span><span class="comment">// find a match<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$addrmail</span><span class="keyword">=</span><span class="string">"false"</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; else<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$addrmail</span><span class="keyword">=</span><span class="string">"true"</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?></span><span class="comment">// foreach end<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="68409"></a><div class="note"><strong class="user">php dot net at todandlorna dot com</strong><a href="#68409" class="date">25-Jul-2006 11:28</a><div class="text"><div class="phpcode"><code><span class="html">in response to ch dot martin at gmail dot com<br></br><br></br>If you are using the following code:<br></br><br></br><span class="default">&lt;?php<br></br>$r</span><span class="keyword">= array(</span><span class="string">'05'</span><span class="keyword">=&gt;</span><span class="string">"abc"</span><span class="keyword">,</span><span class="string">'35'</span><span class="keyword">=&gt;</span><span class="string">"def"</span><span class="keyword">);<br></br>foreach (</span><span class="default">$r</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">)<br></br>&nbsp;&nbsp;</span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$key</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>and you need the array key '35' to be a string (for looping maybe), you can make sure the key is a string by appending a 0 on the front.<br></br><br></br>'035' instead of '35'</span></code></div></div></div><a name="67686"></a><div class="note"><strong class="user">ch dot martin at gmail dot com</strong><a href="#67686" class="date">09-Jun-2006 06:40</a><div class="text"><div class="phpcode"><code><span class="html">Extremely irritating quirk regarding the variable types of array keys:<br></br><br></br><span class="default">&lt;?php<br></br>$r</span><span class="keyword">= array(</span><span class="string">'05'</span><span class="keyword">=&gt;</span><span class="string">"abc"</span><span class="keyword">,</span><span class="string">'35'</span><span class="keyword">=&gt;</span><span class="string">"def"</span><span class="keyword">);<br></br>foreach (</span><span class="default">$r</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">)<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$key</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>The first var_dump for '05' is:<br></br>&nbsp;&nbsp;&nbsp; string(2) "05"<br></br>as expected.&nbsp; But the second, '35', turns out as:<br></br>&nbsp;&nbsp;&nbsp; int(35)<br></br><br></br>Php apparently decided to make the 35 became an int, but not the 05 (presumably because it leads with a zero).&nbsp; As far as I can see, there is absolutely no way of making string(2) "35" an array key.</span></code></div></div></div><a name="66645"></a><div class="note"><strong class="user">anghuda(at)gmail(dot)com</strong><a href="#66645" class="date">25-May-2006 01:52</a><div class="text"><div class="phpcode"><code><span class="html">this is simpler tha function display_angka_bilangan by ktaufik(at)gmail(dot)com (16-Feb-2005 12:40)<br></br><br></br><span class="default">&lt;?<br></br><br></br></span><span class="comment">/*<br></br>*<br></br>* Class : Terbilang<br></br>* Spell quantity numbers in Indonesian or Malay Language<br></br>*<br></br>*<br></br>* author: huda m elmatsani<br></br>* 21 September 2004<br></br>* freeware<br></br>*<br></br>* example:<br></br>* $bilangan = new Terbilang;<br></br>* echo $bilangan -&gt; eja(137);<br></br>* result: seratus tiga puluh tujuh<br></br>*<br></br>*<br></br>*/<br></br><br></br></span><span class="keyword">Class</span><span class="default">Terbilang</span><span class="keyword">{<br></br><br></br>&nbsp;&nbsp;&nbsp; function</span><span class="default">terbilang</span><span class="keyword">() {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">dasar</span><span class="keyword">= array(</span><span class="default">1</span><span class="keyword">=&gt;</span><span class="string">'satu'</span><span class="keyword">,</span><span class="string">'dua'</span><span class="keyword">,</span><span class="string">'tiga'</span><span class="keyword">,</span><span class="string">'empat'</span><span class="keyword">,</span><span class="string">'lima'</span><span class="keyword">,</span><span class="string">'enam'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'tujuh'</span><span class="keyword">,</span><span class="string">'delapan'</span><span class="keyword">,</span><span class="string">'sembilan'</span><span class="keyword">);<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">angka</span><span class="keyword">= array(</span><span class="default">1000000000</span><span class="keyword">,</span><span class="default">1000000</span><span class="keyword">,</span><span class="default">1000</span><span class="keyword">,</span><span class="default">100</span><span class="keyword">,</span><span class="default">10</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">satuan</span><span class="keyword">= array(</span><span class="string">'milyar'</span><span class="keyword">,</span><span class="string">'juta'</span><span class="keyword">,</span><span class="string">'ribu'</span><span class="keyword">,</span><span class="string">'ratus'</span><span class="keyword">,</span><span class="string">'puluh'</span><span class="keyword">,</span><span class="string">''</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br><br></br>&nbsp;&nbsp;&nbsp; function</span><span class="default">eja</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">) {<br></br><br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; while(</span><span class="default">$n</span><span class="keyword">!=</span><span class="default"></span><span class="keyword">){<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$count</span><span class="keyword">= (int)(</span><span class="default">$n</span><span class="keyword">/</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">angka</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">]);<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">$count</span><span class="keyword">&gt;=</span><span class="default">10</span><span class="keyword">)</span><span class="default">$str</span><span class="keyword">.=</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">eja</span><span class="keyword">(</span><span class="default">$count</span><span class="keyword">).</span><span class="string">" "</span><span class="keyword">.</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">satuan</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">].</span><span class="string">" "</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else if(</span><span class="default">$count</span><span class="keyword">&gt;</span><span class="default"></span><span class="keyword">&amp;&amp;</span><span class="default">$count</span><span class="keyword">&lt;</span><span class="default">10</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$str</span><span class="keyword">.=</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">dasar</span><span class="keyword">[</span><span class="default">$count</span><span class="keyword">] .</span><span class="string">" "</span><span class="keyword">.</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">satuan</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">].</span><span class="string">" "</span><span class="keyword">;<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$n</span><span class="keyword">-=</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">angka</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">] *</span><span class="default">$count</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$i</span><span class="keyword">++;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$str</span><span class="keyword">=</span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">"/satu puluh (\w+)/i"</span><span class="keyword">,</span><span class="string">"\\1 belas"</span><span class="keyword">,</span><span class="default">$str</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$str</span><span class="keyword">=</span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">"/satu (ribu|ratus|puluh|belas)/i"</span><span class="keyword">,</span><span class="string">"se\\1"</span><span class="keyword">,</span><span class="default">$str</span><span class="keyword">);<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$str</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?><br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="65885"></a><div class="note"><strong class="user">benjcarson at digitaljunkies dot ca</strong><a href="#65885" class="date">09-May-2006 08:46</a><div class="text"><div class="phpcode"><code><span class="html">phoenixbytes: The regex you have posted for matching email addresses is incorrect.&nbsp; Among other things, it does not allow '+' before the '@' (which is perfectly valid and can be quite useful to separate extensions of a single address).&nbsp; RFC 822 [1] defines the grammar for valid email addresses, and (the extemely long) regex implementing can be found at [2].&nbsp; Even the "Add Note" page here at php.net says:<br></br><br></br>[quote]<br></br>And if you're posting an example of validating email addresses, please don't bother. Your example is almost certainly wrong for some small subset of cases. See this information from O'Reilly Mastering Regular Expressions book for the gory details.<br></br>[/quote]<br></br><br></br>A note to others: please do your homework before writing another email-matching regex.<br></br><br></br>[1]<a href="http://www.ietf.org/rfc/rfc0822.txt?number=822" rel="nofollow" target="_blank">http://www.ietf.org/rfc/rfc0822.txt?number=822</a><br></br>[2]<a href="http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html." rel="nofollow" target="_blank">http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html.</a></span></code></div></div></div><a name="64502"></a><div class="note"><strong class="user">phoenixbytes at o2 dot co dot uk</strong><a href="#64502" class="date">17-Apr-2006 12:10</a><div class="text"><div class="phpcode"><code><span class="html">i use the array() function for deciding upon an email address's validity, i have a 'wap stalker' of my site that loves to exploit every hole i leave, so i used the following script to avoid being email bombed with my own file sender script, the array() is used to filter out undesirable email providers and, of course, any and all of my own addresses. before all that i used a REGEX to make sure it's an actual email address before going any further.<br></br><br></br>$mailto = "mail.domain.org"; // the input to be tested<br></br><br></br>if (preg_match("/^[A-Z0-9._%-]+@[A-Z0-9._%-]+\.[A-Z]{2,6']; ?>$/i", $mailto)) // see if it's really an email address<br></br>{<br></br>&nbsp;&nbsp;&nbsp; $bad = array('mytrashmail.com', 'mymail.ro', 'acasa.ro', 'gala.net', 'phoenixbytes'); // pick out the victims<br></br>&nbsp;&nbsp;&nbsp; foreach($bad as $baddies); // make a collection<br></br><br></br>&nbsp;&nbsp;&nbsp; if (preg_match("/$baddies/i", $mailto)) // find a match<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp;&nbsp; $addrmail = "false";<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; else<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp;&nbsp; $addrmail = "true";<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br><br></br>']; ?><br></br>else<br></br>{<br></br>$addrmail = "false";<br></br>']; ?><br></br><br></br>$addrmail can then be used in an argument.<br></br>$baddies can be used to give a list, if necessary.<br></br><br></br>i hope this helps someone.</span></code></div></div></div><a name="63847"></a><div class="note"><strong class="user">crozzer</strong><a href="#63847" class="date">01-Apr-2006 08:54</a><div class="text"><div class="phpcode"><code><span class="html">Passing variables into the array constructor:<br></br>Just a NOOB pointer, I couldn't find other examples for this.&nbsp; If you want to pass the value of an existing variable into the array() constructor, you can quote it or not, both methods are valid.<br></br><br></br><span class="default">&lt;?<br></br>$foo_value</span><span class="keyword">=</span><span class="string">'foo string'</span><span class="keyword">;<br></br></span><span class="default">$bar_value</span><span class="keyword">=</span><span class="string">'bar string'</span><span class="keyword">;<br></br><br></br></span><span class="default">$myArray</span><span class="keyword">= array(<br></br>&nbsp;&nbsp;&nbsp;</span><span class="string">'foo_key'</span><span class="keyword">=&gt;</span><span class="default">$foo_value</span><span class="keyword">,&nbsp; &nbsp;&nbsp;</span><span class="comment">// not quoted<br></br>&nbsp;&nbsp;&nbsp;</span><span class="string">'bar_key'</span><span class="keyword">=&gt;</span><span class="string">"</span><span class="default">$bar_value</span><span class="string">"</span><span class="keyword">);&nbsp;&nbsp;</span><span class="comment">// quoted<br></br><br></br></span><span class="keyword">foreach (</span><span class="default">$myArray</span><span class="keyword">as</span><span class="default">$k</span><span class="keyword">=&gt;</span><span class="default">$v</span><span class="keyword">) {<br></br>&nbsp;&nbsp; echo</span><span class="string">"\$myArray[</span><span class="default">$k</span><span class="string">] =&gt;</span><span class="default">$v</span><span class="string">.&lt;br /&gt;\n"</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>Both of these will work as expected, but the unqoted $foo_value method above is marginally faster because adding quotes adds an additional string de-reference.</span></code></div></div></div><a name="59693"></a><div class="note"><strong class="user">sales at maboom dot ch</strong><a href="#59693" class="date">13-Dec-2005 05:41</a><div class="text"><div class="phpcode"><code><span class="html">if you need to check a multidimensonal array for values it's handy to store it like<br></br><br></br>$ar['key1'][0]<br></br>$ar['key2'][0]<br></br>$ar['key3'][0]<br></br><br></br>$ar['key1'][1]<br></br>$ar['key2'][1]<br></br>$ar['key3'][1]<br></br><br></br>and to loop the keys.<br></br><br></br>Fill the array (from a database-request):<br></br><br></br>while($rf=mysql_fetch_row($rs))<br></br><br></br>{<br></br>&nbsp;&nbsp;&nbsp; $nr=$rf[0];<br></br>&nbsp;&nbsp;&nbsp; $channel['nr'][$nr]=$rf[1];<br></br>&nbsp;&nbsp;&nbsp; $channel['chatter'][$nr]=$rf[2];<br></br>']; ?><br></br><br></br>Call the values:<br></br><br></br>foreach(array_keys($channel['nr']) as $test)<br></br>{<br></br>print ' nr:'.$test.'&lt;br&gt;';<br></br>print 'value nr: '.$channel['nr'][$test].'&lt;br&gt;';<br></br>print ' chatter: '.$channel['chatter'][$test].'&lt;br&gt;';<br></br>']; ?><br></br><br></br>This is useful, if you have to look later for an element<br></br>inside the array:<br></br><br></br>if(in_array($new_value,$channel['nr'])) print 'do something.';<br></br><br></br>Hope this helps someone.</span></code></div></div></div><a name="57312"></a><div class="note"><strong class="user">ia [AT] zoznam [DOT] sk</strong><a href="#57312" class="date">30-Sep-2005 09:55</a><div class="text"><div class="phpcode"><code><span class="html">Regarding the previous comment, beware of the fact that reference to the last value of the array remains stored in $value after the foreach:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">foreach (</span><span class="default">$arr</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt; &amp;</span><span class="default">$value</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$value</span><span class="keyword">=</span><span class="default">1</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="comment">// without next line you can get bad results...<br></br>//unset( $value );<br></br><br></br></span><span class="default">$value</span><span class="keyword">=</span><span class="default">159</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>Now the last element of $arr has the value of '159'. If we remove the comment in the unset() line, everything works as expected ($arr has all values of '1').<br></br><br></br>Bad results can also appear in nested foreach loops (the same reason as above).<br></br><br></br>So either unset $value after each foreach or better use the longer form:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">foreach (</span><span class="default">$arr</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$arr</span><span class="keyword">[</span><span class="default">$key</span><span class="keyword">] =</span><span class="default">1</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="57209"></a><div class="note"><strong class="user">stochnagara at hotmail dot com</strong><a href="#57209" class="date">27-Sep-2005 08:53</a><div class="text"><div class="phpcode"><code><span class="html">Regarding the previous comment, thw following code does the job:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">foreach(</span><span class="default">$arr</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt; &amp;</span><span class="default">$value</span><span class="keyword">) {<br></br>&nbsp;&nbsp;</span><span class="default">$value</span><span class="keyword">=</span><span class="default">1</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="56914"></a><div class="note"><strong class="user">jazepstein OverAt GeeMail dot com</strong><a href="#56914" class="date">19-Sep-2005 01:14</a><div class="text"><div class="phpcode"><code><span class="html">Regarding the previous comment, the fact that this code has no effect is perfectly expected:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">foreach(</span><span class="default">$arr</span><span class="keyword">as</span><span class="default">$value</span><span class="keyword">) {<br></br>&nbsp;&nbsp;</span><span class="default">$value</span><span class="keyword">=</span><span class="default">1</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>The reason that this doesn't work, is because each time that PHP goes through the loop, it _copies_ the value of the array element into $value. So if you assign a new value to the data in $value, it has no effect on the actual array, because you only changed the value of the copy that was put in $value.<br></br><br></br>As was discovered in the previous post, the only way to get around this problem is to change the value in the original array. Hence, a typical foreach should instead look like this:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">foreach(</span><span class="default">$arr</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">) {<br></br>&nbsp;&nbsp;</span><span class="default">$arr</span><span class="keyword">[</span><span class="default">$key</span><span class="keyword">] =</span><span class="default">1</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="56234"></a><div class="note"><strong class="user">caifara aaaat im dooaat be</strong><a href="#56234" class="date">28-Aug-2005 09:28</a><div class="text"><div class="phpcode"><code><span class="html">[Editor's note: You can achieve what you're looking for by referencing $single, rather than copying it by value in your foreach statement. See<a href="http://php.net/foreach" rel="nofollow" target="_blank">http://php.net/foreach</a>for more details.]<br></br><br></br>Don't know if this is known or not, but it did eat some of my time and maybe it won't eat your time now...<br></br><br></br>I tried to add something to a multidimensional array, but that didn't work at first, look at the code below to see what I mean:<br></br><br></br><span class="default">&lt;?php<br></br><br></br>$a1</span><span class="keyword">= array(</span><span class="string">"a"</span><span class="keyword">=&gt;</span><span class="default"></span><span class="keyword">,</span><span class="string">"b"</span><span class="keyword">=&gt;</span><span class="default">1</span><span class="keyword">);<br></br></span><span class="default">$a2</span><span class="keyword">= array(</span><span class="string">"aa"</span><span class="keyword">=&gt;</span><span class="default">00</span><span class="keyword">,</span><span class="string">"bb"</span><span class="keyword">=&gt;</span><span class="default">11</span><span class="keyword">);<br></br><br></br></span><span class="default">$together</span><span class="keyword">= array(</span><span class="default">$a1</span><span class="keyword">,</span><span class="default">$a2</span><span class="keyword">);<br></br><br></br>foreach(</span><span class="default">$together</span><span class="keyword">as</span><span class="default">$single</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$single</span><span class="keyword">[</span><span class="string">"c"</span><span class="keyword">] =</span><span class="default">3</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$together</span><span class="keyword">);<br></br></span><span class="comment">/* nothing changed result is:<br></br>Array<br></br>(<br></br>&nbsp;&nbsp;&nbsp; [0] =&gt; Array<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; (<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [a] =&gt; 0<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [b] =&gt; 1<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; )<br></br>&nbsp;&nbsp;&nbsp; [1] =&gt; Array<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; (<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [aa] =&gt; 0<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [bb] =&gt; 11<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; )<br></br>) */<br></br><br></br></span><span class="keyword">foreach(</span><span class="default">$together</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$together</span><span class="keyword">[</span><span class="default">$key</span><span class="keyword">][</span><span class="string">"c"</span><span class="keyword">] =</span><span class="default">3</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$together</span><span class="keyword">);<br></br><br></br></span><span class="comment">/* now it works, this prints<br></br>Array<br></br>(<br></br>&nbsp;&nbsp;&nbsp; [0] =&gt; Array<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; (<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [a] =&gt; 0<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [b] =&gt; 1<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [c] =&gt; 3<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; )<br></br>&nbsp;&nbsp;&nbsp; [1] =&gt; Array<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; (<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [aa] =&gt; 0<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [bb] =&gt; 11<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; [c] =&gt; 3<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; )<br></br>)<br></br>*/<br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="55452"></a><div class="note"><strong class="user">uzakufuklar at hotmail dot com</strong><a href="#55452" class="date">04-Aug-2005 06:24</a><div class="text"><div class="phpcode"><code><span class="html">It is a kind of simple muti-dimensional array list.<br></br>&nbsp;I have made it just to give a simple idea.<br></br><span class="default">&lt;?php<br></br></span><span class="keyword">echo</span><span class="string">"Here we'll see how to create a multi-dimensional array.\n"</span><span class="keyword">;<br></br></span><span class="default">$a</span><span class="keyword">=array(</span><span class="string">'fruits'</span><span class="keyword">=&gt;array(</span><span class="string">'a'</span><span class="keyword">=&gt;</span><span class="string">'orange'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'b'</span><span class="keyword">=&gt;</span><span class="string">'grape'</span><span class="keyword">,</span><span class="default">c</span><span class="keyword">=&gt;</span><span class="string">'apple'</span><span class="keyword">),<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'numbers'</span><span class="keyword">=&gt;array(</span><span class="default">1</span><span class="keyword">,</span><span class="default">2</span><span class="keyword">,</span><span class="default">3</span><span class="keyword">,</span><span class="default">4</span><span class="keyword">,</span><span class="default">5</span><span class="keyword">,</span><span class="default">6</span><span class="keyword">),<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'holes'</span><span class="keyword">=&gt;array(</span><span class="string">'first'</span><span class="keyword">,</span><span class="default">5</span><span class="keyword">=&gt;</span><span class="string">'second'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'third'</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; );<br></br>foreach(</span><span class="default">$a</span><span class="keyword">as</span><span class="default">$list</span><span class="keyword">=&gt;</span><span class="default">$things</span><span class="keyword">){<br></br>&nbsp;&nbsp;&nbsp; foreach(</span><span class="default">$things</span><span class="keyword">as</span><span class="default">$newlist</span><span class="keyword">=&gt;</span><span class="default">$counter</span><span class="keyword">){<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="default">$counter</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="52145"></a><div class="note"><strong class="user">z</strong><a href="#52145" class="date">22-Apr-2005 07:10</a><div class="text"><div class="phpcode"><code><span class="html">Here's a simple function to insert a value into some position in an array<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">array_insert</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$pos</span><span class="keyword">,</span><span class="default">$val</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array2</span><span class="keyword">=</span><span class="default">array_splice</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$pos</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">[] =</span><span class="default">$val</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$array</span><span class="keyword">=</span><span class="default">array_merge</span><span class="keyword">(</span><span class="default">$array</span><span class="keyword">,</span><span class="default">$array2</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$array</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>and now for example...<br></br><span class="default">&lt;?php<br></br>$a</span><span class="keyword">= array(</span><span class="string">"John"</span><span class="keyword">,</span><span class="string">"Paul"</span><span class="keyword">,</span><span class="string">"Peter"</span><span class="keyword">);<br></br></span><span class="default">$a</span><span class="keyword">=</span><span class="default">array_insert</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">,</span><span class="default">1</span><span class="keyword">,</span><span class="string">"Mike"</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>Now $a will be "John","Mike","Paul","Peter"</span></code></div></div></div><a name="52124"></a><div class="note"><strong class="user">jeff splat codedread splot com</strong><a href="#52124" class="date">21-Apr-2005 04:16</a><div class="text"><div class="phpcode"><code><span class="html">Beware that if you're using strings as indices in the $_POST array, that periods are transformed into underscores:<br></br><br></br>&lt;html&gt;<br></br>&lt;body&gt;<br></br><span class="default">&lt;?php<br></br>&nbsp;&nbsp;&nbsp; printf</span><span class="keyword">(</span><span class="string">"POST: "</span><span class="keyword">);</span><span class="default">print_r</span><span class="keyword">(</span><span class="default">$_POST</span><span class="keyword">);</span><span class="default">printf</span><span class="keyword">(</span><span class="string">"&lt;br/&gt;"</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span>&lt;form method="post" action="<span class="default">&lt;?php</span><span class="keyword">echo</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">'PHP_SELF'</span><span class="keyword">];</span><span class="default">?&gt;</span>"&gt;<br></br>&nbsp;&nbsp;&nbsp; &lt;input type="hidden" name="Windows3.1" value="Sux"&gt;<br></br>&nbsp;&nbsp;&nbsp; &lt;input type="submit" value="Click" /&gt;<br></br>&lt;/form&gt;<br></br>&lt;/body&gt;<br></br>&lt;/html&gt;<br></br><br></br>Once you click on the button, the page displays the following:<br></br><br></br>POST: Array ( [Windows3_1] =&gt; Sux )</span></code></div></div></div><a name="51603"></a><div class="note"><strong class="user">roland dot swingler at transversal dot com</strong><a href="#51603" class="date">05-Apr-2005 03:24</a><div class="text"><div class="phpcode"><code><span class="html">Something that tripped me up:<br></br><br></br>If you mix string and integer keys, be careful if you are doing a comparison on the to find if a string key exists.<br></br><br></br>For example, this will not do what you expect it to do:<br></br><br></br><span class="default">&lt;?php<br></br>$exampleArray</span><span class="keyword">= array();<br></br></span><span class="default">$exampleArray</span><span class="keyword">[</span><span class="string">'foo'</span><span class="keyword">] =</span><span class="string">'bar'</span><span class="keyword">;<br></br></span><span class="default">$exampleArray</span><span class="keyword">[] =</span><span class="string">'Will create 0 index'</span><span class="keyword">;<br></br><br></br></span><span class="default">$keyWeAreLookingFor</span><span class="keyword">=</span><span class="string">"correctKey"</span><span class="keyword">;<br></br><br></br>foreach (</span><span class="default">$exampleArray</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">){<br></br>&nbsp; if (</span><span class="default">$key</span><span class="keyword">==</span><span class="default">$keyWeAreLookingFor</span><span class="keyword">){<br></br>&nbsp;&nbsp;&nbsp; print</span><span class="string">"Found Key"</span><span class="keyword">;<br></br>&nbsp; ']; ?><br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>It will print "Found Key", because (I presume) when PHP makes the comparison between the string "correctKey" and the index 0, it casts the string to an integer, rather than casting 0 to the string "0" and then doing the comparison.<br></br><br></br>Using === fixes the problem:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">foreach (</span><span class="default">$exampleArray</span><span class="keyword">as</span><span class="default">$key</span><span class="keyword">=&gt;</span><span class="default">$value</span><span class="keyword">){<br></br>&nbsp; if (</span><span class="default">$key</span><span class="keyword">===</span><span class="default">$keyWeAreLookingFor</span><span class="keyword">){<br></br>&nbsp;&nbsp;&nbsp; print</span><span class="string">"Found Key"</span><span class="keyword">;<br></br>&nbsp; ']; ?><br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="51348"></a><div class="note"><strong class="user">lars-phpcomments at ukmix dot net</strong><a href="#51348" class="date">28-Mar-2005 04:40</a><div class="text"><div class="phpcode"><code><span class="html">Used to creating arrays like this in Perl?<br></br><br></br>@array = ("All", "A".."Z");<br></br><br></br>Looks like we need the range() function in PHP:<br></br><br></br><span class="default">&lt;?php<br></br>$array</span><span class="keyword">=</span><span class="default">array_merge</span><span class="keyword">(array(</span><span class="string">'All'</span><span class="keyword">),</span><span class="default">range</span><span class="keyword">(</span><span class="string">'A'</span><span class="keyword">,</span><span class="string">'Z'</span><span class="keyword">));<br></br></span><span class="default">?&gt;<br></br></span><br></br>You don't need to array_merge if it's just one range:<br></br><br></br><span class="default">&lt;?php<br></br>$array</span><span class="keyword">=</span><span class="default">range</span><span class="keyword">(</span><span class="string">'A'</span><span class="keyword">,</span><span class="string">'Z'</span><span class="keyword">);<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="50036"></a><div class="note"><strong class="user">mortoray at ecircle-ag dot com</strong><a href="#50036" class="date">16-Feb-2005 08:59</a><div class="text"><div class="phpcode"><code><span class="html">On array copying a deep copy is done of elements except those elements which are references, in which case the reference is maintained.&nbsp; This is a very important thing to understand if you intend on mixing references and recursive arrays.<br></br><br></br>By Example:<br></br>&nbsp;&nbsp;&nbsp; $a = array( 1 );<br></br>&nbsp;&nbsp;&nbsp; $aref_a = array( &amp;$a );<br></br>&nbsp;&nbsp;&nbsp; $copy_aref_a = $aref_a;<br></br>&nbsp;&nbsp;&nbsp; $acopy_a = array( $a );<br></br>&nbsp;&nbsp;&nbsp; $copy_acopy_a = $acopy_a;<br></br><br></br>&nbsp;&nbsp;&nbsp; $a[] = 5;<br></br>&nbsp;&nbsp;&nbsp; $acopy_a[0][] = 6;<br></br><br></br>&nbsp;&nbsp;&nbsp; print_r( $aref_a ); //Shows: ( (1,5) )<br></br>&nbsp;&nbsp;&nbsp; print_r( $copy_aref_a ); //Shows: ( (1,5) )<br></br>&nbsp;&nbsp;&nbsp; print_r( $acopy_a ); //Shows: ( (1, 6) )<br></br>&nbsp;&nbsp;&nbsp; print_r( $copy_acopy_a ); //Shows: ( (1) )</span></code></div></div></div><a name="50035"></a><div class="note"><strong class="user">ktaufik(at)gmail(dot)com</strong><a href="#50035" class="date">16-Feb-2005 08:40</a><div class="text"><div class="phpcode"><code><span class="html">For you who works for localized "say" number to letter ( ex , 7=&gt; seven, 8=&gt;eight) for Bahasa Indonesia.<br></br><br></br>Indonesia "say" or "Terbilang" is based on 3 digit number.<br></br>thousands, millions and trillions .... will be based on the 3 digit number.<br></br><br></br>In Indonesia you say 137 as "Seratus Tiga Puluh Tujuh"<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="comment">//build random 3 digit number to be "said" in Bahasa Indonesia<br></br></span><span class="default">$x</span><span class="keyword">=</span><span class="default">rand</span><span class="keyword">(</span><span class="default"></span><span class="keyword">,</span><span class="default">9</span><span class="keyword">);<br></br></span><span class="default">$y</span><span class="keyword">=</span><span class="default">rand</span><span class="keyword">(</span><span class="default"></span><span class="keyword">,</span><span class="default">9</span><span class="keyword">);<br></br></span><span class="default">$z</span><span class="keyword">=</span><span class="default">rand</span><span class="keyword">(</span><span class="default"></span><span class="keyword">,</span><span class="default">9</span><span class="keyword">);<br></br><br></br>function</span><span class="default">display_angka_bilangan</span><span class="keyword">(</span><span class="default">$n</span><span class="keyword">) {<br></br>&nbsp;&nbsp;</span><span class="default">$angka</span><span class="keyword">= array(<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">1</span><span class="keyword">=&gt;</span><span class="string">'satu'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">2</span><span class="keyword">=&gt;</span><span class="string">'dua'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">3</span><span class="keyword">=&gt;</span><span class="string">'tiga'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">4</span><span class="keyword">=&gt;</span><span class="string">'empat'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">5</span><span class="keyword">=&gt;</span><span class="string">"lima"</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">6</span><span class="keyword">=&gt;</span><span class="string">'enam'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">7</span><span class="keyword">=&gt;</span><span class="string">'tujuh'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">8</span><span class="keyword">=&gt;</span><span class="string">'delapan'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">9</span><span class="keyword">=&gt;</span><span class="string">'sembilan'<br></br>&nbsp;&nbsp;</span><span class="keyword">);<br></br>&nbsp;&nbsp; return</span><span class="default">$angka</span><span class="keyword">[</span><span class="default">$n</span><span class="keyword">];<br></br>']; ?><br></br></span><span class="comment">// Terbilang X-------Say X<br></br></span><span class="keyword">if (</span><span class="default">$x</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">){</span><span class="default">$terbilangx</span><span class="keyword">=</span><span class="string">"seratus "</span><span class="keyword">;']; ?><br></br>elseif (</span><span class="default">$x</span><span class="keyword">==</span><span class="default"></span><span class="keyword">){</span><span class="default">$terbilangx</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">;']; ?><br></br>else {</span><span class="default">$terbilangx</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">.</span><span class="default">display_angka_bilangan</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">).</span><span class="string">' '</span><span class="keyword">.</span><span class="string">'ratus '</span><span class="keyword">;']; ?><br></br></span><span class="comment">// Terbilang Y ------Say Y<br></br></span><span class="keyword">if (</span><span class="default">$y</span><span class="keyword">==</span><span class="default"></span><span class="keyword">){</span><span class="default">$terbilangy</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">;']; ?><br></br>elseif (</span><span class="default">$y</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">&amp;&amp;</span><span class="default">$z</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">){</span><span class="default">$terbilangy</span><span class="keyword">=</span><span class="string">"sebelas"</span><span class="keyword">;</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">;']; ?><br></br>elseif (</span><span class="default">$y</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">&amp;&amp;</span><span class="default">$z</span><span class="keyword">==</span><span class="default"></span><span class="keyword">){</span><span class="default">$terbilangy</span><span class="keyword">=</span><span class="string">"sepuluh "</span><span class="keyword">;</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">;']; ?><br></br>elseif (</span><span class="default">$y</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">&amp;&amp;</span><span class="default">$z</span><span class="keyword">!==</span><span class="default">1</span><span class="keyword">&amp;&amp;&nbsp;</span><span class="default">$z</span><span class="keyword">!==</span><span class="default"></span><span class="keyword">){</span><span class="default">$terbilangy</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">.</span><span class="default">display_angka_bilangan</span><span class="keyword">(</span><span class="default">$z</span><span class="keyword">).</span><span class="string">' belas '</span><span class="keyword">;']; ?><br></br>else {</span><span class="default">$terbilangy</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">.</span><span class="default">display_angka_bilangan</span><span class="keyword">(</span><span class="default">$y</span><span class="keyword">).</span><span class="string">' '</span><span class="keyword">.</span><span class="string">'puluh '</span><span class="keyword">;']; ?><br></br></span><span class="comment">// Terbilang z ------Say z<br></br></span><span class="keyword">if (</span><span class="default">$z</span><span class="keyword">==</span><span class="default"></span><span class="keyword">){</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">;']; ?><br></br>elseif (</span><span class="default">$z</span><span class="keyword">==</span><span class="default"></span><span class="keyword">&amp;&amp;</span><span class="default">$y</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">){</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">;']; ?><br></br>elseif (</span><span class="default">$z</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">&amp;&amp;</span><span class="default">$y</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">){</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">;']; ?><br></br>elseif(</span><span class="default">$y</span><span class="keyword">==</span><span class="default"></span><span class="keyword">) {</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">.</span><span class="default">display_angka_bilangan</span><span class="keyword">(</span><span class="default">$z</span><span class="keyword">);']; ?><br></br>elseif (</span><span class="default">$y</span><span class="keyword">==</span><span class="default">1</span><span class="keyword">&amp;&amp;</span><span class="default">$z</span><span class="keyword">!==</span><span class="default">1</span><span class="keyword">&amp;&amp;&nbsp;</span><span class="default">$z</span><span class="keyword">!==</span><span class="default"></span><span class="keyword">) {</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">;']; ?><br></br>else {</span><span class="default">$terbilangz</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">.</span><span class="default">display_angka_bilangan</span><span class="keyword">(</span><span class="default">$z</span><span class="keyword">);']; ?>;<br></br><br></br></span><span class="default">$terbilang</span><span class="keyword">=</span><span class="default">$terbilangx</span><span class="keyword">.</span><span class="default">$terbilangy</span><span class="keyword">.</span><span class="default">$terbilangz</span><span class="keyword">;<br></br>echo</span><span class="default">$x</span><span class="keyword">.</span><span class="default">$y</span><span class="keyword">.</span><span class="default">$z</span><span class="keyword">.</span><span class="string">" "</span><span class="keyword">;<br></br>echo</span><span class="default">$terbilang</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>Hope it is useful<br></br>ktaufik(at)gmail(dot)com</span></code></div></div></div><a name="48730"></a><div class="note"><strong class="user">db</strong><a href="#48730" class="date">05-Jan-2005 03:06</a><div class="text"><div class="phpcode"><code><span class="html">[Editor's Note: (Second example.) These are not "arrays in arrays". These are single-dimensional arrays containing stdClass objects; all objects are referenced by default in PHP5. You can see in the var_dump output that they point to the same object.]<br></br><br></br>Attention with Arrays in Arrays!<br></br><br></br>If you copy (=) an array which contains arrays it will be REFERENCED not COPIED.<br></br><br></br>Example:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="comment">/* GOOD ONE */<br></br></span><span class="keyword">echo</span><span class="string">"&lt;b&gt;Here copy (=) works correct:&lt;/b&gt;&lt;br&gt;"</span><span class="keyword">;<br></br></span><span class="comment">/* Initialise Array 1 */<br></br></span><span class="default">$x1</span><span class="keyword">= array(array(</span><span class="default">10</span><span class="keyword">,</span><span class="default">20</span><span class="keyword">),array(</span><span class="default">30</span><span class="keyword">,</span><span class="default">40</span><span class="keyword">));<br></br></span><span class="comment">/* COPY Array */<br></br></span><span class="default">$x2</span><span class="keyword">=</span><span class="default">$x1</span><span class="keyword">;<br></br></span><span class="comment">/* Change some values in Array 2 */<br></br></span><span class="default">$x2</span><span class="keyword">[</span><span class="default"></span><span class="keyword">][</span><span class="default"></span><span class="keyword">]=</span><span class="default">77</span><span class="keyword">;<br></br></span><span class="default">$x2</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">][</span><span class="default">1</span><span class="keyword">]=</span><span class="default">99</span><span class="keyword">;<br></br>echo</span><span class="string">"&lt;b&gt;Original:&lt;/b&gt;&lt;pre&gt;"</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$x1</span><span class="keyword">);<br></br>echo</span><span class="string">"&lt;/pre&gt;&lt;b&gt;Changed Copy:&lt;/b&gt;&lt;pre&gt;"</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$x2</span><span class="keyword">);<br></br><br></br></span><span class="comment">/* BAAAAAAAD ONE */<br></br></span><span class="keyword">echo</span><span class="string">"&lt;/pre&gt;&lt;hr&gt;&lt;b&gt;Here copy (=) FAILS:&lt;/b&gt;&lt;br&gt;"</span><span class="keyword">;<br></br></span><span class="comment">/* Initialise Array 1 */<br></br></span><span class="default">$a1</span><span class="keyword">[</span><span class="default"></span><span class="keyword">]-&gt;</span><span class="default">bla</span><span class="keyword">[</span><span class="default"></span><span class="keyword">]-&gt;</span><span class="default">id</span><span class="keyword">=</span><span class="default">10</span><span class="keyword">;<br></br></span><span class="default">$a1</span><span class="keyword">[</span><span class="default"></span><span class="keyword">]-&gt;</span><span class="default">bla</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">id</span><span class="keyword">=</span><span class="default">20</span><span class="keyword">;<br></br></span><span class="default">$a1</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">bla</span><span class="keyword">[</span><span class="default"></span><span class="keyword">]-&gt;</span><span class="default">id</span><span class="keyword">=</span><span class="default">30</span><span class="keyword">;<br></br></span><span class="default">$a1</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">bla</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">id</span><span class="keyword">=</span><span class="default">40</span><span class="keyword">;<br></br></span><span class="comment">/* COPY Array */<br></br></span><span class="default">$a2</span><span class="keyword">=</span><span class="default">$a1</span><span class="keyword">;<br></br></span><span class="comment">/* Change some values in Array 2 (!) */<br></br></span><span class="default">$a2</span><span class="keyword">[</span><span class="default"></span><span class="keyword">]-&gt;</span><span class="default">bla</span><span class="keyword">[</span><span class="default"></span><span class="keyword">]-&gt;</span><span class="default">id</span><span class="keyword">=</span><span class="default">77</span><span class="keyword">;<br></br></span><span class="default">$a2</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">bla</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">]-&gt;</span><span class="default">id</span><span class="keyword">=</span><span class="default">99</span><span class="keyword">;<br></br>echo</span><span class="string">"&lt;b&gt;Original:&lt;/b&gt;&lt;pre&gt;"</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$a1</span><span class="keyword">);<br></br>echo</span><span class="string">"&lt;/pre&gt;&lt;b&gt;Changed Copy:&lt;/b&gt;&lt;pre&gt;"</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$a2</span><span class="keyword">);<br></br>echo</span><span class="string">"&lt;/pre&gt;"</span><span class="keyword">;<br></br><br></br></span><span class="default">php?&gt;<br></br></span><br></br>The output of $a1 and $a2 will be the same..</span></code></div></div></div><a name="47240"></a><div class="note"><strong class="user">Joe Morrison &lt;jdm at powerframe dot com&gt;</strong><a href="#47240" class="date">08-Nov-2004 09:26</a><div class="text"><div class="phpcode"><code><span class="html">Programmers new to PHP may find the following surprising:<br></br><br></br><span class="default">&lt;?php<br></br><br></br>$x</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">] =</span><span class="string">'foo'</span><span class="keyword">;<br></br></span><span class="default">$x</span><span class="keyword">[</span><span class="default"></span><span class="keyword">] =</span><span class="string">'bar'</span><span class="keyword">;<br></br>echo</span><span class="string">"Original array:\n"</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">);<br></br><br></br></span><span class="default">array_pop</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">);<br></br>echo</span><span class="string">"Array after popping last element:\n"</span><span class="keyword">;<br></br></span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$x</span><span class="keyword">);<br></br><br></br></span><span class="default">?&gt;<br></br></span><br></br>The surprise is that element 0 is deleted, not element 1. Apparently the notion of "last element" has more to do with how the array is stored internally than with which element has the highest numeric index. I recently translated a Perl program to PHP and was bitten by this one.<br></br><br></br>My solution was to identify all the places in my code where I could prove that the array elements were assigned sequentially. In those cases it is safe to use array_pop, array_splice, etc. since the array indices correspond with the array layout. For the other cases, my solution was to write replacements for the built-in array functions such as this one:<br></br><br></br><span class="default">&lt;?php<br></br><br></br></span><span class="keyword">function</span><span class="default">safe_pop</span><span class="keyword">(&amp;</span><span class="default">$a</span><span class="keyword">)<br></br>{<br></br>&nbsp; if (!isset(</span><span class="default">$a</span><span class="keyword">))<br></br>&nbsp;&nbsp;&nbsp; return;<br></br><br></br>&nbsp; if (!</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">))<br></br>&nbsp;&nbsp;&nbsp; return;<br></br><br></br>&nbsp; if (</span><span class="default">count</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">) ==</span><span class="default"></span><span class="keyword">)<br></br>&nbsp;&nbsp;&nbsp; return;<br></br><br></br>&nbsp; unset(</span><span class="default">$a</span><span class="keyword">[</span><span class="default">max</span><span class="keyword">(</span><span class="default">array_keys</span><span class="keyword">(</span><span class="default">$a</span><span class="keyword">))]);<br></br>']; ?><br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="37535"></a><div class="note"><strong class="user">Cameron Brown</strong><a href="#37535" class="date">19-Nov-2003 04:51</a><div class="text"><div class="phpcode"><code><span class="html">Negative and positive array indices have different behavior when it comes to string&lt;-&gt;int conversion.&nbsp; 1 and "1" are treated as identical indices, -1 and "-1" are not.&nbsp; So:<br></br><br></br>$arr["1"] and $arr[1] refer to the same element.<br></br>$arr["-1"] and $arr[-1] refer to different elements.<br></br><br></br>The following code:<br></br><br></br><span class="default">&lt;?<br></br>&nbsp; $arr</span><span class="keyword">[</span><span class="default">1</span><span class="keyword">]&nbsp; &nbsp; =</span><span class="string">"blue"</span><span class="keyword">;<br></br>&nbsp;</span><span class="default">$arr</span><span class="keyword">[</span><span class="string">"1"</span><span class="keyword">]&nbsp; =</span><span class="string">"red"</span><span class="keyword">;<br></br>&nbsp;</span><span class="default">$arr</span><span class="keyword">[-</span><span class="default">1</span><span class="keyword">]&nbsp;&nbsp; =</span><span class="string">"blue"</span><span class="keyword">;<br></br>&nbsp;</span><span class="default">$arr</span><span class="keyword">[</span><span class="string">"-1"</span><span class="keyword">] =</span><span class="string">"red"</span><span class="keyword">;<br></br><br></br>&nbsp;</span><span class="default">var_dump</span><span class="keyword">(</span><span class="default">$arr</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>produces the output:<br></br><br></br>array(3) {<br></br>&nbsp; [1]=&gt;<br></br>&nbsp; string(3) "red"<br></br>&nbsp; [-1]=&gt;<br></br>&nbsp; string(4) "blue"<br></br>&nbsp; ["-1"]=&gt;<br></br>&nbsp; string(3) "red"<br></br>']; ?><br></br><br></br>This code should create an array with either two or four elements.&nbsp; Which one should be the "correct" behavior is an exercise left to the reader....</span></code></div></div></div><a name="34134"></a><div class="note"><strong class="user">akamai at veloxmail dot com dot br</strong><a href="#34134" class="date">16-Jul-2003 11:22</a><div class="text"><div class="phpcode"><code><span class="html">It is quite simple, but don't forget when you'll using foreach with forms arrays.<br></br><br></br>If your field name is:<br></br>&lt;input type="checkbox" name="foo['bar'][]" ...<br></br>It doesn't work.<br></br><br></br>This should work:<br></br>&lt;input type="checkbox" name="foo[bar][]" ...</span></code></div></div></div><a name="33955"></a><div class="note"><strong class="user">agape_logos at shaw dot ca</strong><a href="#33955" class="date">11-Jul-2003 11:59</a><div class="text"><div class="phpcode"><code><span class="html">I was having trouble getting javascript arrays and php arrays to work together with a Check All checkboxe.&nbsp; Here is a simple solution.&nbsp; Clicking the 'Check All' checkbox will check all checkboxes on the form.<br></br><br></br>&lt;script language="JavaScript"&gt;<br></br>function chkAll(frm, arr, mark) {<br></br>&nbsp; for (i = 0; i &lt;= frm.elements.length; i++) {<br></br>&nbsp;&nbsp;&nbsp; try{<br></br>&nbsp;&nbsp; &nbsp;&nbsp; if(frm.elements[i].name == arr) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; frm.elements[i].checked = mark;<br></br>&nbsp;&nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; ']; ?> catch(er) {']; ?><br></br>&nbsp; ']; ?><br></br>']; ?><br></br>&lt;/script&gt;<br></br><br></br>&lt;form name='foo'&gt;<br></br>&lt;input type="checkbox" name="ca" value="1" onClick="chkAll(this.form, 'formVar[chkValue][]', this.checked)"&gt;<br></br><span class="default">&lt;?php<br></br></span><span class="keyword">for(</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">5</span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">++){<br></br>echo(</span><span class="string">"&lt;input type='checkbox' name='formVar[chkValue][]' value='</span><span class="default">$i</span><span class="string">'&gt;"</span><span class="keyword">);<br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span>&lt;/form&gt;<br></br><br></br>Dean M.</span></code></div></div></div><a name="30714"></a><div class="note"><strong class="user">chroniton .at. gmx .dot. li</strong><a href="#30714" class="date">26-Mar-2003 06:13</a><div class="text"><div class="phpcode"><code><span class="html">I didn't find this anywhere in the docs and i think it is worth a mention:<br></br><br></br>$a[] = &amp;$a;<br></br>print_r($a);<br></br><br></br>// will output:<br></br><br></br>/*<br></br>Array<br></br>(<br></br>&nbsp;&nbsp;&nbsp; [0] =&gt; Array<br></br>&nbsp;*RECURSION*<br></br>)<br></br><br></br>*/<br></br><br></br>// this means that $a[0] is a reference to $a ( that is detected by print_r() ). I guess this is what the manual calls 'recursive arrays'.</span></code></div></div></div><a name="30132"></a><div class="note"><a href="#30132" class="date">07-Mar-2003 11:28</a><div class="text"><div class="phpcode"><code><span class="html">"Using NULL as a key will evaluate to an empty string. Using an emptry string as key will create (or overwrite) a key with an empty string and its value, it is not the same as using empty brackets."<br></br><br></br>If you create an array like this:<br></br>$foo = array(null =&gt; 'bar');<br></br>And then want to access 'bar', you must use this syntax:<br></br>echo $foo['']; // notice the two single quotes<br></br><br></br>This will of course cause a fatal error:<br></br>echo $foo[];</span></code></div></div></div><a name="27272"></a><div class="note"><strong class="user">wmoranATpotentialtechDOTcom</strong><a href="#27272" class="date">29-Nov-2002 11:10</a><div class="text"><div class="phpcode"><code><span class="html">Dereferencing arrays takes some time, but is not terribly expensive.<br></br>I wrote two dummy loops to test performance:<br></br>for ($i =0; $i &lt; count($a); $i++) {<br></br>&nbsp;$x = $a[$b[$i]];<br></br>&nbsp;$y = $a[$b[$i]];<br></br>&nbsp;$z = $a[$b[$i]];<br></br>']; ?><br></br>for ($i =0; $i &lt; count($a); $i++) {<br></br>&nbsp;$q = $b[$i];<br></br>&nbsp;$x = $a[$q];<br></br>&nbsp;$y = $a[$q];<br></br>&nbsp;$z = $a[$q];<br></br>']; ?><br></br><br></br>The first loop is 6.5% slower than the second.&nbsp; Meaning that dereferencing arrays is not terribly expensive, unless you do it a whole lot. I would expect that each extra reference costs about 3% in speed. The lesson is that if you're going to be using a specific value in an array for a number of operations, you can gain a little speed by assigning it to a temp variable (or creating a reference with $q = &amp;$b[$i]) but it's not worth getting crazy over.<br></br>I tested this with iterations of 10,000 and 100,000 on php 4.2 and the results were consistent.</span></code></div></div></div><a name="26007"></a><div class="note"><strong class="user">mu at despammed dot com</strong><a href="#26007" class="date">15-Oct-2002 06:50</a><div class="text"><div class="phpcode"><code><span class="html">Recursive arrays and multi-dimensional arrays are the same thing and completely identical.<br></br><br></br>The following confirms this:<br></br><br></br>$fruits1["european"]["green"] = "Apple";<br></br>$fruits2 = array ( "european"&nbsp; =&gt; array ( "green" =&gt; "Apple"));<br></br>print ($fruits1 === $fruits2);<br></br><br></br>Result: 1 (= true)</span></code></div></div></div><a name="22223"></a><div class="note"><strong class="user">hramrach_L at centrum. cz ;-)</strong><a href="#22223" class="date">11-Jun-2002 12:40</a><div class="text"><div class="phpcode"><code><span class="html">Arrays can be merged using + as discussed in the notes for array_merge.<br></br>&nbsp;<a href="http://www.php.net/manual/en/function.array-merge.php" rel="nofollow" target="_blank">http://www.php.net/manual/en/function.array-merge.php</a></span></code></div></div></div><a name="21739"></a><div class="note"><strong class="user">philip at boone dot at</strong><a href="#21739" class="date">25-May-2002 01:06</a><div class="text"><div class="phpcode"><code><span class="html">For all of you having problems when using php arrays in an HTML form input field name, and wanting to validate the form using javascript for example, it is much easier to specify an id for the field as well, and use this id for validation.<br></br><br></br>Example:<br></br><br></br>&lt;input type="text" id="lastname" name="fields[lastname]"&gt;<br></br><br></br>then in the javascript check:<br></br><br></br>if(formname.lastname.value == "") {<br></br>&nbsp;&nbsp; &nbsp; alert("please enter a lastname!");<br></br>']; ?><br></br><br></br>This works very well. If you have any problems with it, let me know.</span></code></div></div></div></div><div class="foot"><a href="/manual/add-note.php?sect=language.types.array&amp;redirect=http://de.php.net/manual/en/language.types.array.php"><img src="/images/notes-add.gif" alt="add a note" width="13" height="13" class="middle"/></a><small><a href="/manual/add-note.php?sect=language.types.array&amp;redirect=http://de.php.net/manual/en/language.types.array.php">add a note</a></small></div></div><br></br></div><div class="cleaner">&nbsp;</div></div><div id="footnav"><a href="/source.php?url=/manual/en/language.types.array.php">show source</a>|<a href="/credits.php">credits</a>|<a href="/sitemap.php">sitemap</a>|<a href="/contact.php">contact</a>|<a href="/contact.php#ads">advertising</a>|<a href="/mirrors.php">mirror sites</a></div><div id="pagefooter"><div id="copyright"><a href="/copyright.php">Copyright &copy; 2001-2011 The PHP Group</a><br></br>All rights reserved.</div><div id="thismirror"><a href="/mirror.php">This mirror</a>generously provided by:<a href="http://www.globe.de/">@GLOBE GmbH</a><br></br>Last updated: Sun Mar 13 06:32:21 2011 UTC</div></div><!-- [if IE 6]><script type="text/javascript">  /*Load jQuery if not already loaded*/ if(typeof jQuery == 'undefined'){ document.write("<script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js\"></"+"script>"); var __noconflict = true; ']; ?&gt;  var IE6UPDATE_OPTIONS = { icons_path: "/ie6update/images/" ']; ?&gt;</script><script type="text/javascript" src="/ie6update/ie6update.js"></script><![endif] !--></body></html>