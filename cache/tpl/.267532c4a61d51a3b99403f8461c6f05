61f9ce14bae3a08fa372a2fb1d47edb1
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head profile="http://purl.org/NET/erdf/profile"><title>PHP: ob_start - Manual</title><style type="text/css" media="all">@import url("/styles/site.css"); @import url("/styles/mirror.css");</style><!-- [if IE]><![if gte IE 6]><![endif] !--><style type="text/css" media="print">@import url("/styles/print.css");</style><!-- [if IE]><![endif]><![endif] !--><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><link rel="shortcut icon" href="/favicon.ico"/><link rel="contents" href="index.php"/><link rel="index" href="ref.outcontrol.php"/><link rel="prev" href="function.ob-list-handlers.php"/><link rel="next" href="function.output-add-rewrite-var.php"/><link rel="schema.dc" href="http://purl.org/dc/elements/1.1/"/><link rel="schema.rdfs" href="http://www.w3.org/2000/01/rdf-schema#"/><link rev="canonical" rel="self alternate shorter shorturl shortlink" href="http://php.net/ob-start"/><link rel="license" href="http://creativecommons.org/licenses/by/3.0/" about="#content"/><link rel="canonical" href="http://php.net/manual/en/function.ob-start.php"/><script type="text/javascript" src="/userprefs.js"></script><base href="http://ru.php.net/manual/en/function.ob-start.php"></base><meta http-equiv="Content-language" value="en"/><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/jquery-ui.min.js"></script></head><body><div id="headnav"><a href="/" rel="home"><img src="/images/php.gif" alt="PHP" width="120" height="67" id="phplogo"/></a><div id="headmenu"><a href="/downloads.php">downloads</a>|<a href="/docs.php">documentation</a>|<a href="/FAQ.php">faq</a>|<a href="/support.php">getting help</a>|<a href="/mailing-lists.php">mailing lists</a>|<a href="/license">licenses</a>|<a href="http://wiki.php.net/">wiki</a>|<a href="http://bugs.php.net/">reporting bugs</a>|<a href="/sites.php">php.net sites</a>|<a href="/links.php">links</a>|<a href="/conferences/">conferences</a>|<a href="/my.php">my php.net</a></div></div><div id="headsearch"><form method="post" action="/search.php" id="topsearch"><p><span title="Keyboard shortcut: Alt+S (Win), Ctrl+S (Apple)"><span class="shortkey">s</span>earch for</span><input type="text" name="pattern" value="" size="30" accesskey="s"/><span>in the</span><select name="show"><option value="all">all php.net sites</option><option value="local">this mirror only</option><option value="quickref" selected="selected">function list</option><option value="manual">online documentation</option><option value="bugdb">bug database</option><option value="news_archive">Site News Archive</option><option value="changelogs">All Changelogs</option><option value="pear">just pear.php.net</option><option value="pecl">just pecl.php.net</option><option value="talks">just talks.php.net</option><option value="maillist">general mailing list</option><option value="devlist">developer mailing list</option><option value="phpdoc">documentation mailing list</option></select><input type="image" src="/images/small_submit_white.gif" class="submit" alt="search"/><input type="hidden" name="lang" value="en"/></p></form></div><div id="layout_2"><div id="leftbar"><!-- UdmComment !--><ul class="toc"><li class="header home"><a href="index.php">PHP Manual</a></li><li class="header up"><a href="funcref.php">Function Reference</a></li><li class="header up"><a href="refs.basic.php.php">Affecting PHP's Behaviour</a></li><li class="header up"><a href="book.outcontrol.php">Output Control</a></li><li class="header up"><a href="ref.outcontrol.php">Output Control Functions</a></li><li><a href="function.flush.php">flush</a></li><li><a href="function.ob-clean.php">ob_<span class="w"></span>clean</a></li><li><a href="function.ob-end-clean.php">ob_<span class="w"></span>end_<span class="w"></span>clean</a></li><li><a href="function.ob-end-flush.php">ob_<span class="w"></span>end_<span class="w"></span>flush</a></li><li><a href="function.ob-flush.php">ob_<span class="w"></span>flush</a></li><li><a href="function.ob-get-clean.php">ob_<span class="w"></span>get_<span class="w"></span>clean</a></li><li><a href="function.ob-get-contents.php">ob_<span class="w"></span>get_<span class="w"></span>contents</a></li><li><a href="function.ob-get-flush.php">ob_<span class="w"></span>get_<span class="w"></span>flush</a></li><li><a href="function.ob-get-length.php">ob_<span class="w"></span>get_<span class="w"></span>length</a></li><li><a href="function.ob-get-level.php">ob_<span class="w"></span>get_<span class="w"></span>level</a></li><li><a href="function.ob-get-status.php">ob_<span class="w"></span>get_<span class="w"></span>status</a></li><li><a href="function.ob-gzhandler.php">ob_<span class="w"></span>gzhandler</a></li><li><a href="function.ob-implicit-flush.php">ob_<span class="w"></span>implicit_<span class="w"></span>flush</a></li><li><a href="function.ob-list-handlers.php">ob_<span class="w"></span>list_<span class="w"></span>handlers</a></li><li class="active"><a href="function.ob-start.php">ob_<span class="w"></span>start</a></li><li><a href="function.output-add-rewrite-var.php">output_<span class="w"></span>add_<span class="w"></span>rewrite_<span class="w"></span>var</a></li><li><a href="function.output-reset-rewrite-vars.php">output_<span class="w"></span>reset_<span class="w"></span>rewrite_<span class="w"></span>vars</a></li></ul><!-- /UdmComment !--></div><div id="content" class="manual/en"><!-- UdmComment !--><div class="manualnavbar manualnavbar_top"><span class="next"><a href="function.output-add-rewrite-var.php">output_add_rewrite_var<img src="/images/caret-r.gif" alt="&gt;" width="11" height="7"/></a></span><span class="prev"><a href="function.ob-list-handlers.php"><img src="/images/caret-l.gif" alt="&lt;" width="11" height="7"/>ob_list_handlers</a></span><hr></hr><span class="lastupdated">Last updated: Fri, 04 Mar 2011</span><div class="langchooser"><form action="/manual/change.php" method="get"><p>view this page in</p><fieldset><select name="page"><option value="pt_BR/function.ob-start.php">Brazilian Portuguese</option><option value="zh/function.ob-start.php">Chinese (Simplified)</option><option value="fr/function.ob-start.php">French</option><option value="de/function.ob-start.php">German</option><option value="ja/function.ob-start.php">Japanese</option><option value="pl/function.ob-start.php">Polish</option><option value="ro/function.ob-start.php">Romanian</option><option value="fa/function.ob-start.php">Persian</option><option value="es/function.ob-start.php">Spanish</option><option value="tr/function.ob-start.php">Turkish</option><option value="help-translate.php">Other</option></select><input type="image" src="/images/small_submit.gif" id="changeLangImage" alt="Change language"/></fieldset></form></div></div><!-- /UdmComment !--><div id="function.ob-start" class="refentry"><div class="refnamediv"><h1 class="refname">ob_start</h1><p class="verinfo">(PHP 4, PHP 5)</p><p class="refpurpose"><span class="refname">ob_start</span>&mdash;<span class="dc-title">Turn on output buffering</span></p></div><div class="refsect1 description"><h3 class="title">Description</h3><div class="methodsynopsis dc-description"><span class="type">bool</span><span class="methodname"><b>ob_start</b></span>([<span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.callback" class="type callback">callback</a></span><tt class="parameter">$output_callback</tt></span>[,<span class="methodparam"><span class="type">int</span><tt class="parameter">$chunk_size</tt></span>[,<span class="methodparam"><span class="type">bool</span><tt class="parameter">$erase</tt></span>]]] )</div><p class="para rdfs-comment">This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.</p><p class="para">The contents of this internal buffer may be copied into a string variable using<span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span>. To output what is stored in the internal buffer, use<span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>. Alternatively,<span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span>will silently discard the buffer contents.</p><div class="warning"><b class="warning">Warning</b><p class="para">Some web servers (e.g. Apache) change the working directory of a script when calling the callback function. You can change it back by e.g.<i>chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))</i>in the callback function.</p></div><p class="para">Output buffers are stackable, that is, you may call<span class="function"><b>ob_start()</b></span>while another<span class="function"><b>ob_start()</b></span>is active. Just make sure that you call<span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>the appropriate number of times. If multiple output callback functions are active, output is being filtered sequentially through each of them in nesting order.</p></div><div class="refsect1 parameters"><h3 class="title">Parameters</h3><p class="para"></p><dl><dt><span class="term"><i><tt class="parameter">output_callback</tt></i></span></dt><dd><p class="para">An optional<i><tt class="parameter">output_callback</tt></i>function may be specified. This function takes a string as a parameter and should return a string. The function will be called when the output buffer is flushed (sent) or cleaned (with<span class="function"><a href="function.ob-flush.php" class="function">ob_flush()</a></span>,<span class="function"><a href="function.ob-clean.php" class="function">ob_clean()</a></span>or similar function) or when the output buffer is flushed to the browser at the end of the request. When<i><tt class="parameter">output_callback</tt></i>is called, it will receive the contents of the output buffer as its parameter and is expected to return a new output buffer as a result, which will be sent to the browser. If the<i><tt class="parameter">output_callback</tt></i>is not a callable function, this function will return<b><tt>FALSE</tt></b>.</p><p class="para">If the callback function has two parameters, the second parameter is filled with a bit-field consisting of<b><tt>PHP_OUTPUT_HANDLER_START</tt></b>,<b><tt>PHP_OUTPUT_HANDLER_CONT</tt></b>and<b><tt>PHP_OUTPUT_HANDLER_END</tt></b>.</p><p class="para">If<i><tt class="parameter">output_callback</tt></i>returns<b><tt>FALSE</tt></b>original input is sent to the browser.</p><p class="para">The<i><tt class="parameter">output_callback</tt></i>parameter may be bypassed by passing a<b><tt>NULL</tt></b>value.</p><p class="para"><span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span>,<span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>,<span class="function"><a href="function.ob-clean.php" class="function">ob_clean()</a></span>,<span class="function"><a href="function.ob-flush.php" class="function">ob_flush()</a></span>and<span class="function"><b>ob_start()</b></span>may not be called from a callback function. If you call them from callback function, the behavior is undefined. If you would like to delete the contents of a buffer, return &quot;&quot; (a null string) from callback function. You can&#039;t even call functions using the output buffering functions like<i>print_r($expression, true)</i>or<i>highlight_file($filename, true)</i>from a callback function.</p><blockquote><p><b class="note">Note</b>:</p><p class="para">In PHP 4.0.4,<span class="function"><a href="function.ob-gzhandler.php" class="function">ob_gzhandler()</a></span>was introduced to facilitate sending gz-encoded data to web browsers that support compressed web pages.<span class="function"><a href="function.ob-gzhandler.php" class="function">ob_gzhandler()</a></span>determines what type of content encoding the browser will accept and will return its output accordingly.</p></blockquote></dd><dt><span class="term"><i><tt class="parameter">chunk_size</tt></i></span></dt><dd><p class="para">If the optional parameter<i><tt class="parameter">chunk_size</tt></i>is passed, the buffer will be flushed after any output call which causes the buffer&#039;s length to equal or exceed<i><tt class="parameter">chunk_size</tt></i>. Default value 0 means that the function is called only in the end, other special value 1 sets<i><tt class="parameter">chunk_size</tt></i>to 4096.</p></dd><dt><span class="term"><i><tt class="parameter">erase</tt></i></span></dt><dd><p class="para">If the optional parameter<i><tt class="parameter">erase</tt></i>is set to<b><tt>FALSE</tt></b>, the buffer will not be deleted until the script finishes. This causes that flushing and cleaning functions would issue a notice and return<b><tt>FALSE</tt></b>if called.</p></dd></dl></div><div class="refsect1 returnvalues"><h3 class="title">Return Values</h3><p class="para">Returns<b><tt>TRUE</tt></b>on success or<b><tt>FALSE</tt></b>on failure.</p></div><div class="refsect1 changelog"><h3 class="title">Changelog</h3><p class="para"></p><table class="doctable informaltable"><thead valign="middle"><tr valign="middle"><th>Version</th><th>Description</th></tr></thead><tbody valign="middle" class="tbody"><tr valign="middle"><td align="left">4.3.2</td><td align="left">This function was changed to return<b><tt>FALSE</tt></b>in case the passed<i><tt class="parameter">output_callback</tt></i>can not be executed.</td></tr><tr valign="middle"><td align="left">4.2.0</td><td align="left">Added the<i><tt class="parameter">erase</tt></i>parameter.</td></tr></tbody></table></div><div class="refsect1 examples"><h3 class="title">Examples</h3><p class="para"></p><div class="example"><p><b>Example #1 User defined callback function example</b></p><div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br></br><br></br></span><span style="color: #007700">function&nbsp;</span><span style="color: #0000BB">callback</span><span style="color: #007700">(</span><span style="color: #0000BB">$buffer</span><span style="color: #007700">)<br></br>{<br></br>&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;replace&nbsp;all&nbsp;the&nbsp;apples&nbsp;with&nbsp;oranges<br></br>&nbsp;&nbsp;</span><span style="color: #007700">return&nbsp;(</span><span style="color: #0000BB">str_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">"apples"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"oranges"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$buffer</span><span style="color: #007700">));<br></br>']; ?><br></br><br></br></span><span style="color: #0000BB">ob_start</span><span style="color: #007700">(</span><span style="color: #DD0000">"callback"</span><span style="color: #007700">);<br></br><br></br></span><span style="color: #0000BB">?&gt;<br></br></span>&lt;html&gt;<br></br>&lt;body&gt;<br></br>&lt;p&gt;It's&nbsp;like&nbsp;comparing&nbsp;apples&nbsp;to&nbsp;oranges.&lt;/p&gt;<br></br>&lt;/body&gt;<br></br>&lt;/html&gt;<br></br><span style="color: #0000BB">&lt;?php<br></br><br></br>ob_end_flush</span><span style="color: #007700">();<br></br><br></br></span><span style="color: #0000BB">?&gt;</span></span></code></div></div><div class="example-contents"><p>The above example will output:</p></div><div class="example-contents screen"><div class="cdata"><pre>&lt;html&gt;&lt;body&gt;&lt;p&gt;It&#039;s like comparing oranges to oranges.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</pre></div></div></div></div><div class="refsect1 seealso"><h3 class="title">See Also</h3><p class="para"></p><ul class="simplelist"><li class="member"><span class="function"><a href="function.ob-get-contents.php" class="function" rel="rdfs-seeAlso">ob_get_contents()</a>- Return the contents of the output buffer</span></li><li class="member"><span class="function"><a href="function.ob-end-clean.php" class="function" rel="rdfs-seeAlso">ob_end_clean()</a>- Clean (erase) the output buffer and turn off output buffering</span></li><li class="member"><span class="function"><a href="function.ob-end-flush.php" class="function" rel="rdfs-seeAlso">ob_end_flush()</a>- Flush (send) the output buffer and turn off output buffering</span></li><li class="member"><span class="function"><a href="function.ob-implicit-flush.php" class="function" rel="rdfs-seeAlso">ob_implicit_flush()</a>- Turn implicit flush on/off</span></li><li class="member"><span class="function"><a href="function.ob-gzhandler.php" class="function" rel="rdfs-seeAlso">ob_gzhandler()</a>- ob_start callback function to gzip output buffer</span></li><li class="member"><span class="function"><a href="function.ob-iconv-handler.php" class="function" rel="rdfs-seeAlso">ob_iconv_handler()</a>- Convert character encoding as output buffer handler</span></li><li class="member"><span class="function"><a href="function.mb-output-handler.php" class="function" rel="rdfs-seeAlso">mb_output_handler()</a>- Callback function converts character encoding in output buffer</span></li><li class="member"><span class="function"><a href="function.ob-tidyhandler.php" class="function" rel="rdfs-seeAlso">ob_tidyhandler()</a>- ob_start callback function to repair the buffer</span></li></ul></div></div><br></br><br></br><!-- UdmComment !--><div class="manualnavbar manualnavbar_bottom"><span class="next"><a href="function.output-add-rewrite-var.php">output_add_rewrite_var<img src="/images/caret-r.gif" alt="&gt;" width="11" height="7"/></a></span><span class="prev"><a href="function.ob-list-handlers.php"><img src="/images/caret-l.gif" alt="&lt;" width="11" height="7"/>ob_list_handlers</a></span><hr></hr><span class="lastupdated">Last updated: Fri, 04 Mar 2011</span><div class="langchooser">&nbsp;</div></div><!-- /UdmComment !--><div id="usernotes"><div class="head"><span class="action"><a href="/manual/add-note.php?sect=function.ob-start&amp;redirect=http://ru.php.net/manual/en/function.ob-start.php"><img src="/images/notes-add.gif" alt="add a note" width="13" height="13" class="middle"/></a><small><a href="/manual/add-note.php?sect=function.ob-start&amp;redirect=http://ru.php.net/manual/en/function.ob-start.php">add a note</a></small></span><small>User Contributed Notes</small><strong>ob_start</strong></div><div id="allnotes"><a name="102317"></a><div class="note"><strong class="user">Anonymous</strong><a href="#102317" class="date">08-Feb-2011 03:32</a><div class="text"><div class="phpcode"><code><span class="html">In case you're in for some readable representation for flags, this is a variant as a private class member:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">class</span><span class="default">foo</span><span class="keyword">{<br></br>&nbsp;&nbsp;&nbsp; private function</span><span class="default">getFlagsReadable</span><span class="keyword">(</span><span class="default">$flags</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flagNames</span><span class="keyword">= array(</span><span class="string">'PHP_OUTPUT_HANDLER_START'</span><span class="keyword">,</span><span class="string">'PHP_OUTPUT_HANDLER_CONT'</span><span class="keyword">,</span><span class="string">'PHP_OUTPUT_HANDLER_END'</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$readable</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$flagNames</span><span class="keyword">as</span><span class="default">$flagName</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$flags</span><span class="keyword">&amp;</span><span class="default">constant</span><span class="keyword">(</span><span class="default">$flagName</span><span class="keyword">) )<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$readable</span><span class="keyword">.= (</span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$readable</span><span class="keyword">) ?</span><span class="string">' | '</span><span class="keyword">:</span><span class="string">''</span><span class="keyword">) .</span><span class="default">$flagName<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$readable</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="101082"></a><div class="note"><strong class="user">Chris</strong><a href="#101082" class="date">25-Nov-2010 12:35</a><div class="text"><div class="phpcode"><code><span class="html">Careful with while using functions that change headers of a page; that change will not be undone when ending output buffering.<br></br><br></br>If you for instance have a class that generates an image and sets the appropriate headers, they will still be in place after the end of ob.<br></br><br></br>For instance:<br></br><span class="default">&lt;?php<br></br>&nbsp; ob_start</span><span class="keyword">();<br></br>&nbsp;</span><span class="default">myClass</span><span class="keyword">::</span><span class="default">renderPng</span><span class="keyword">();</span><span class="comment">//header("Content-Type: image/png"); in here<br></br>&nbsp;</span><span class="default">$pngString</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();<br></br>&nbsp;</span><span class="default">ob_end_clean</span><span class="keyword">();<br></br></span><span class="default">?&gt;<br></br></span><br></br>will put the image bytes into $pngString, and set the content type to image/png. Though the image will not be sent to the client, the png header is still in place; if you do html output here, the browser will most likely display "image error, cannot be viewed", at least firefox does.<br></br><br></br>You need to set the correct image type (text/html) manually in this case.</span></code></div></div></div><a name="94741"></a><div class="note"><strong class="user">sonicx</strong><a href="#94741" class="date">21-Nov-2009 02:58</a><div class="text"><div class="phpcode"><code><span class="html">Hey folks,<br></br>as dan already noted, using the ob_gzhandler will make it impossible to get the content-length,<br></br>and thusly will make the download of files a little ugly.<br></br>the client cant show progress as it wont know how large it's targeted download actually is.<br></br>even if you write a custom handler, it seems impossible to set the buffer's size to a global.<br></br>the ob_handler seems to not share a global scope.<br></br>i wrote a small php to solve that problem, by not using the ob_* functions, but rather gzencode manually:<br></br><br></br><span class="default">&lt;?php<br></br>&nbsp;&nbsp;&nbsp; $file</span><span class="keyword">=</span><span class="default">$_REQUEST</span><span class="keyword">[</span><span class="string">"file"</span><span class="keyword">] or die(</span><span class="string">"Please specify the 'file' parameter."</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$allowedExtensions</span><span class="keyword">= array(<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">"jpg"</span><span class="keyword">=&gt;</span><span class="string">"image"</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">"png"</span><span class="keyword">=&gt;</span><span class="string">"image"</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">"gif"</span><span class="keyword">=&gt;</span><span class="string">"image"<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$path</span><span class="keyword">=</span><span class="default">pathinfo</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; if(!</span><span class="default">in_array</span><span class="keyword">(</span><span class="default">strtolower</span><span class="keyword">(</span><span class="default">$path</span><span class="keyword">[</span><span class="string">"extension"</span><span class="keyword">]),</span><span class="default">array_keys</span><span class="keyword">(</span><span class="default">$allowedExtensions</span><span class="keyword">))) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">"HTTP/1.0 403 Access denied"</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; die(</span><span class="string">"403&lt;br/&gt;You dont have access to that file, wether it exists or not."</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$pack</span><span class="keyword">=</span><span class="default">true</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; if(!empty(</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"HTTP_ACCEPT_ENCODING"</span><span class="keyword">]) &amp;&amp;</span><span class="default">strpos</span><span class="keyword">(</span><span class="string">"gzip"</span><span class="keyword">,</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"HTTP_ACCEPT_ENCODING"</span><span class="keyword">]) ===</span><span class="default">NULL</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$pack</span><span class="keyword">=</span><span class="default">false</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; if(!</span><span class="default">is_file</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">) || !</span><span class="default">is_readable</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">)) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">"HTTP/1.0 404 Not Found"</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; die(</span><span class="string">"404&lt;br/&gt;The file you are looking for is not available."</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">file_get_contents</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; if(</span><span class="default">$pack</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">"Content-Encoding: gzip"</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">gzencode</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">,</span><span class="default">9</span><span class="keyword">,</span><span class="default">true</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$length</span><span class="keyword">=</span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">"Content-Type:</span><span class="keyword">{</span><span class="default">$allowedExtensions</span><span class="keyword">[</span><span class="default">$path</span><span class="keyword">[</span><span class="string">"extension"</span><span class="keyword">]]']; ?></span><span class="string">/</span><span class="keyword">{</span><span class="default">$path</span><span class="keyword">[</span><span class="string">"extension"</span><span class="keyword">]']; ?></span><span class="string">"</span><span class="keyword">);&nbsp; &nbsp;<br></br>&nbsp;&nbsp; &nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">"Content-Length: "</span><span class="keyword">.</span><span class="default">$length</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; die(</span><span class="default">$buffer</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>this will proxy images to a client, gzipping them at the highest compression-level.<br></br>to save the compression's overhead one could cache compressed outputs.</span></code></div></div></div><a name="94193"></a><div class="note"><strong class="user">Bitwise</strong><a href="#94193" class="date">21-Oct-2009 07:41</a><div class="text"><div class="phpcode"><code><span class="html">There is no start flag problem. One just has to notice that the second parameter is not a mode but consists of bitwise-OR'ed flags.<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">function</span><span class="default">ob_handler</span><span class="keyword">(</span><span class="default">$string</span><span class="keyword">,</span><span class="default">$flags</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; static</span><span class="default">$input</span><span class="keyword">= array();<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$flags</span><span class="keyword">&amp;</span><span class="default">PHP_OUTPUT_HANDLER_START</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flags_sent</span><span class="keyword">[] =</span><span class="string">"PHP_OUTPUT_HANDLER_START"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$flags</span><span class="keyword">&amp;</span><span class="default">PHP_OUTPUT_HANDLER_CONT</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flags_sent</span><span class="keyword">[] =</span><span class="string">"PHP_OUTPUT_HANDLER_CONT"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$flags</span><span class="keyword">&amp;</span><span class="default">PHP_OUTPUT_HANDLER_END</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flags_sent</span><span class="keyword">[] =</span><span class="string">"PHP_OUTPUT_HANDLER_END"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$input</span><span class="keyword">[] =</span><span class="default">implode</span><span class="keyword">(</span><span class="string">' | '</span><span class="keyword">,</span><span class="default">$flags_sent</span><span class="keyword">) .</span><span class="string">" (</span><span class="default">$flags</span><span class="string">):</span><span class="default">$string</span><span class="string">&lt;br /&gt;"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$output&nbsp;</span><span class="keyword">=</span><span class="string">"</span><span class="default">$string</span><span class="string">&lt;br /&gt;"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$flags</span><span class="keyword">&amp;</span><span class="default">PHP_OUTPUT_HANDLER_END</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$output</span><span class="keyword">.=</span><span class="string">'&lt;br /&gt;'</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$input</span><span class="keyword">as</span><span class="default">$k</span><span class="keyword">=&gt;</span><span class="default">$v</span><span class="keyword">)</span><span class="default">$output</span><span class="keyword">.=</span><span class="string">"</span><span class="default">$k</span><span class="string">:</span><span class="default">$v</span><span class="string">"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$output</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">'ob_handler'</span><span class="keyword">);<br></br><br></br>echo</span><span class="string">'flush'</span><span class="keyword">;<br></br></span><span class="default">ob_flush</span><span class="keyword">();<br></br><br></br>echo</span><span class="string">'flush 2'</span><span class="keyword">;<br></br></span><span class="default">ob_flush</span><span class="keyword">();<br></br><br></br>echo</span><span class="string">'clean'</span><span class="keyword">;<br></br></span><span class="default">ob_clean</span><span class="keyword">();<br></br><br></br>echo</span><span class="string">'flush 3'</span><span class="keyword">;<br></br></span><span class="default">ob_flush</span><span class="keyword">();<br></br><br></br>echo</span><span class="string">'end flush'</span><span class="keyword">;<br></br></span><span class="default">ob_end_flush</span><span class="keyword">();<br></br></span><span class="default">?&gt;<br></br></span><br></br>flush<br></br>flush 2<br></br>flush 3<br></br>end flush<br></br><br></br>0: PHP_OUTPUT_HANDLER_START | PHP_OUTPUT_HANDLER_CONT (3): flush<br></br>1: PHP_OUTPUT_HANDLER_CONT (2): flush 2<br></br>2: PHP_OUTPUT_HANDLER_CONT (2): clean<br></br>3: PHP_OUTPUT_HANDLER_CONT (2): flush 3<br></br>4: PHP_OUTPUT_HANDLER_END (4): end flush</span></code></div></div></div><a name="93633"></a><div class="note"><strong class="user">clancy hood at gmail dot com</strong><a href="#93633" class="date">20-Sep-2009 12:31</a><div class="text"><div class="phpcode"><code><span class="html">With ob callback: note that the second parameter sent to your method won't help you differentiate between flush calls and calls to ob_clean, but the buffer contents is sent in both cases, so you end up parsing data that isn't going to be used. Also, note that the constant PHP_OUTPUT_HANDLER_START is never actually sent, rather the integer "3" turns up on first flush:<br></br><span class="default">&lt;?php<br></br><br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">function</span><span class="default">ob_handler</span><span class="keyword">(</span><span class="default">$string</span><span class="keyword">,</span><span class="default">$flag</span><span class="keyword">){<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; static</span><span class="default">$input</span><span class="keyword">= array();<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$done</span><span class="keyword">=</span><span class="default">false</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; switch(</span><span class="default">$flag</span><span class="keyword">){<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case</span><span class="default">PHP_OUTPUT_HANDLER_START</span><span class="keyword">:&nbsp; &nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flag_sent</span><span class="keyword">=</span><span class="string">"PHP_OUTPUT_HANDLER_START (</span><span class="default">$flag</span><span class="string">)"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case</span><span class="default">PHP_OUTPUT_HANDLER_CONT</span><span class="keyword">:<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flag_sent</span><span class="keyword">=</span><span class="string">"PHP_OUTPUT_HANDLER_CONT (</span><span class="default">$flag</span><span class="string">)"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; case</span><span class="default">PHP_OUTPUT_HANDLER_END</span><span class="keyword">:<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$done</span><span class="keyword">=</span><span class="default">true</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flag_sent</span><span class="keyword">=</span><span class="string">"PHP_OUTPUT_HANDLER_END (</span><span class="default">$flag</span><span class="string">)"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; default:<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$flag_sent</span><span class="keyword">=</span><span class="string">"Flag is not a constant (</span><span class="default">$flag</span><span class="string">)"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$input</span><span class="keyword">[] =</span><span class="string">"</span><span class="default">$flag_sent</span><span class="string">:</span><span class="default">$string</span><span class="string">&lt;br /&gt;"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$output</span><span class="keyword">=</span><span class="string">"</span><span class="default">$string</span><span class="string">&lt;br /&gt;"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(!</span><span class="default">$done</span><span class="keyword">) return</span><span class="default">$output</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">// print_r($input, 1) causes an error and var_export just doesn't work<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$output</span><span class="keyword">.=</span><span class="string">'&lt;br /&gt;'</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; foreach(</span><span class="default">$input</span><span class="keyword">as</span><span class="default">$k</span><span class="keyword">=&gt;</span><span class="default">$v</span><span class="keyword">)</span><span class="default">$output</span><span class="keyword">.=</span><span class="string">"</span><span class="default">$k</span><span class="string">:</span><span class="default">$v</span><span class="string">"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$output</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br><br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">'ob_handler'</span><span class="keyword">);<br></br><br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="string">'flush'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_flush</span><span class="keyword">();<br></br><br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="string">'flush 2'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_flush</span><span class="keyword">();<br></br><br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="string">'clean'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_clean</span><span class="keyword">();<br></br><br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="string">'flush 3'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_flush</span><span class="keyword">();<br></br><br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="string">'end flush'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_end_flush</span><span class="keyword">();<br></br></span><span class="default">?&gt;<br></br></span> <br></br>flush<br></br>flush 2<br></br>flush 3<br></br>end flush<br></br><br></br>0: Flag is not a constant (3): flush<br></br>1: PHP_OUTPUT_HANDLER_CONT (2): flush 2<br></br>2: PHP_OUTPUT_HANDLER_CONT (2): clean<br></br>3: PHP_OUTPUT_HANDLER_CONT (2): flush 3<br></br>4: PHP_OUTPUT_HANDLER_END (4): end flush<br></br><br></br>I suppose the START flag problem *may* be a bug but I'm not able to upgrade before reporting since I must have the same version as my server (I'm on PHP 5.2.6). If anyone has 5.2.11 or other stable version feel free to test/report as you see fit.</span></code></div></div></div><a name="91963"></a><div class="note"><strong class="user">mariusads at helpedia dot com</strong><a href="#91963" class="date">02-Jul-2009 10:02</a><div class="text"><div class="phpcode"><code><span class="html">Make sure the editor you use does not add the UTF8/UTF16 BOM at the start of the scripts if you want to use ob_start("ob_gzhandler");<br></br><br></br>If those three characters are present, browsers like Firefox won't be able to decode the pages and will report:<br></br><br></br>Content Encoding Error<br></br><br></br>The page you are trying to view cannot be shown because it uses an invalid or unsupported form of compression.<br></br><br></br>The page you are trying to view cannot be shown because it uses an invalid or unsupported form of compression.<br></br><br></br>Google Chrome will simply report "Error 2 (net::ERR_FAILED): Unknown error."<br></br><br></br>With the ob_start command commented out, the page is successfully load and the browser will usually detect the BOM and not show it on the page, so everything's hard to debug.</span></code></div></div></div><a name="90891"></a><div class="note"><strong class="user">Hudson</strong><a href="#90891" class="date">14-May-2009 09:16</a><div class="text"><div class="phpcode"><code><span class="html">Hi,<br></br>Just wanted to share the problem I had with a fresh installation of Windows Server 2008 using IIS7 with PHP5.2.9-2 (windows MSI installer). Could also be applicable to earlier PHP builds on that platform. It was installed as "IIS fastCGI". I've not really used windows server until a recent project came up and came across a really annoying issue with output buffering. No alteration of php.ini was required.<br></br><br></br>As you know, OB can be useful for user feedback e.g. timer or % complete effect.<br></br><br></br>The problem:<br></br>Everything installed perfectly (using binary mods as well). Scripts all ready in test rig i.e. "default website" folder on IIS. They worked as normal except for output buffering - nothing worked. The browser wouldn't flush anything until script execution had ceased. By browser I refer to all common (IE, Firefox, Opera, Safari). Even installing latest build Apache, bizarrely, (in case it was an IIS issue) yielded the same problem.<br></br><br></br>Example:<br></br><br></br><span class="default">&lt;?php<br></br>ob_start</span><span class="keyword">();&nbsp;</span><span class="comment">// Start output buffer (if not enabled in php.ini)<br></br></span><span class="keyword">for(</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">10</span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">++)<br></br>{<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="default">$i</span><span class="keyword">,</span><span class="string">' '</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_flush</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">flush</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">sleep</span><span class="keyword">(</span><span class="default">1</span><span class="keyword">);<br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>Expected: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 appearing incrementally every second in the browser.<br></br><br></br>Result: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 at once AFTER ten seconds.<br></br><br></br>I just couldn't get output buffering to work.<br></br><br></br>The Solution (requires admin rights):<br></br>Go to your server system drive e.g. c:\ and do the following...<br></br><br></br>C: &gt; Windows &gt; System32 &gt; inetsrv &gt; Config &gt; applicationHost.Config<br></br><br></br>Go to the bottom of the page or look for your website e.g. &lt;location path="Default Web Site"&gt; Default could be whatever your server is.<br></br><br></br>ORIGINAL LINE: &lt;add name="php" path="*.php" verb="*" modules="IsapiModule" scriptProcessor="C:\Program Files\PHP\php5isapi.dll" resourceType="Unspecified"&nbsp; /&gt;<br></br><br></br>CHANGE TO: &lt;add name="php" path="*.php" verb="*" modules="IsapiModule" scriptProcessor="C:\Program Files\PHP\php5isapi.dll" resourceType="Unspecified" responseBufferLimit="0" /&gt;<br></br><br></br>You MUST add responseBufferLimit="0"<br></br><br></br>By default, IIS buffers everything up to a massive 4MB (think it's to do with ASP) only flushing after the script has finished execution. You need to override that and it's not really documented, which is rather annoying.<br></br><br></br>Hooray... You will instantly find that output buffering should now functions as normal.</span></code></div></div></div><a name="90355"></a><div class="note"><strong class="user">robin</strong><a href="#90355" class="date">17-Apr-2009 01:53</a><div class="text"><div class="phpcode"><code><span class="html">When using brame buffer from time to time, you can see this warning<br></br>Warning: session_start() [function.session-start]: Cannot send session cache limiter - headers already sent<br></br>One of the many reasons may be in bad encoding of document. My experience, the document had header of utf-8 encoding but in fact it was win1252. After reconding to the utf-8 warning has disapeard.</span></code></div></div></div><a name="88212"></a><div class="note"><strong class="user">ozana at omdesign dot cz</strong><a href="#88212" class="date">15-Jan-2009 04:54</a><div class="text"><div class="phpcode"><code><span class="html">Simple cache system for HTML:<br></br><br></br><span class="default">&lt;?php<br></br>$cacheFile</span><span class="keyword">=</span><span class="string">'cache.html'</span><span class="keyword">;<br></br><br></br>if ( (</span><span class="default">file_exists</span><span class="keyword">(</span><span class="default">$cacheFile</span><span class="keyword">)) &amp;&amp; ((</span><span class="default">fileatime</span><span class="keyword">(</span><span class="default">$cacheFile</span><span class="keyword">) +</span><span class="default">600</span><span class="keyword">) &gt;</span><span class="default">time</span><span class="keyword">()) )<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$content</span><span class="keyword">=</span><span class="default">file_get_contents</span><span class="keyword">(</span><span class="default">$cacheFile</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="default">$content</span><span class="keyword">;<br></br>']; ?> else<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// write content<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">echo</span><span class="string">'&lt;h1&gt;Hello world to cache&lt;/h1&gt;'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$content</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_end_clean</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">file_put_contents</span><span class="keyword">(</span><span class="default">$cacheFile</span><span class="keyword">,</span><span class="default">$content</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="default">$content</span><span class="keyword">;<br></br>']; ?><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="87895"></a><div class="note"><strong class="user">cj at ceejayoz dot com</strong><a href="#87895" class="date">29-Dec-2008 04:45</a><div class="text"><div class="phpcode"><code><span class="html">Note that since PHP 5.1.x, all objects have their destructors called before the output buffer callback function executes. Thus, globalised objects will not be available as expected in the function.<br></br><br></br>This is stated to be intended behaviour, per<a href="http://bugs.php.net/bug.php?id=40104" rel="nofollow" target="_blank">http://bugs.php.net/bug.php?id=40104</a></span></code></div></div></div><a name="85823"></a><div class="note"><strong class="user">codextasy at gmail dot com</strong><a href="#85823" class="date">19-Sep-2008 08:26</a><div class="text"><div class="phpcode"><code><span class="html">There is a difference between the documentation and real callback functions invocation.<br></br>Manual says: "The function will be called when ob_end_flush() is called, or when the output buffer is flushed to the browser at the end of the request."<br></br><br></br>Actually, the callback function, once set by ob_start(), will be called regardless.<br></br>Here are the functions that invoke callback function immediately:<br></br>ob_clean<br></br>ob_end_clean<br></br>ob_end_flush<br></br>ob_flush<br></br>ob_get_clean<br></br><br></br>BUT only two of them return the result returned by the callback (ob_end_flush, ob_flush), other functions discard it.<br></br><br></br>At the end of the request, even if none of the functions listed above is called, the callback will be called anyway, and its result will be returned to the browser (well, at least this is corresponding to the manual).<br></br><br></br>There is one more trick:<br></br>If you set callback function with chunk_size &gt; 1, callback function will be called each time output buffer is equal or exceeds chunk_size and its result will be output to the browser, even if you call any of ob_clean(), ob_end_clean(), ob_get_clean() later, so be aware of this fact.</span></code></div></div></div><a name="84102"></a><div class="note"><strong class="user">fordiman at gmail dot com</strong><a href="#84102" class="date">27-Jun-2008 04:35</a><div class="text"><div class="phpcode"><code><span class="html">Here's a nifty function I use daily.&nbsp; Essentially: include a PHP file - but render its output to a variable, rather than to the buffer.&nbsp; It's also set up to load the script with a variable set, and automagically loads globals into the script's namespace, making it an effective templating scheme.&nbsp; It also has error handling, so that you're not flying blind when using output buffering.<br></br><br></br><span class="default">&lt;?php<br></br>$GLOBALS</span><span class="keyword">[</span><span class="string">'BufferedErrors'</span><span class="keyword">]=Array();<br></br>function</span><span class="default">errorParse</span><span class="keyword">(</span><span class="default">$errno</span><span class="keyword">,</span><span class="default">$errstr</span><span class="keyword">,</span><span class="default">$errfile</span><span class="keyword">,</span><span class="default">$errline</span><span class="keyword">,</span><span class="default">$errcontext</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$errorTypes</span><span class="keyword">= Array(<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_ERROR</span><span class="keyword">=&gt;</span><span class="string">'Fatal Error'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_WARNING</span><span class="keyword">=&gt;</span><span class="string">'Warning'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_PARSE</span><span class="keyword">=&gt;</span><span class="string">'Parse Error'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_NOTICE</span><span class="keyword">=&gt;</span><span class="string">'Notice'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_CORE_ERROR</span><span class="keyword">=&gt;</span><span class="string">'Fatal Core Error'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_CORE_WARNING</span><span class="keyword">=&gt;</span><span class="string">'Core Warning'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_COMPILE_ERROR</span><span class="keyword">=&gt;</span><span class="string">'Compilation Error'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_COMPILE_WARNING</span><span class="keyword">=&gt;</span><span class="string">'Compilation Warning'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_USER_ERROR</span><span class="keyword">=&gt;</span><span class="string">'Triggered Error'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_USER_WARNING</span><span class="keyword">=&gt;</span><span class="string">'Triggered Warning'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_USER_NOTICE</span><span class="keyword">=&gt;</span><span class="string">'Triggered Notice'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_STRICT</span><span class="keyword">=&gt;</span><span class="string">'Deprecation Notice'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">E_RECOVERABLE_ERROR</span><span class="keyword">=&gt;</span><span class="string">'Catchable Fatal Error'<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=(object)Array(<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'number'</span><span class="keyword">=&gt;</span><span class="default">$errno</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'message'</span><span class="keyword">=&gt;</span><span class="default">$errstr</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'file'</span><span class="keyword">=&gt;</span><span class="default">$errfile</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'line'</span><span class="keyword">=&gt;</span><span class="default">$errline</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'context'</span><span class="keyword">=&gt;</span><span class="default">$errcontext</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'type'</span><span class="keyword">=&gt;</span><span class="default">$errorTypes</span><span class="keyword">[</span><span class="default">$errno</span><span class="keyword">]<br></br>&nbsp;&nbsp;&nbsp; );<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$GLOBALS</span><span class="keyword">[</span><span class="string">'BufferedErrors'</span><span class="keyword">][]=</span><span class="default">$ret</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">false</span><span class="keyword">;<br></br>']; ?><br></br>function</span><span class="default">parse</span><span class="keyword">(</span><span class="default">$fileToInclude</span><span class="keyword">,</span><span class="default">$argumentsToFile</span><span class="keyword">=</span><span class="default">false</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$bufferedErrorStack</span><span class="keyword">=</span><span class="default">$GLOBALS</span><span class="keyword">[</span><span class="string">'BufferedErrors'</span><span class="keyword">];<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">set_error_handler</span><span class="keyword">(</span><span class="string">'errorParse'</span><span class="keyword">,</span><span class="default">error_reporting</span><span class="keyword">());<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$GLOBALS</span><span class="keyword">[</span><span class="string">'BufferedErrors'</span><span class="keyword">]=Array();<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; if (!</span><span class="default">file_exists</span><span class="keyword">(</span><span class="default">$fileToInclude</span><span class="keyword">))<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="string">''</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; if (</span><span class="default">$argumentsToFile</span><span class="keyword">===</span><span class="default">false</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$argumentsToFile</span><span class="keyword">= Array();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$argumentsToFile</span><span class="keyword">=</span><span class="default">array_merge</span><span class="keyword">(</span><span class="default">$GLOBALS</span><span class="keyword">,</span><span class="default">$argumentsToFile</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; foreach (</span><span class="default">$argumentsToFile</span><span class="keyword">as</span><span class="default">$variableName</span><span class="keyword">=&gt;</span><span class="default">$variableValue</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $</span><span class="default">$variableName</span><span class="keyword">=</span><span class="default">$variableValue</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp; include(</span><span class="default">$fileToInclude</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_end_clean</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">restore_error_handler</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$errors</span><span class="keyword">=</span><span class="default">$GLOBALS</span><span class="keyword">[</span><span class="string">'BufferedErrors'</span><span class="keyword">];<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$GLOBALS</span><span class="keyword">[</span><span class="string">'BufferedErrors'</span><span class="keyword">] =</span><span class="default">$bufferedErrorStack</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; if (</span><span class="default">count</span><span class="keyword">(</span><span class="default">$errors</span><span class="keyword">)&gt;</span><span class="default"></span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">.=</span><span class="string">'&lt;ul class="error"&gt;'</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; foreach (</span><span class="default">$errors</span><span class="keyword">as</span><span class="default">$error</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">.=<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;li&gt;'</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;b&gt;'</span><span class="keyword">.</span><span class="default">$error</span><span class="keyword">-&gt;</span><span class="default">type</span><span class="keyword">.</span><span class="string">'&lt;/b&gt;: '</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$error</span><span class="keyword">-&gt;</span><span class="default">message</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;blockquote&gt;'</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;i&gt;file&lt;/i&gt;: '</span><span class="keyword">.</span><span class="default">$error</span><span class="keyword">-&gt;</span><span class="default">file</span><span class="keyword">.</span><span class="string">'&lt;br /&gt;'</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;i&gt;line&lt;/i&gt;: '</span><span class="keyword">.</span><span class="default">$error</span><span class="keyword">-&gt;</span><span class="default">line</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;/blockquote&gt;'</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;/li&gt;'</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$ret</span><span class="keyword">.=</span><span class="string">'&lt;/ul&gt;'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$ret</span><span class="keyword">;<br></br>']; ?></span></span></code></div></div></div><a name="82782"></a><div class="note"><strong class="user">petethebloke at gmail dot com</strong><a href="#82782" class="date">25-Apr-2008 12:45</a><div class="text"><div class="phpcode"><code><span class="html">I was seriously stuck trying to get marketing emails into a site so that the designer could edit them in Dreamweaver while my app could dynamically write and send them to customers. Then I discovered that this works - I barely believed how clever PHP could be! Hope this helps someone else.<br></br><span class="default">&lt;?php<br></br></span><span class="keyword">class</span><span class="default">marketing_email</span><span class="keyword">{<br></br>&nbsp;&nbsp;&nbsp; function</span><span class="default">marketing_email</span><span class="keyword">(</span><span class="default">$customer_id</span><span class="keyword">){<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">//---stuff to get customer details from DB-------<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; //----stuff---<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; //I'm going to put 'newpart-' at the beginning and 'a' at the end of the separator string<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; //I find that the 'a' is more reliable for a line end when it arrives at the client computer<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$random_hash</span><span class="keyword">=</span><span class="default">md5</span><span class="keyword">(</span><span class="default">date</span><span class="keyword">(</span><span class="string">'r'</span><span class="keyword">,</span><span class="default">time</span><span class="keyword">()));<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">();</span><span class="comment">//Turn on output buffering<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">?&gt;<br></br></span>--newpart-<span class="default">&lt;?php</span><span class="keyword">echo</span><span class="default">$random_hash</span><span class="keyword">;</span><span class="default">?&gt;</span>a<br></br>Content-Type: text/plain; charset="iso-8859-1"<br></br>Content-Transfer-Encoding: 7bit<br></br><br></br>Dear<span class="default">&lt;?php</span><span class="keyword">echo</span><span class="default">$customer_name ?&gt;</span><br></br>Your New special offer Blah Blah<br></br><br></br>--newpart-<span class="default">&lt;?php</span><span class="keyword">echo</span><span class="default">$random_hash</span><span class="keyword">;</span><span class="default">?&gt;</span>a<br></br>Content-Type: text/html; charset="iso-8859-1"<br></br>Content-Transfer-Encoding: 7bit<br></br><br></br>&lt;head&gt;<br></br>&lt;style type="text/css"&gt;<br></br>&lt;!--<br></br>p {<br></br>font-family: Verdana, Arial, Helvetica, sans-serif;<br></br>etc etc<br></br>']; ?><br></br>--&gt;<br></br>&lt;/style&gt;<br></br>&lt;title&gt;Offer&lt;/title&gt;<br></br>&lt;/head&gt;<br></br>&lt;body&gt;<br></br>Blah Blah Blah<br></br>&lt;/body&gt;<br></br><br></br>--newpart-<span class="default">&lt;?php</span><span class="keyword">echo</span><span class="default">$random_hash</span><span class="keyword">;</span><span class="default">?&gt;</span>a--<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<span class="default">&lt;?php<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; $pagecontent</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_end_clean</span><span class="keyword">();<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">//define the headers we want passed. Note that they are separated with \r\n<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$mail_headers</span><span class="keyword">=</span><span class="string">"MIME-Version: 1.0\r\nFrom: admin@domain.co.uk\r\nReply-To: admin@domain.co.uk"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="comment">//add boundary string and mime type specification<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$mail_headers</span><span class="keyword">.=</span><span class="string">"\r\nContent-Type: multipart/alternative;\r\n\tboundary=\"newpart-"</span><span class="keyword">.</span><span class="default">$random_hash</span><span class="keyword">.</span><span class="string">"a\""</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$to</span><span class="keyword">=</span><span class="default">$customer_email</span><span class="keyword">;<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if(</span><span class="default">mail</span><span class="keyword">(</span><span class="default">$to</span><span class="keyword">,</span><span class="string">"Offer"</span><span class="keyword">,</span><span class="default">$pagecontent</span><span class="keyword">,</span><span class="default">$mail_headers</span><span class="keyword">)){<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">TRUE</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?>else{<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">FALSE</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>']; ?></span><span class="default">?&gt;</span></span></code></div></div></div><a name="82557"></a><div class="note"><strong class="user">Scott</strong><a href="#82557" class="date">16-Apr-2008 12:15</a><div class="text"><div class="phpcode"><code><span class="html">Hello,<br></br><br></br>I wrote a pretty simple, yet very effective page caching script using output buffering.<br></br><br></br>Just one of the uses for such a collection of functions.<br></br><br></br><a href="http://www.coderprofile.com/source-code/170/simple-page-caching" rel="nofollow" target="_blank">http://www.coderprofile.com/source-code/170/simple-page-caching</a><br></br><br></br>Kind regards,<br></br>Scott</span></code></div></div></div><a name="82356"></a><div class="note"><strong class="user">coldshine at gmail dot com</strong><a href="#82356" class="date">07-Apr-2008 06:52</a><div class="text"><div class="phpcode"><code><span class="html">Referring to dan at roteloftet dot com's comment:<br></br><br></br>RFC 2616 (HTTP) specifies a "transparent" Content-Encoding, "identity" (§ 3.5), that nicely suits what you tried to do with the (invalid) "None". So this equally working, and it's also RFC-compliant:<br></br><br></br><span class="default">&lt;?php<br></br>header</span><span class="keyword">(</span><span class="string">'Content-Encoding: identity'</span><span class="keyword">,</span><span class="default">true</span><span class="keyword">);<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="81667"></a><div class="note"><strong class="user">dan at roteloftet dot com</strong><a href="#81667" class="date">09-Mar-2008 10:19</a><div class="text"><div class="phpcode"><code><span class="html">Some web hosting servers (mine do, at least) have in their php.ini the following setting:<br></br>output_handler = ob_gzhandler<br></br><br></br>This proved problematic for php-scripts which returns an image or a binary file in general, since there is no way to determine the content length of the compressed file.<br></br><br></br>Since I spent a lot of time scouring the net searching for a work-around (.htaccess-modifications were out of the picture for various reasons), I found this to work nicely to cancel out the ob_gzhandler specified in the php.ini:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">while (</span><span class="default">ob_get_level</span><span class="keyword">())<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_end_clean</span><span class="keyword">();<br></br></span><span class="default">header</span><span class="keyword">(</span><span class="string">"Content-Encoding: None"</span><span class="keyword">,</span><span class="default">true</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>Put this at the top of the script before anything else is written to the page, and the script result will not be compressed.</span></code></div></div></div><a name="80328"></a><div class="note"><strong class="user">dale3h</strong><a href="#80328" class="date">10-Jan-2008 03:06</a><div class="text"><div class="phpcode"><code><span class="html">Here's a simple way, using register_shutdown_function, to easily maintain your global output filter:<br></br><br></br>File: outputfilter.inc.php<br></br><span class="default">&lt;?php<br></br>&nbsp; initOutputFilter</span><span class="keyword">();<br></br><br></br>&nbsp; function</span><span class="default">initOutputFilter</span><span class="keyword">() {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">'cbOutputFilter'</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">register_shutdown_function</span><span class="keyword">(</span><span class="string">'ob_end_flush'</span><span class="keyword">);<br></br>&nbsp; ']; ?><br></br><br></br>&nbsp; function</span><span class="default">cbOutputFilter</span><span class="keyword">(</span><span class="default">$output</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$search&nbsp;</span><span class="keyword">= array(<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="string">'user@domain.com'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="string">'user2@domain.com'</span><span class="keyword">,<br></br>&nbsp;&nbsp;&nbsp; );<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$replace</span><span class="keyword">= array(<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;img src="/images/nospam001.jpg" border="0" alt="" /&gt;'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;img src="/images/nospam002.jpg" border="0" alt="" /&gt;'</span><span class="keyword">,<br></br>&nbsp;&nbsp;&nbsp; );<br></br><br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">str_replace</span><span class="keyword">(</span><span class="default">$search</span><span class="keyword">,</span><span class="default">$replace</span><span class="keyword">,</span><span class="default">$output</span><span class="keyword">);<br></br>&nbsp; ']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>Just include it in your global file, or in each file you want to filter.<br></br><br></br>This one in particular replaces any occurrence of "user@domain.com" or "user2@domain.com" with an image (that contains each email respectively), preventing spam bots from picking it up.</span></code></div></div></div><a name="80070"></a><div class="note"><strong class="user">Eamon Straughn eamon at gizzle dot co dot uk</strong><a href="#80070" class="date">27-Dec-2007 07:06</a><div class="text"><div class="phpcode"><code><span class="html">In regards to below. The best thing to do is create an error handler that catches all non-fatal errors prior and during your ob_start.<br></br><br></br>works for me all the time. and if there is an error you can format the errors in that script it executed in. From my experience i'm quite sure that would be the most logical choice. wouldn't it? Plus your using objects...Please do think before you can code.<br></br><br></br>Always plan else you'll be working blind. Anyways ob_start wouldn't exit;<br></br><br></br>Just plan ahead and anticipate. It's just like driving a car.. Happy new year.</span></code></div></div></div><a name="78662"></a><div class="note"><strong class="user">Anonymous</strong><a href="#78662" class="date">22-Oct-2007 01:40</a><div class="text"><div class="phpcode"><code><span class="html">As a follow up to my previous post :<br></br>(output seems to go to standard ouptput in command&nbsp; line mode even with the use of output buffering (ob_start) )<br></br><br></br>Setting implicit_flush to false seems to do the trick :<br></br><br></br>&nbsp;&nbsp; ini_set('implicit_flush',false); // (avoids output even with&nbsp; &nbsp; ob_start, in command line mode)<br></br>&nbsp;&nbsp; ob_start();<br></br>&nbsp;&nbsp; include (realpath(dirname(__FILE__))."/".$template);<br></br>&nbsp;&nbsp; $ret_str.=ob_get_contents();<br></br>&nbsp;&nbsp; ob_end_clean();<br></br>&nbsp;&nbsp; ini_set('implicit_flush',true);<br></br><br></br>(See :<br></br>Chapter 43. Using PHP from the command line<br></br>)</span></code></div></div></div><a name="78659"></a><div class="note"><strong class="user">Francois Hill</strong><a href="#78659" class="date">22-Oct-2007 12:42</a><div class="text"><div class="phpcode"><code><span class="html">Following clement dot ayme at st dot com 's remark :<br></br><br></br>In my experience it seems that the output IS buffered, but ALSO sent to the standard output !</span></code></div></div></div><a name="78599"></a><div class="note"><strong class="user">Charlie Farrow</strong><a href="#78599" class="date">18-Oct-2007 04:49</a><div class="text"><div class="phpcode"><code><span class="html">Under certain freak conditions, when an error ocours perfoming an action on an object that cannot be done (either because the object does not exist or the method does not exist) inside of an ob_start() the script will exit and print everything the current function generates before the error, but nothing else, including no error message.<br></br><br></br>I am at a loss to why no error message appears and am trying to get a working example for the developers that is simpler than my whole program!<br></br><br></br>So if you are using ob_start() and you get no output, check your objects.... you have made a mistake on them somewhere. The only trouble is you will not know where as there is no error!!</span></code></div></div></div><a name="77223"></a><div class="note"><strong class="user">Asher Haig (ahaig at ridiculouspower dot com)</strong><a href="#77223" class="date">20-Aug-2007 08:17</a><div class="text"><div class="phpcode"><code><span class="html">When a script ends, all buffered output is flushed (this is not a bug:<a href="http://bugs.php.net/bug.php?id=42334&amp;thanks=4" rel="nofollow" target="_blank">http://bugs.php.net/bug.php?id=42334&amp;thanks=4</a>). What happens when the script throws an error (and thus ends) in the middle of an output buffer? The script spits out everything in the buffer before printing the error!<br></br><br></br>Here is the simplest solution I have been able to find. Put it at the beginning of the error handling function to clear all buffered data and print only the error:<br></br><br></br>$handlers = ob_list_handlers();<br></br>while ( ! empty($handlers) )&nbsp; &nbsp; {<br></br>&nbsp;&nbsp;&nbsp; ob_end_clean();<br></br>&nbsp;&nbsp;&nbsp; $handlers = ob_list_handlers();<br></br>']; ?></span></code></div></div></div><a name="76724"></a><div class="note"><strong class="user">clement dot ayme at st dot com</strong><a href="#76724" class="date">27-Jul-2007 04:51</a><div class="text"><div class="phpcode"><code><span class="html">ob_start() seems not compliant with command-line PHP.<br></br><br></br>just calling the function ahead of your unix-php script and nothing<br></br>happens. The STDOUT stream is not buffered.</span></code></div></div></div><a name="74205"></a><div class="note"><strong class="user">tracey AT archive DOT org</strong><a href="#74205" class="date">29-Mar-2007 09:01</a><div class="text"><div class="phpcode"><code><span class="html">Way to make all stdout and stderr write to a log<br></br>from *inside* a php script.<br></br>You simply need to make sure to call elog() every<br></br>once in awhile to get output.<br></br>It's a nice way to "daemonize" a script w.r.t. its logging.<br></br><br></br>// This allows us to capture all stdout and stderr (and error_log() calls)<br></br>// to this logfile...<br></br>// The "collected output" will be flushed anytime "elog()" is used...<br></br>ini_set("error_log", "/var/log/script.log");<br></br>ob_start();<br></br><br></br>function elog($str)<br></br>{<br></br>&nbsp; // get anything written to stdout or stderr that did *NOT* use elog()<br></br>&nbsp; // and write it now...<br></br>&nbsp; $writeme = ob_get_contents();<br></br>&nbsp; if ($writeme)<br></br>&nbsp; {<br></br>&nbsp;&nbsp;&nbsp; error_log($writeme);<br></br>&nbsp;&nbsp;&nbsp; ob_end_clean();<br></br>&nbsp;&nbsp;&nbsp; ob_start();<br></br>&nbsp; ']; ?><br></br>&nbsp; // now write message this method was called with<br></br>&nbsp; error_log($str);<br></br>']; ?></span></code></div></div></div><a name="73939"></a><div class="note"><strong class="user">joebezucha at tlen dot pl</strong><a href="#73939" class="date">16-Mar-2007 10:05</a><div class="text"><div class="phpcode"><code><span class="html">Hi, I use those functions for stripping unnecessary chars in my output code...because I have JavaScript placed in outpout code so I don't remove \n\r\t but just replace them with single space (it could cause errors in scripts)<br></br>Function stripBufferSkipTextareaTags skips tags Textarea. It's needed to don't loose \n\r when user edit some content...<br></br><br></br>sorry for my english ;)<br></br><br></br><span class="default">&lt;?php<br></br><br></br></span><span class="keyword">function</span><span class="default">stripBufferSkipTextareaTags</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">){<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$poz_current</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$poz_end</span><span class="keyword">=</span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">)-</span><span class="default">1</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$result</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; while (</span><span class="default">$poz_current</span><span class="keyword">&lt;</span><span class="default">$poz_end</span><span class="keyword">){<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$t_poz_start</span><span class="keyword">=</span><span class="default">stripos</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">,</span><span class="string">"&lt;textarea"</span><span class="keyword">,</span><span class="default">$poz_current</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; if (</span><span class="default">$t_poz_start</span><span class="keyword">===</span><span class="default">false</span><span class="keyword">){<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$buffer_part_2strip</span><span class="keyword">=</span><span class="default">substr</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">,</span><span class="default">$poz_current</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$temp</span><span class="keyword">=</span><span class="default">stripBuffer</span><span class="keyword">(</span><span class="default">$buffer_part_2strip</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$result</span><span class="keyword">.=</span><span class="default">$temp</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$poz_current</span><span class="keyword">=</span><span class="default">$poz_end</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; else{<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$buffer_part_2strip</span><span class="keyword">=</span><span class="default">substr</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">,</span><span class="default">$poz_current</span><span class="keyword">,</span><span class="default">$t_poz_start</span><span class="keyword">-</span><span class="default">$poz_current</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$temp</span><span class="keyword">=</span><span class="default">stripBuffer</span><span class="keyword">(</span><span class="default">$buffer_part_2strip</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$result</span><span class="keyword">.=</span><span class="default">$temp</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$t_poz_end</span><span class="keyword">=</span><span class="default">stripos</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">,</span><span class="string">"&lt;/textarea&gt;"</span><span class="keyword">,</span><span class="default">$t_poz_start</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$temp</span><span class="keyword">=</span><span class="default">substr</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">,</span><span class="default">$t_poz_start</span><span class="keyword">,</span><span class="default">$t_poz_end</span><span class="keyword">-</span><span class="default">$t_poz_start</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$result</span><span class="keyword">.=</span><span class="default">$temp</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$poz_current</span><span class="keyword">=</span><span class="default">$t_poz_end</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$result</span><span class="keyword">;<br></br>']; ?><br></br><br></br>function</span><span class="default">stripBuffer</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">){<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// change new lines and tabs to single spaces<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(array(</span><span class="string">"\r\n"</span><span class="keyword">,</span><span class="string">"\r"</span><span class="keyword">,</span><span class="string">"\n"</span><span class="keyword">,</span><span class="string">"\t"</span><span class="keyword">),</span><span class="string">' '</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// multispaces to single...<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">ereg_replace</span><span class="keyword">(</span><span class="string">" {2,']; ?>"</span><span class="keyword">,</span><span class="string">' '</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// remove single spaces between tags<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">"&gt; &lt;"</span><span class="keyword">,</span><span class="string">"&gt;&lt;"</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// remove single spaces around &amp;nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">" &amp;nbsp;"</span><span class="keyword">,</span><span class="string">"&amp;nbsp;"</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">"&amp;nbsp; "</span><span class="keyword">,</span><span class="string">"&amp;nbsp;"</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$buffer</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">"stripBufferSkipTextareaTags"</span><span class="keyword">);<br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="73865"></a><div class="note"><strong class="user">denis at SPAM_WELCOME dot i39 dot ru</strong><a href="#73865" class="date">13-Mar-2007 02:55</a><div class="text"><div class="phpcode"><code><span class="html">This function's behaviour&nbsp; has been changed in php 5.2.0:<br></br><br></br><span class="default">&lt;?<br></br></span><span class="keyword">global</span><span class="default">$AP</span><span class="keyword">;<br></br></span><span class="default">$AP</span><span class="keyword">= new</span><span class="default">ap</span><span class="keyword">;<br></br></span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">"ob_end"</span><span class="keyword">);<br></br><br></br>function</span><span class="default">ob_end</span><span class="keyword">() {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; global</span><span class="default">$AP</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$r</span><span class="keyword">=</span><span class="default">$AP</span><span class="keyword">-&gt;</span><span class="default">test</span><span class="keyword">();<br></br><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$r</span><span class="keyword">;<br></br>']; ?><br></br><br></br>class</span><span class="default">ap</span><span class="keyword">{<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; function</span><span class="default">test</span><span class="keyword">() {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="string">"debug"</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>In older versions it shows: "debug".<br></br>But latest php version causes error: PHP Fatal error: Call to a member function test() on a non-object.<br></br>And this is not a bug:<a href="http://bugs.php.net/bug.php?id=40104" rel="nofollow" target="_blank">http://bugs.php.net/bug.php?id=40104</a></span></code></div></div></div><a name="71953"></a><div class="note"><strong class="user">Tobias Goldkamp</strong><a href="#71953" class="date">25-Dec-2006 11:02</a><div class="text"><div class="phpcode"><code><span class="html">I use this to strip unnecessary characters from HTML output:<br></br><br></br><span class="default">&lt;?php<br></br><br></br></span><span class="keyword">function</span><span class="default">sanitize_output</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$search</span><span class="keyword">= array(<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'/\&gt;[^\S ]+/s'</span><span class="keyword">,</span><span class="comment">//strip whitespaces after tags, except space<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'/[^\S ]+\&lt;/s'</span><span class="keyword">,</span><span class="comment">//strip whitespaces before tags, except space<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'/(\s)+/s'&nbsp;</span><span class="comment">// shorten multiple whitespace sequences<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$replace</span><span class="keyword">= array(<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&gt;'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'&lt;'</span><span class="keyword">,<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="string">'\\1'<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">preg_replace</span><span class="keyword">(</span><span class="default">$search</span><span class="keyword">,</span><span class="default">$replace</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$buffer</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">"sanitize_output"</span><span class="keyword">);<br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="71299"></a><div class="note"><strong class="user">lucky760 at yahoo dot com</strong><a href="#71299" class="date">21-Nov-2006 05:20</a><div class="text"><div class="phpcode"><code><span class="html">Just for simplicity's sake (and because I had to rewrite it for use at<a href="http://www.VideoSift.com" rel="nofollow" target="_blank">http://www.VideoSift.com</a>anyway), here's a very simplified, pre-PHP5 version. Just add one call to dump_css_cache() for each of your CSS files.<br></br><br></br><span class="default">&lt;?php<br></br><br></br>ob_start</span><span class="keyword">(</span><span class="string">'ob_gzhandler'</span><span class="keyword">);<br></br><br></br></span><span class="default">header</span><span class="keyword">(</span><span class="string">'Content-Type: text/css; charset: UTF-8'</span><span class="keyword">);<br></br></span><span class="default">header</span><span class="keyword">(</span><span class="string">'Cache-Control: must-revalidate'</span><span class="keyword">);<br></br><br></br></span><span class="default">$expire_offset</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="comment">// set to a reaonable interval, say 3600 (1 hr)<br></br></span><span class="default">header</span><span class="keyword">(</span><span class="string">'Expires: '</span><span class="keyword">.</span><span class="default">gmdate</span><span class="keyword">(</span><span class="string">'D, d M Y H:i:s'</span><span class="keyword">,</span><span class="default">time</span><span class="keyword">() +</span><span class="default">$expire_offset</span><span class="keyword">) .</span><span class="string">' GMT'</span><span class="keyword">);<br></br><br></br>function</span><span class="default">css_compress</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">) {<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">'!/\*[^*]*\*+([^/][^*]*\*+)*/!'</span><span class="keyword">,</span><span class="string">''</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);</span><span class="comment">// remove comments<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(array(</span><span class="string">"\r\n"</span><span class="keyword">,</span><span class="string">"\r"</span><span class="keyword">,</span><span class="string">"\n"</span><span class="keyword">,</span><span class="string">"\t"</span><span class="keyword">,</span><span class="string">'&nbsp; '</span><span class="keyword">),</span><span class="string">''</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);</span><span class="comment">// remove tabs, spaces, newlines, etc.<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'{ '</span><span class="keyword">,</span><span class="string">'{'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);</span><span class="comment">// remove unnecessary spaces.<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ']; ?>'</span><span class="keyword">,</span><span class="string">'']; ?>'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'; '</span><span class="keyword">,</span><span class="string">';'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">', '</span><span class="keyword">,</span><span class="string">','</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' {'</span><span class="keyword">,</span><span class="string">'{'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'']; ?> '</span><span class="keyword">,</span><span class="string">'']; ?>'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">': '</span><span class="keyword">,</span><span class="string">':'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ,'</span><span class="keyword">,</span><span class="string">','</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ;'</span><span class="keyword">,</span><span class="string">';'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp; return</span><span class="default">$buffer</span><span class="keyword">;<br></br>']; ?><br></br><br></br>function</span><span class="default">dump_css_cache</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">) {<br></br>&nbsp;</span><span class="default">$cwd</span><span class="keyword">=</span><span class="default">getcwd</span><span class="keyword">() .</span><span class="default">DIRECTORY_SEPARATOR</span><span class="keyword">;<br></br><br></br>&nbsp;</span><span class="default">$stat</span><span class="keyword">=</span><span class="default">stat</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">);<br></br>&nbsp;</span><span class="default">$current_cache</span><span class="keyword">=</span><span class="default">$cwd</span><span class="keyword">.</span><span class="string">'.'</span><span class="keyword">.</span><span class="default">$filename</span><span class="keyword">.</span><span class="string">'.'</span><span class="keyword">.</span><span class="default">$stat</span><span class="keyword">[</span><span class="string">'size'</span><span class="keyword">] .</span><span class="string">'-'</span><span class="keyword">.</span><span class="default">$stat</span><span class="keyword">[</span><span class="string">'mtime'</span><span class="keyword">] .</span><span class="string">'.cache'</span><span class="keyword">;<br></br><br></br>&nbsp;</span><span class="comment">// the cache exists - just dump it<br></br>&nbsp;</span><span class="keyword">if (</span><span class="default">is_file</span><span class="keyword">(</span><span class="default">$current_cache</span><span class="keyword">)) {<br></br>&nbsp;&nbsp;&nbsp; include(</span><span class="default">$current_cache</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; return;<br></br>&nbsp; ']; ?><br></br><br></br>&nbsp;</span><span class="comment">// remove any old, lingering caches for this file<br></br>&nbsp;</span><span class="keyword">if (</span><span class="default">$dead_files</span><span class="keyword">=</span><span class="default">glob</span><span class="keyword">(</span><span class="default">$cwd</span><span class="keyword">.</span><span class="string">'.'</span><span class="keyword">.</span><span class="default">$filename</span><span class="keyword">.</span><span class="string">'.*.cache'</span><span class="keyword">,</span><span class="default">GLOB_NOESCAPE</span><span class="keyword">))<br></br>&nbsp;&nbsp;&nbsp; foreach (</span><span class="default">$dead_files</span><span class="keyword">as</span><span class="default">$dead_file</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">unlink</span><span class="keyword">(</span><span class="default">$dead_file</span><span class="keyword">);<br></br>&nbsp;<br></br>&nbsp; if (!</span><span class="default">function_exists</span><span class="keyword">(</span><span class="string">'file_put_contents'</span><span class="keyword">)) {<br></br>&nbsp;&nbsp;&nbsp; function</span><span class="default">file_put_contents</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">,</span><span class="default">$contents</span><span class="keyword">) {<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">$handle</span><span class="keyword">=</span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">,</span><span class="string">'w'</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">fwrite</span><span class="keyword">(</span><span class="default">$handle</span><span class="keyword">,</span><span class="default">$contents</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">fclose</span><span class="keyword">(</span><span class="default">$handle</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp; ']; ?><br></br>&nbsp;<br></br>&nbsp;</span><span class="default">$cache_contents</span><span class="keyword">=</span><span class="default">css_compress</span><span class="keyword">(</span><span class="default">file_get_contents</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">));<br></br>&nbsp;</span><span class="default">file_put_contents</span><span class="keyword">(</span><span class="default">$current_cache</span><span class="keyword">,</span><span class="default">$cache_contents</span><span class="keyword">);<br></br>&nbsp;<br></br>&nbsp; echo</span><span class="default">$cache_contents</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">dump_css_cache</span><span class="keyword">(</span><span class="string">'_general.css'</span><span class="keyword">);<br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="71298"></a><div class="note"><strong class="user">lucky760 at yahoo dot com</strong><a href="#71298" class="date">21-Nov-2006 05:10</a><div class="text"><div class="phpcode"><code><span class="html">In extension to the compress() function posted below, here's a nifty little class that improves the idea a bit. Basically, running that compress() function for all your CSS for every single page load is clearly far less than optimal, especially since the styles will change only infrequently at the very worst.<br></br><br></br>With this class you can simply specify an array of your CSS file names and call dump_style(). The contents of each file are saved in compress()'d form in a cache file that is only recreated when the corresponding source CSS changes.<br></br><br></br>It's intended for PHP5, but will work identically if you just un-OOP everything and possibly define file_put_contents.<br></br><br></br>Enjoy!<br></br><br></br><span class="default">&lt;?php<br></br><br></br>$CSS_FILES</span><span class="keyword">= array(<br></br>&nbsp;</span><span class="string">'_general.css'<br></br></span><span class="keyword">);<br></br><br></br></span><span class="default">$css_cache</span><span class="keyword">= new</span><span class="default">CSSCache</span><span class="keyword">(</span><span class="default">$CSS_FILES</span><span class="keyword">);<br></br></span><span class="default">$css_cache</span><span class="keyword">-&gt;</span><span class="default">dump_style</span><span class="keyword">();<br></br><br></br></span><span class="comment">//<br></br>// class CSSCache<br></br>//<br></br><br></br></span><span class="keyword">class</span><span class="default">CSSCache</span><span class="keyword">{<br></br>&nbsp; private</span><span class="default">$filenames</span><span class="keyword">= array();<br></br>&nbsp; private</span><span class="default">$cwd</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp; public function</span><span class="default">__construct</span><span class="keyword">(</span><span class="default">$i_filename_arr</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp; if (!</span><span class="default">is_array</span><span class="keyword">(</span><span class="default">$i_filename_arr</span><span class="keyword">))<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">$i_filename_arr</span><span class="keyword">= array(</span><span class="default">$i_filename_arr</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">filenames</span><span class="keyword">=</span><span class="default">$i_filename_arr</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">cwd</span><span class="keyword">=</span><span class="default">getcwd</span><span class="keyword">() .</span><span class="default">DIRECTORY_SEPARATOR</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; if (</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">style_changed</span><span class="keyword">())<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">$expire</span><span class="keyword">= -</span><span class="default">72000</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; else<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">$expire</span><span class="keyword">=</span><span class="default">3200</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">'Content-Type: text/css; charset: UTF-8'</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">'Cache-Control: must-revalidate'</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">header</span><span class="keyword">(</span><span class="string">'Expires: '</span><span class="keyword">.</span><span class="default">gmdate</span><span class="keyword">(</span><span class="string">'D, d M Y H:i:s'</span><span class="keyword">,</span><span class="default">time</span><span class="keyword">() +</span><span class="default">$expire</span><span class="keyword">) .</span><span class="string">' GMT'</span><span class="keyword">);<br></br>&nbsp; ']; ?><br></br>&nbsp;<br></br>&nbsp; public function</span><span class="default">dump_style</span><span class="keyword">() {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">'ob_gzhandler'</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; foreach (</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">filenames</span><span class="keyword">as</span><span class="default">$filename</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">dump_cache_contents</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_end_flush</span><span class="keyword">();<br></br>&nbsp; ']; ?><br></br>&nbsp;<br></br>&nbsp;&nbsp;&nbsp; private function</span><span class="default">get_cache_name</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">,</span><span class="default">$wildcard</span><span class="keyword">=</span><span class="default">FALSE</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$stat</span><span class="keyword">=</span><span class="default">stat</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">cwd</span><span class="keyword">.</span><span class="string">'.'</span><span class="keyword">.</span><span class="default">$filename</span><span class="keyword">.</span><span class="string">'.'</span><span class="keyword">.<br></br>&nbsp;&nbsp; &nbsp;&nbsp; (</span><span class="default">$wildcard</span><span class="keyword">?</span><span class="string">'*'</span><span class="keyword">: (</span><span class="default">$stat</span><span class="keyword">[</span><span class="string">'size'</span><span class="keyword">] .</span><span class="string">'-'</span><span class="keyword">.</span><span class="default">$stat</span><span class="keyword">[</span><span class="string">'mtime'</span><span class="keyword">])) .</span><span class="string">'.cache'</span><span class="keyword">;<br></br>&nbsp; ']; ?><br></br>&nbsp;<br></br>&nbsp; private function</span><span class="default">style_changed</span><span class="keyword">() {<br></br>&nbsp;&nbsp;&nbsp; foreach (</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">filenames</span><span class="keyword">as</span><span class="default">$filename</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp;&nbsp; if (!</span><span class="default">is_file</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">get_cache_name</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">)))<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">TRUE</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">FALSE</span><span class="keyword">;<br></br>&nbsp; ']; ?><br></br><br></br>&nbsp; private function</span><span class="default">compress</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">'!/\*[^*]*\*+([^/][^*]*\*+)*/!'</span><span class="keyword">,</span><span class="string">''</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(array(</span><span class="string">"\r\n"</span><span class="keyword">,</span><span class="string">"\r"</span><span class="keyword">,</span><span class="string">"\n"</span><span class="keyword">,</span><span class="string">"\t"</span><span class="keyword">,</span><span class="string">'&nbsp; '</span><span class="keyword">),</span><span class="string">''</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'{ '</span><span class="keyword">,</span><span class="string">'{'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ']; ?>'</span><span class="keyword">,</span><span class="string">'']; ?>'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'; '</span><span class="keyword">,</span><span class="string">';'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">', '</span><span class="keyword">,</span><span class="string">','</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' {'</span><span class="keyword">,</span><span class="string">'{'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'']; ?> '</span><span class="keyword">,</span><span class="string">'']; ?>'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">': '</span><span class="keyword">,</span><span class="string">':'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ,'</span><span class="keyword">,</span><span class="string">','</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ;'</span><span class="keyword">,</span><span class="string">';'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$buffer</span><span class="keyword">;<br></br>&nbsp; ']; ?><br></br>&nbsp;<br></br>&nbsp; private function</span><span class="default">dump_cache_contents</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$current_cache</span><span class="keyword">=</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">get_cache_name</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// the cache exists - just dump it<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">if (</span><span class="default">is_file</span><span class="keyword">(</span><span class="default">$current_cache</span><span class="keyword">)) {<br></br>&nbsp;&nbsp; &nbsp;&nbsp; include(</span><span class="default">$current_cache</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp;&nbsp; return;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// remove any old, lingering caches for this file<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">if (</span><span class="default">$dead_files</span><span class="keyword">=</span><span class="default">glob</span><span class="keyword">(</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">get_cache_name</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">,</span><span class="default">TRUE</span><span class="keyword">),</span><span class="default">GLOB_NOESCAPE</span><span class="keyword">))<br></br>&nbsp;&nbsp; &nbsp;&nbsp; foreach (</span><span class="default">$dead_files</span><span class="keyword">as</span><span class="default">$dead_file</span><span class="keyword">)<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">unlink</span><span class="keyword">(</span><span class="default">$dead_file</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$compressed</span><span class="keyword">=</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">compress</span><span class="keyword">(</span><span class="default">file_get_contents</span><span class="keyword">(</span><span class="default">$filename</span><span class="keyword">));<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">file_put_contents</span><span class="keyword">(</span><span class="default">$current_cache</span><span class="keyword">,</span><span class="default">$compressed</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="default">$compressed</span><span class="keyword">;<br></br>&nbsp; ']; ?><br></br>']; ?><br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="71073"></a><div class="note"><a href="#71073" class="date">10-Nov-2006 06:34</a><div class="text"><div class="phpcode"><code><span class="html">I'm sure some of you more brilliant minds could pare this down some more, but using the method found at fiftyfoureleven.com&nbsp; for compressing, I got my 10090-byte stylesheet down to 3536 bytes and then again down to 2713 bytes, by stripping unecessary characters from the stylesheet. 2 ob_start calls and the CSS file is now 73% smaller. YMMV.<br></br><br></br><span class="default">&lt;?php<br></br>ob_start</span><span class="keyword">(</span><span class="string">"ob_gzhandler"</span><span class="keyword">);<br></br></span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">"compress"</span><span class="keyword">);<br></br></span><span class="default">header</span><span class="keyword">(</span><span class="string">"Content-type: text/css; charset: UTF-8"</span><span class="keyword">);<br></br></span><span class="default">header</span><span class="keyword">(</span><span class="string">"Cache-Control: must-revalidate"</span><span class="keyword">);<br></br></span><span class="default">$off</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="comment"># Set to a reaonable value later, say 3600 (1 hr);<br></br></span><span class="default">$exp</span><span class="keyword">=</span><span class="string">"Expires: "</span><span class="keyword">.</span><span class="default">gmdate</span><span class="keyword">(</span><span class="string">"D, d M Y H:i:s"</span><span class="keyword">,</span><span class="default">time</span><span class="keyword">() +</span><span class="default">$off</span><span class="keyword">) .</span><span class="string">" GMT"</span><span class="keyword">;<br></br></span><span class="default">header</span><span class="keyword">(</span><span class="default">$exp</span><span class="keyword">);<br></br><br></br>function</span><span class="default">compress</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">preg_replace</span><span class="keyword">(</span><span class="string">'!/\*[^*]*\*+([^/][^*]*\*+)*/!'</span><span class="keyword">,</span><span class="string">''</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);</span><span class="comment">// remove comments<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(array(</span><span class="string">"\r\n"</span><span class="keyword">,</span><span class="string">"\r"</span><span class="keyword">,</span><span class="string">"\n"</span><span class="keyword">,</span><span class="string">"\t"</span><span class="keyword">,</span><span class="string">'&nbsp; '</span><span class="keyword">,</span><span class="string">'&nbsp; &nbsp; '</span><span class="keyword">,</span><span class="string">'&nbsp; &nbsp; '</span><span class="keyword">),</span><span class="string">''</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);</span><span class="comment">// remove tabs, spaces, newlines, etc.<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'{ '</span><span class="keyword">,</span><span class="string">'{'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);</span><span class="comment">// remove unnecessary spaces.<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ']; ?>'</span><span class="keyword">,</span><span class="string">'']; ?>'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'; '</span><span class="keyword">,</span><span class="string">';'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">', '</span><span class="keyword">,</span><span class="string">','</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' {'</span><span class="keyword">,</span><span class="string">'{'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">'']; ?> '</span><span class="keyword">,</span><span class="string">'']; ?>'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">': '</span><span class="keyword">,</span><span class="string">':'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ,'</span><span class="keyword">,</span><span class="string">','</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$buffer</span><span class="keyword">=</span><span class="default">str_replace</span><span class="keyword">(</span><span class="string">' ;'</span><span class="keyword">,</span><span class="string">';'</span><span class="keyword">,</span><span class="default">$buffer</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="default">$buffer</span><span class="keyword">;<br></br>']; ?><br></br><br></br>require_once(</span><span class="string">'screen.css'</span><span class="keyword">);<br></br>require_once(</span><span class="string">'layout.css'</span><span class="keyword">);<br></br>require_once(</span><span class="string">'custom.php'</span><span class="keyword">);<br></br>require_once(</span><span class="string">'titles.css'</span><span class="keyword">);<br></br>require_once(</span><span class="string">'bus.css'</span><span class="keyword">);<br></br><br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="71003"></a><div class="note"><strong class="user">feedback at realitymedias dot com</strong><a href="#71003" class="date">07-Nov-2006 11:35</a><div class="text"><div class="phpcode"><code><span class="html">PHP Suggests: Some web servers (e.g. Apache) change the working directory of a script when calling the callback function. You can change it back by doing, for example, the following in the callback function: chdir(dirname($_SERVER['SCRIPT_FILENAME']))<br></br><br></br>The solution provided by PHP, does not function as intended when running PHP as a CGI (on CGI mode (CGI-BUILD (--enable-cgi) and/or CLI)).&nbsp; In such a case, PHP is executed as a CGI-BIN and the web server daemon (e.g. Apache) sees SCRIPT_FILENAME as being the PHPCGI processor, and won't look deeper to find what file the PHPCGI processor is actually running/parsing; therefore the path returned by SCRIPT_FILENAME is wrong (most of the time, containing/ending with "cgi-system/php.cgi").<br></br><br></br>As SCRIPT_FILENAME is the safest way to proceed, but turns to be wrong in this exact situation; PATH_TRANSLATED is the next safe solution one would turn towards since it is populated with a different mechanism.<br></br><br></br>It would be correct to develop in the direction if the script filename itself is contained in the SCRIPT_FILENAME path value, then the SCRIPT_FILENAME content is reported correctly. If it is not, using PATH_TRANSLATED is the next logical choice we can use. The best reference in this case would be PHP_SELF as it is populated by PHP itself. Using SCRIPT_NAME as a reference would be an error as it is affected by the same problem (reports cgi-system and/or php.cgi as well).<br></br><br></br>The following is the revised code and should work on both the non-CGI and the CGI PHP processor types.<br></br><br></br><span class="default">&lt;?php<br></br>chdir</span><span class="keyword">(</span><span class="default">dirname</span><span class="keyword">((</span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"SCRIPT_FILENAME"</span><span class="keyword">],</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"PHP_SELF"</span><span class="keyword">])<br></br>?</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"SCRIPT_FILENAME"</span><span class="keyword">] :</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"PATH_TRANSLATED"</span><span class="keyword">])));<br></br></span><span class="default">?&gt;<br></br></span><br></br>Or the decomposed code as follows:<br></br><br></br><span class="default">&lt;?php<br></br></span><span class="keyword">if (</span><span class="default">strstr</span><span class="keyword">(</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"SCRIPT_FILENAME"</span><span class="keyword">],</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"PHP_SELF"</span><span class="keyword">])) {<br></br></span><span class="default">$reference</span><span class="keyword">=</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"SCRIPT_FILENAME"</span><span class="keyword">];<br></br>']; ?> else {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$reference</span><span class="keyword">=</span><span class="default">$_SERVER</span><span class="keyword">[</span><span class="string">"PATH_TRANSLATED"</span><span class="keyword">];<br></br>']; ?><br></br></span><span class="default">chdir</span><span class="keyword">(</span><span class="default">dirname</span><span class="keyword">(</span><span class="default">$reference</span><span class="keyword">);<br></br></span><span class="default">?&gt;<br></br></span><br></br>This has been tested on Apache 1 &amp; 2, PHP 4 &amp; 5 and IIS 5.1</span></code></div></div></div><a name="70065"></a><div class="note"><strong class="user">butch at enterpol dot pl</strong><a href="#70065" class="date">02-Oct-2006 07:04</a><div class="text"><div class="phpcode"><code><span class="html">simple code to make phpsession $_GET nice for Valid XHTML 1.0 Transitional :)<br></br><br></br>function callback($buffer)<br></br>{<br></br>&nbsp; $buffer = str_replace("&amp;PHPSESSID", "&amp;amp;PHPSESSID", $buffer);<br></br>&nbsp; return $buffer;<br></br>']; ?><br></br><br></br>ob_start("callback");<br></br><br></br>session_start();</span></code></div></div></div><a name="66823"></a><div class="note"><strong class="user">net_navard at yahoo dot com</strong><a href="#66823" class="date">30-May-2006 02:09</a><div class="text"><div class="phpcode"><code><span class="html">Hello firends<br></br><br></br>ob_start() opens a buffer in which all output is stored. So every time you do an echo, the output of that is added to the buffer. When the script finishes running, or you call ob_flush(), that stored output is sent to the browser (and gzipped first if you use ob_gzhandler, which means it downloads faster).<br></br><br></br>The most common reason to use ob_start is as a way to collect data that would otherwise be sent to the browser.<br></br><br></br>These are two usages of ob_start():<br></br><br></br>1-Well, you have more control over the output. Trivial example: say you want to show the user an error message, but the script has already sent some HTML to the browser. It'll look ugly, with a half-rendered page and then an error message. Using the output buffering functions, you can simply delete the buffer and sebuffer and send only the error message, which means it looks all nice and neat buffer and send<br></br>2-The reason output buffering was invented was to create a seamless transfer, from: php engine -&gt; apache -&gt; operating system -&gt; web user<br></br><br></br>If you make sure each of those use the same buffer size, the system will use less writes, use less system resources and be able to handle more traffic.<br></br><br></br>With Regards, Hossein</span></code></div></div></div><a name="61338"></a><div class="note"><strong class="user">(capitals) THE maYoR ANd thOSe@gmail</strong><a href="#61338" class="date">31-Jan-2006 10:14</a><div class="text"><div class="phpcode"><code><span class="html">One of the notes below mentions that ob_end_flush() is called automatically at the end of the script if you called ob_start without an ob_end.<br></br><br></br>Because I couldn't find any other way to do it, I tried to use this fact to have some stuff run at the end of every script. It was a maintenance nightmare, so I'm putting a link here to the good way to do it, since it's nigh impossible to find with google.<br></br><br></br><a href="http://php.net/register_shutdown_function" rel="nofollow" target="_blank">http://php.net/register_shutdown_function</a></span></code></div></div></div><a name="61057"></a><div class="note"><strong class="user">simon</strong><a href="#61057" class="date">24-Jan-2006 04:51</a><div class="text"><div class="phpcode"><code><span class="html">Found that variables in class instances we're not being set after the call to ob_start().<br></br>Call ob_start after the variables are set however and it works but that didn't seem to solve the goal of a self contained templating class.<br></br>The fix was to assign the class by reference with '&amp;new'<br></br>Here is a simplified working example:<br></br><span class="default">&lt;?php<br></br></span><span class="keyword">class</span><span class="default">Buffer</span><span class="keyword">{<br></br>var</span><span class="default">$template</span><span class="keyword">=</span><span class="string">' - template set in class constructor'</span><span class="keyword">;<br></br>function</span><span class="default">Buffer</span><span class="keyword">() {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">startBuffer</span><span class="keyword">();<br></br>']; ?><br></br>function</span><span class="default">startBuffer</span><span class="keyword">() {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">(array(&amp;</span><span class="default">$this</span><span class="keyword">,</span><span class="string">'doFlush'</span><span class="keyword">));<br></br>']; ?><br></br>function</span><span class="default">doFlush</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">) {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">/* simple string concat to show use of a<br></br>&nbsp;&nbsp;&nbsp; template string and the buffer output */<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">return</span><span class="default">$buffer</span><span class="keyword">.</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">template</span><span class="keyword">;<br></br>']; ?><br></br>']; ?><br></br></span><span class="comment">/* template does not get set:<br></br>$buffer1 = new Buffer();<br></br>$buffer1-&gt;template = ' - template set in instance';<br></br>echo 'some buffer content';<br></br>*/<br></br>/* this works as expected */<br></br></span><span class="default">$buffer2</span><span class="keyword">= &amp;new</span><span class="default">Buffer</span><span class="keyword">();<br></br></span><span class="default">$buffer2</span><span class="keyword">-&gt;</span><span class="default">template</span><span class="keyword">=</span><span class="string">' - template set in instance'</span><span class="keyword">;<br></br>echo</span><span class="string">'some buffer content'</span><span class="keyword">;</span></span></code></div></div></div><a name="60483"></a><div class="note"><strong class="user">ernest at vogelsinger dot at</strong><a href="#60483" class="date">08-Jan-2006 05:57</a><div class="text"><div class="phpcode"><code><span class="html">When you rely on URL rewriting to pass the PHP session ID you should be careful with ob_get_contents(), as this might disable URL rewriting completely.<br></br><br></br>Example:<br></br>ob_start();<br></br>session_start();<br></br>echo '&lt;a href="."&gt;self link&lt;/a&gt;';<br></br>$data = ob_get_contents();<br></br>ob_end_clean();<br></br>echo $data;<br></br><br></br>In the example above, URL rewriting will never occur. In fact, rewriting would occur if you ended the buffering envelope using ob_end_flush(). It seems to me that rewriting occurs in the very same buffering envelope where the session gets started, not at the final output stage.<br></br><br></br>If you need a scenario like the one above, using an "inner envelope" will help:<br></br><br></br>ob_start();<br></br>ob_start();&nbsp;&nbsp; // add the inner buffering envelope<br></br>session_start();<br></br>echo '&lt;a href="."&gt;self link&lt;/a&gt;';<br></br>ob_end_flush(); // closing the inner envelope will activate URL rewriting<br></br>$data = ob_get_contents();<br></br>ob_end_clean();<br></br>echo $data;<br></br><br></br>In case you're interested or believe like me that this is rather a design flaw instead of a feature, please visit bug #35933 (<a href="http://bugs.php.net/bug.php?id=35933" rel="nofollow" target="_blank">http://bugs.php.net/bug.php?id=35933</a>) and comment on it.</span></code></div></div></div><a name="57854"></a><div class="note"><strong class="user">cyrille.berliat[no spam]free.fr</strong><a href="#57854" class="date">16-Oct-2005 10:07</a><div class="text"><div class="phpcode"><code><span class="html">If you're trying to use ob_start() in some PHP5 classes (probably works on PHP4 classes), this is the good way :<br></br><br></br><span class="default">&lt;?<br></br><br></br></span><span class="keyword">class</span><span class="default">HTMLPage<br></br></span><span class="keyword">{<br></br></span><span class="comment">//----------------------------------------------------------------- PUBLIC<br></br><br></br>//----------------------------------------------------- M�thodes publiques<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">public static function</span><span class="default">ConvertIntoSGML</span><span class="keyword">(</span><span class="default">$source</span><span class="keyword">)<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// Mode d'emploi :<br></br>&nbsp;&nbsp;&nbsp; //convertit une string en une SGML valide<br></br>&nbsp;&nbsp;&nbsp; //<br></br>&nbsp;&nbsp;&nbsp; // Renvoie :<br></br>&nbsp;&nbsp;&nbsp; //la chaine trait�e<br></br>&nbsp;&nbsp;&nbsp; //<br></br>&nbsp;&nbsp;&nbsp; // Algorithme :<br></br>&nbsp;&nbsp;&nbsp; //analyse char par char de la chaine. Si un caract�re est de nombre ASCII &gt; 127,<br></br>&nbsp;&nbsp;&nbsp; //conversion en son code SGML.<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">{<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$newString</span><span class="keyword">=</span><span class="string">''</span><span class="keyword">;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; for(</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$source</span><span class="keyword">) ;</span><span class="default">$i</span><span class="keyword">++ ) {<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$o</span><span class="keyword">=</span><span class="default">ord</span><span class="keyword">(</span><span class="default">$source</span><span class="keyword">{</span><span class="default">$i</span><span class="keyword">']; ?> );<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$newString</span><span class="keyword">.= ( (</span><span class="default">$o</span><span class="keyword">&gt;</span><span class="default">127</span><span class="keyword">) ?</span><span class="string">'&amp;#'</span><span class="keyword">.</span><span class="default">$o</span><span class="keyword">.</span><span class="string">';'</span><span class="keyword">:</span><span class="default">$source</span><span class="keyword">{</span><span class="default">$i</span><span class="keyword">']; ?> );<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$newString</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; public function</span><span class="default">FlushSite</span><span class="keyword">(</span><span class="default">$source</span><span class="keyword">)<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; return</span><span class="default">$this</span><span class="keyword">-&gt;</span><span class="default">ConvertIntoSGML</span><span class="keyword">(</span><span class="default">$source</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br>&nbsp;&nbsp;&nbsp;<br></br></span><span class="comment">//-------------------------------------------- Constructeurs - destructeur<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">function</span><span class="default">__construct</span><span class="keyword">()<br></br>&nbsp;&nbsp;&nbsp;</span><span class="comment">// Mode d'emploi (constructeur) :<br></br>&nbsp;&nbsp;&nbsp; //initialise la buffurisation<br></br>&nbsp;&nbsp;&nbsp; //<br></br>&nbsp;&nbsp;&nbsp; // Contrat :<br></br>&nbsp;&nbsp;&nbsp; //<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">{<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">( array (&nbsp; &amp;</span><span class="default">$this</span><span class="keyword">,</span><span class="string">'FlushSite'</span><span class="keyword">) );<br></br>&nbsp;&nbsp;&nbsp; ']; ?></span><span class="comment">//---- Fin du constructeur<br></br>&nbsp;&nbsp;&nbsp;<br></br>//------------------------------------------------------ M�thodes Magiques<br></br><br></br>//------------------------------------------------------------------ PRIVE<br></br><br></br></span><span class="keyword">']; ?><br></br><br></br></span><span class="comment">// Example :<br></br><br></br></span><span class="default">$webdesign</span><span class="keyword">= new</span><span class="default">HTMLPage</span><span class="keyword">( );<br></br><br></br>echo</span><span class="string">'H�llo world'</span><span class="keyword">;</span><span class="comment">// Will produce the source 'h&amp;#233;llo world'<br></br><br></br></span><span class="default">?&gt;<br></br></span><br></br>Without the &amp; before $this, you'll loose your content because ob_start() will call the flushsite() function from a clone of the object and not the caller object himself.<br></br><br></br>Note : call_back function must be public because ob_start() is in an extern scope from your class :)<br></br><br></br>I hope this will help you!</span></code></div></div></div><a name="56830"></a><div class="note"><strong class="user">php at bucksvsbytes dot com</strong><a href="#56830" class="date">16-Sep-2005 05:29</a><div class="text"><div class="phpcode"><code><span class="html">The following should be added: "If outbut buffering is still active when the script ends, PHP outputs it automatically. In effect, every script ends with ob_end_flush()."</span></code></div></div></div><a name="56244"></a><div class="note"><strong class="user">admin at bobfrank dot org</strong><a href="#56244" class="date">28-Aug-2005 03:50</a><div class="text"><div class="phpcode"><code><span class="html">If you want to run code in the middle of a string that you made, but you want to wait the printing...<br></br>(so if you want to allow php in bb-code style, and you want to execute it in order, and print everything in order...)<br></br><br></br>phpRun($code) {<br></br>&nbsp;&nbsp;&nbsp; ob_start();<br></br>&nbsp;&nbsp;&nbsp; exec($code);<br></br>&nbsp;&nbsp;&nbsp; $output = ob_get_contents();<br></br>&nbsp;&nbsp;&nbsp; ob_end_clean();<br></br>&nbsp;&nbsp;&nbsp; return $output;<br></br>']; ?><br></br><br></br>$str = str_replace("]\n", "]", $str);<br></br>$match = array('#\[php\](.*?)\[\/php\]#se');<br></br>$replace = array( phpRun( stripslashes('$1') ) );<br></br>$str= preg_replace($match, $replace, $str);<br></br><br></br>echo $str;</span></code></div></div></div><a name="56239"></a><div class="note"><strong class="user">kasper at johansen dot tdcadsl dot dk</strong><a href="#56239" class="date">28-Aug-2005 02:29</a><div class="text"><div class="phpcode"><code><span class="html">Another way to make your code harder to copy, is to remove all line-breaks and tabs you have in it.<br></br><br></br>You can use this function to remove those.<br></br><br></br>You can choose to place "ob_start();" at the start of your main PHP-file, and "ob_end_clean();" at the end of it.<br></br><br></br>This is not the best solution though. If you are running Apache you might want to do something like this to a ".htaccess"-file:<br></br><br></br>php_value auto_prepend_file "/home/www/load_before.php"<br></br>php_value auto_append_file "/home/www/load_after.php"<br></br><br></br>(you should replace those files with files that actually exists).<br></br><br></br>In the "load_before.php" you can place the "ob_start();", and in the "load_after.php" you can do something like this:<br></br><br></br><span class="default">&lt;?<br></br>&nbsp;&nbsp;&nbsp; $html</span><span class="keyword">=</span><span class="default">strtr</span><span class="keyword">(</span><span class="default">ob_get_contents</span><span class="keyword">(), array(</span><span class="string">"\t"</span><span class="keyword">=&gt;</span><span class="string">""</span><span class="keyword">,</span><span class="string">"\n"</span><span class="keyword">=&gt;</span><span class="string">""</span><span class="keyword">,</span><span class="string">"\r"</span><span class="keyword">=&gt;</span><span class="string">""</span><span class="keyword">));<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_end_clean</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="default">$html</span><span class="keyword">;<br></br></span><span class="default">?&gt;<br></br></span><br></br>This will clean your HTML of all kind of linebreaks (both \n and \r) and tabulators (\t). This will save your users some bandwidth, but it will also make your HTML, JavaScripts and more very difficult to read or copy. That way, making it harder for people to steal your code if you do not want them to.<br></br><br></br>This isnt in the spirit of OpenSource, but anyway you should be aware that this is possible.<br></br><br></br>Be aware that if you use PHP-files, to simulate pictures, all linebreaks will also be remove, making them corrupt. A solution to this, could be to check the headers (Content-Type), and if isnt set, or it is "text/html", you can go ahead and remove the linebreaks and tabs.<br></br><br></br>At my site, with more than 50.000 pictures and about 60 people online, I couldnt see any difference in the loadtime.<br></br><br></br>But still be aware, that your output will not be sent, before the script is finished, which will make your page slower to load that way also, since it cannot send any output while loading, but will have to wait until the load is finished.</span></code></div></div></div><a name="55653"></a><div class="note"><strong class="user">geoffrey at nevra dot net</strong><a href="#55653" class="date">09-Aug-2005 07:05</a><div class="text"><div class="phpcode"><code><span class="html">When using a callback with ob_start(), functions like ob_get_contents() don't make use of it, use ob_end_flush() instead.<br></br><br></br>nb: not tested with every ob_* functions, just ob_get_contents() and ob_end_flush()</span></code></div></div></div><a name="55517"></a><div class="note"><a href="#55517" class="date">05-Aug-2005 02:54</a><div class="text"><div class="phpcode"><code><span class="html">I usually create my pages in four parts - variable initialisation, import header (using the variables just declared to configure), main body (mostly non-PHP), import footer.&nbsp; I wondered about making the main body examinable by another PHP script if the main page was included into it.&nbsp; I found I could control output of the main body by ending the header with an unclosed function which finishes at the start of the footer, thus enclosing the main body.&nbsp; Output buffering can then be used to read this into a variable.&nbsp; As a demonstration of how this can be used to control the order of output look at this example:<br></br><br></br><span class="default">&lt;?php<br></br>$output</span><span class="keyword">=</span><span class="string">""</span><span class="keyword">;<br></br><br></br></span><span class="comment">// Callback to process buffered output<br></br></span><span class="keyword">function</span><span class="default">capture</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">)<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$GLOBALS</span><span class="keyword">[</span><span class="string">'output'</span><span class="keyword">] .=</span><span class="default">$buffer</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="string">"C "</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br><br></br></span><span class="comment">// Calls the printE() function with output capture<br></br></span><span class="keyword">function</span><span class="default">captureE</span><span class="keyword">()<br></br>&nbsp;&nbsp;&nbsp; {<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">"capture"</span><span class="keyword">);<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">printE</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_end_flush</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp; ']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>A<br></br><span class="default">&lt;?php<br></br></span><span class="comment">// Output 'E' (the main body in the example scenario)<br></br></span><span class="keyword">function</span><span class="default">printE</span><span class="keyword">()<br></br>&nbsp;&nbsp;&nbsp; {</span><span class="comment">// (End header after this line)</span><span class="default">?&gt;<br></br></span>E<br></br>&nbsp;&nbsp;&nbsp;<span class="default">&lt;?php</span><span class="comment">// (Start footer with this line)<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">']; ?><br></br></span><span class="default">?&gt;<br></br></span>B<br></br><span class="default">&lt;?php captureE</span><span class="keyword">();</span><span class="default">?&gt;<br></br></span>D<br></br><span class="default">&lt;?php</span><span class="keyword">print</span><span class="default">$output</span><span class="keyword">;</span><span class="default">?&gt;<br></br></span>F<br></br><span class="default">&lt;?php printE</span><span class="keyword">();</span><span class="default">?&gt;<br></br></span>G<br></br><br></br>The output is A B C D E F E G.<br></br><br></br>For the application I mentioned above there are two points to note:<br></br>&nbsp;- The page when executed alone must output its main body but the inspection script should suppress this, perhaps by means of a variable set before the page is included and then checked for in the footer output lines.<br></br>&nbsp;- Because the main body is now inside a function it has a different namespace, thus changes may be required to prevent code breaking (e.g. use of globals, handling of functions defined within the main body).</span></code></div></div></div><a name="54582"></a><div class="note"><strong class="user">oersoep at gmail dot com</strong><a href="#54582" class="date">08-Jul-2005 12:46</a><div class="text"><div class="phpcode"><code><span class="html">These are handy. First one has been mentioned before.<br></br><br></br>ob_start( array( 'lib_class', 'parse_output' ) );<br></br>ob_start( array( $this, 'parse_output' ) );<br></br><br></br>Note: $this is NOT a reference. Anything the callback saves or logs disappears in the clone ob_start works with.<br></br>It does enable the callback to work with the attributes of $this, like $this-&gt;ar_tpl_value or whatever your style is.<br></br><br></br>The manual says:<br></br>"If the optional parameter chunk_size is passed, the callback function is called on every first newline after chunk_size bytes of output. The output_callback parameter may be bypassed by passing a NULL value."<br></br>This doesn't work with my 4.3.11. Might be the Zend optimizer though. Daren't turn it off to go see.</span></code></div></div></div><a name="53173"></a><div class="note"><strong class="user">Aleksey</strong><a href="#53173" class="date">25-May-2005 07:08</a><div class="text"><div class="phpcode"><code><span class="html">This function dynamically changes title of HTML page:<br></br><br></br>&nbsp; function change_title($new_title) {<br></br>&nbsp;&nbsp;&nbsp; $output = ob_get_contents();<br></br>&nbsp;&nbsp;&nbsp; ob_end_clean();<br></br><br></br>&nbsp;&nbsp;&nbsp; $output = preg_replace("/&lt;title&gt;(.*?)&lt;\/title&gt;/", "&lt;title&gt;$new_title&lt;/title&gt;", $output);<br></br>&nbsp;&nbsp;&nbsp; echo $output;<br></br>&nbsp; ']; ?><br></br><br></br>Example:<br></br>&nbsp; ob_start();<br></br>&nbsp; // ... some output<br></br>&nbsp; change_title('NEW TITLE!');</span></code></div></div></div><a name="53117"></a><div class="note"><strong class="user">jds1509 at NOSPAMrit dot edu</strong><a href="#53117" class="date">24-May-2005 02:06</a><div class="text"><div class="phpcode"><code><span class="html">This code demonstrates the affect of providing a value to the chunk_size parameter. A value of 1 or 0 will be ignored by php. Here's the Code:<br></br><br></br><span class="default">&lt;?<br></br><br></br></span><span class="keyword">function</span><span class="default">callback</span><span class="keyword">(</span><span class="default">$buffer</span><span class="keyword">)<br></br>{<br></br>&nbsp;&nbsp;&nbsp; return</span><span class="string">"TRAPPED:"</span><span class="keyword">.</span><span class="default">$buffer</span><span class="keyword">.</span><span class="string">"&lt;br/&gt;"</span><span class="keyword">;<br></br>']; ?><br></br><br></br></span><span class="default">ob_start</span><span class="keyword">(</span><span class="string">"callback"</span><span class="keyword">,</span><span class="default">2</span><span class="keyword">);<br></br><br></br>echo</span><span class="string">"long string, so callback"</span><span class="keyword">;<br></br>echo</span><span class="string">"X"</span><span class="keyword">;<br></br>echo</span><span class="string">" - no callback, less than 2 chars"</span><span class="keyword">;<br></br><br></br></span><span class="default">?&gt;</span>newlines,<br></br>but<br></br>no<br></br>callback<br></br>!<span class="default">&lt;?<br></br><br></br></span><span class="comment">// PHP block<br></br><br></br></span><span class="default">?&gt;</span>PHP block initiates callback.<span class="default">&lt;?<br></br><br></br></span><span class="keyword">echo</span><span class="string">"One more callback at EOF..."</span><span class="keyword">;<br></br><br></br></span><span class="default">?&gt;<br></br></span><br></br>The code above outputs:<br></br><br></br>TRAPPED:long string, so callback<br></br>TRAPPED:X - no callback, less than 2 chars<br></br>TRAPPED:newlines, but no callback !<br></br>TRAPPED:PHP block initiates callback.<br></br>TRAPPED:One more callback at EOF...<br></br>TRAPPED:</span></code></div></div></div><a name="52697"></a><div class="note"><strong class="user">rafa dot chacon at factorydea dot com</strong><a href="#52697" class="date">10-May-2005 09:10</a><div class="text"><div class="phpcode"><code><span class="html">If you're trying to include a php file inside a loop by require_once (in example, a dinamic email template) and change the value of some variables (in example, url to unsuscribe, different for each user), you should use<br></br><br></br><span class="default">&lt;?php<br></br><br></br></span><span class="comment">// ... some code<br></br><br></br></span><span class="default">$usermail</span><span class="keyword">= array(</span><span class="string">"email1"</span><span class="keyword">,</span><span class="string">"email2"</span><span class="keyword">, ...);<br></br><br></br>for(</span><span class="default">$i</span><span class="keyword">=</span><span class="default"></span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">&lt;</span><span class="default">$MAX</span><span class="keyword">;</span><span class="default">$i</span><span class="keyword">++)<br></br>{<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$usermail_unsuscribe</span><span class="keyword">=</span><span class="default">$usermail</span><span class="keyword">[</span><span class="default">$i</span><span class="keyword">];<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">();<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; include(</span><span class="string">"email_template.php"</span><span class="keyword">);<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_clean</span><span class="keyword">();<br></br>']; ?><br></br></span><span class="default">?&gt;<br></br></span><br></br>Otherwise $usermail_unsuscribe will get only "email1" value.</span></code></div></div></div><a name="52652"></a><div class="note"><strong class="user">JM</strong><a href="#52652" class="date">08-May-2005 07:17</a><div class="text"><div class="phpcode"><code><span class="html">I don't claim to understand this--I would have expected the exact opposite--but it seems that<br></br>&nbsp; ob_start() ... ob_end_flush()<br></br>can massively improve perfomance, by at least a factor of 10 (admittedly a small number of samples).<br></br><br></br>I tried this after discovering that I could move a large (100ms) bottleneck in one of my scripts into<br></br>&nbsp;&nbsp; echo "&lt;!-- about 40 characters of junk --&gt;";<br></br>which clearly shouldn't have taken long to run.<br></br><br></br>My unfounded theory is that without buffering, the interaction between PHP4.3.4 and Apache is not optimized, whereas with buffering, PHP delivers the entire page at once, which Apache handles better.<br></br><br></br>I should add that this is under https.</span></code></div></div></div><a name="50488"></a><div class="note"><strong class="user">Ray Paseur (Paseur ... ImagineDB.com)</strong><a href="#50488" class="date">01-Mar-2005 09:50</a><div class="text"><div class="phpcode"><code><span class="html">You can use PHP to generate a static HTML page.&nbsp; Useful if you have a complex script that, for performance reasons, you do not want site visitors to run repeatedly on demand.&nbsp; A "cron" job can execute the PHP script to create the HTML page.&nbsp; For example:<br></br><br></br><span class="default">&lt;?php</span><span class="comment">// CREATE index.html<br></br>&nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">();<br></br></span><span class="comment">/* PERFORM COMLEX QUERY, ECHO RESULTS, ETC. */<br></br>&nbsp;&nbsp;</span><span class="default">$page</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();<br></br>&nbsp;&nbsp;</span><span class="default">ob_end_clean</span><span class="keyword">();<br></br>&nbsp;&nbsp;</span><span class="default">$cwd</span><span class="keyword">=</span><span class="default">getcwd</span><span class="keyword">();<br></br>&nbsp;&nbsp;</span><span class="default">$file</span><span class="keyword">=</span><span class="string">"</span><span class="default">$cwd</span><span class="string">"</span><span class="keyword">.</span><span class="string">'/'</span><span class="keyword">.</span><span class="string">"index.html"</span><span class="keyword">;<br></br>&nbsp;&nbsp; @</span><span class="default">chmod</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">,</span><span class="default">0755</span><span class="keyword">);<br></br>&nbsp;&nbsp;</span><span class="default">$fw</span><span class="keyword">=</span><span class="default">fopen</span><span class="keyword">(</span><span class="default">$file</span><span class="keyword">,</span><span class="string">"w"</span><span class="keyword">);<br></br>&nbsp;&nbsp;</span><span class="default">fputs</span><span class="keyword">(</span><span class="default">$fw</span><span class="keyword">,</span><span class="default">$page</span><span class="keyword">,</span><span class="default">strlen</span><span class="keyword">(</span><span class="default">$page</span><span class="keyword">));<br></br>&nbsp;&nbsp;</span><span class="default">fclose</span><span class="keyword">(</span><span class="default">$fw</span><span class="keyword">);<br></br>&nbsp;&nbsp; die();<br></br></span><span class="default">?&gt;</span></span></code></div></div></div><a name="49951"></a><div class="note"><strong class="user">eddie</strong><a href="#49951" class="date">13-Feb-2005 04:09</a><div class="text"><div class="phpcode"><code><span class="html">I use this function for deleting not needed characters within the html code before sending the whole stuff to the browser.<br></br><br></br>function callback($buffer){<br></br>&nbsp;&nbsp;&nbsp; $buffer = str_replace("\n", "", $buffer);<br></br>&nbsp;&nbsp;&nbsp; $buffer = str_replace("\t", "", $buffer);<br></br>&nbsp;&nbsp;&nbsp; $buffer = str_replace(chr(13), "", $buffer);<br></br>&nbsp;&nbsp;&nbsp; $buffer = ereg_replace("&lt;!\-\- [\/\ a-zA-Z]* \-\-&gt;", "", $buffer);<br></br>&nbsp;&nbsp;&nbsp; return $buffer;<br></br>']; ?><br></br><br></br>First str_replace will delete any newlines, second any tabs and the third any carriage return. Finally the regular expression will delete any html-comment which consists of /, space, a-z or A-Z.<br></br>Using this saves about 1kb on every pageload.</span></code></div></div></div><a name="49589"></a><div class="note"><strong class="user">FB</strong><a href="#49589" class="date">02-Feb-2005 02:59</a><div class="text"><div class="phpcode"><code><span class="html">I've noticed a bug with MSIE for non cached contents if your page is less than 4096 octets : you have to refresh the page each time to view its content !<br></br><br></br>Here is the solution to prevent this stupid behaviour of MSIE : just insert this code at the top of your scripts :<br></br><br></br>function ob_callback($buffer)<br></br>{<br></br>&nbsp;&nbsp;&nbsp; return $buffer . str_repeat(' ', max(0, 4097 - strlen($buffer)));<br></br>']; ?><br></br><br></br>ob_start('ob_callback');</span></code></div></div></div><a name="47370"></a><div class="note"><strong class="user">aaron at offtone.com</strong><a href="#47370" class="date">14-Nov-2004 01:19</a><div class="text"><div class="phpcode"><code><span class="html">My callback is stored in a function class, and using ob_start ('Class::callback') wasn't working. Not wanting to instantiate the class (no need, it's a function class) I tried this and it worked a charm:<br></br><br></br>ob_start (array (Class, 'callback'));<br></br><br></br>PHP 4.3.4</span></code></div></div></div><a name="46969"></a><div class="note"><strong class="user">dev at kiwicore dot org</strong><a href="#46969" class="date">28-Oct-2004 08:49</a><div class="text"><div class="phpcode"><code><span class="html">I wanted to do things a very particular way with output buffering and shutdown functions; using register_shutdown_function instead of the built in callback feature of this function. However, one should note that this won't work, because the contents of the buffer are no longer in scope when PHP is calling the shutdown functions. This would have been easy to see EXCEPT that PHP graciously flushes any unsent buffers at the end of the script, or when calling exit. So:<br></br><br></br><span class="default">&lt;?php<br></br>&nbsp;&nbsp;&nbsp; ob_start</span><span class="keyword">();<br></br>&nbsp;&nbsp;&nbsp; echo</span><span class="string">'hi'</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp; exit;<br></br></span><span class="default">?&gt;<br></br></span><br></br>Prints "hi". In a nutshell, if you want it to have a shutdown function that handles an output buffer, just specify it in ob_start() and let PHP automatically call it at the end of the script.</span></code></div></div></div><a name="40861"></a><div class="note"><strong class="user">jkloss at hotmail dot com</strong><a href="#40861" class="date">17-Mar-2004 03:20</a><div class="text"><div class="phpcode"><code><span class="html">If ob_start does not seem to be working for you, note that with Apache 2 the flush() function causes PHP to send headers regardless of whether ob_start had been called before flush.<br></br><br></br>ob_start();<br></br>echo 'test';<br></br>flush();<br></br><br></br>will cause Apache 2 to send whatever headers may be stacked up - which means you can't use a header(location:xxx) after the flush.&nbsp; To fix, remove the flush().&nbsp; Spent several hours discovering this.&nbsp; Apache 1.x didn't work this way.</span></code></div></div></div><a name="40643"></a><div class="note"><strong class="user">mjr</strong><a href="#40643" class="date">10-Mar-2004 05:10</a><div class="text"><div class="phpcode"><code><span class="html">If you're using object-orientated code in PHP you may, like me, want to use a call-back function that is inside an object (i.e. a class function). In this case you send ob_start a two-element array as its single argument. The first element is the name of the object (without the $ at the start), and the second is the function to call. So to use a function 'indent' in an object called '$template' you would use<span class="default">&lt;?php ob_start</span><span class="keyword">(array(</span><span class="string">'template'</span><span class="keyword">,</span><span class="string">'indent'</span><span class="keyword">));</span><span class="default">?&gt;</span>.</span></code></div></div></div><a name="37699"></a><div class="note"><strong class="user">zeisss at web dot de</strong><a href="#37699" class="date">23-Nov-2003 05:03</a><div class="text"><div class="phpcode"><code><span class="html">Note that the current working directory changes in the callback procedure (Changed from htdocs\ to windows\system32\ on my system).<br></br><br></br>You have to use absolut paths if you want to open files on your local system.</span></code></div></div></div><a name="37648"></a><div class="note"><strong class="user">ed.oohay (a) suamhcs_rodnan</strong><a href="#37648" class="date">22-Nov-2003 01:18</a><div class="text"><div class="phpcode"><code><span class="html">Output Buffering even works in nested scopes or might be applied in recursive structures... thought this might save someone a little time guessing and testing :)<br></br><br></br>&lt;pre&gt;<span class="default">&lt;?php<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; ob_start</span><span class="keyword">();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// start output buffer 1<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">echo</span><span class="string">"a"</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// fill ob1<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_start</span><span class="keyword">();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// start output buffer 2<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="keyword">echo</span><span class="string">"b"</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// fill ob2<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">$s1</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();</span><span class="comment">// read ob2 ("b")<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span><span class="default">ob_end_flush</span><span class="keyword">();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// flush ob2 to ob1<br></br>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">echo</span><span class="string">"c"</span><span class="keyword">;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// continue filling ob1<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">$s2</span><span class="keyword">=</span><span class="default">ob_get_contents</span><span class="keyword">();</span><span class="comment">// read ob1 ("a" . "b" . "c")<br></br>&nbsp;&nbsp;&nbsp;</span><span class="default">ob_end_flush</span><span class="keyword">();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="comment">// flush ob1 to browser<br></br>&nbsp;&nbsp;&nbsp;<br></br>&nbsp;&nbsp;&nbsp; // echoes "b" followed by "abc", as supposed to:<br></br>&nbsp;&nbsp;&nbsp;</span><span class="keyword">echo</span><span class="string">"&lt;HR&gt;</span><span class="default">$s1</span><span class="string">&lt;HR&gt;</span><span class="default">$s2</span><span class="string">&lt;HR&gt;"</span><span class="keyword">;<br></br>&nbsp;&nbsp;&nbsp;<br></br></span><span class="default">?&gt;</span>&lt;/pre&gt;<br></br><br></br>... at least works on Apache 1.3.28<br></br><br></br>Nandor =)</span></code></div></div></div><a name="28595"></a><div class="note"><strong class="user">venky_athome at yahoo dot com</strong><a href="#28595" class="date">17-Jan-2003 05:58</a><div class="text"><div class="phpcode"><code><span class="html">IE 55. sp2 and IE6 as on the date of adding this note have problems with content type gzip and caching http headers. The pages are never cached. I think this combination of http headers can also crash the browser.<br></br><br></br>see<a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;321722" rel="nofollow" target="_blank">http://support.microsoft.com/default.aspx?scid=kb;en-us;321722</a></span></code></div></div></div><a name="27432"></a><div class="note"><a href="#27432" class="date">05-Dec-2002 08:02</a><div class="text"><div class="phpcode"><code><span class="html">If you're using Apache (1.3x or 2.0), you might consider adding automatic compression capability to your delivered pages.<br></br><br></br>I assume you all know how to build compression classes and use them in your programs, but none has yet to offer the speed and robustness of a binary-compiled module. Furthermore, such modules also log the "compressable" hit in the web log file, thus allowing your favorite web anaysing program to show you reports of bandwidth saved.<br></br><br></br>Having said that, you might consider the following two modules for Apache:<br></br><br></br>1) Apache 1.3x: use mod_gzip, available from:<br></br><a href="http://sourceforge.net/projects/mod-gzip/" rel="nofollow" target="_blank">http://sourceforge.net/projects/mod-gzip/</a><br></br><br></br>2) Apache 2.x: use mod_gz, see here:<br></br><a href="http://www.mail-archive.com/dev@httpd.apache.org/msg00734.html" rel="nofollow" target="_blank">http://www.mail-archive.com/dev@httpd.apache.org/msg00734.html</a><br></br><br></br>3) Apache 1.3x: you may also want to use mod_defalte, from:<br></br><a href="ftp://ftp.lexa.ru/pub/apache-rus/contrib/" rel="nofollow" target="_blank">ftp://ftp.lexa.ru/pub/apache-rus/contrib/</a><br></br><br></br>Hope it helps.</span></code></div></div></div><a name="24140"></a><div class="note"><strong class="user">cliff at NOSPAMtravelguides dot com</strong><a href="#24140" class="date">07-Aug-2002 10:36</a><div class="text"><div class="phpcode"><code><span class="html">good article on output buffering on devshed:<br></br><br></br><a href="http://www.devshed.com/c/a/PHP/Output-Buffering-With-PHP" rel="nofollow" target="_blank">http://www.devshed.com/c/a/PHP/Output-Buffering-With-PHP</a></span></code></div></div></div></div><div class="foot"><a href="/manual/add-note.php?sect=function.ob-start&amp;redirect=http://ru.php.net/manual/en/function.ob-start.php"><img src="/images/notes-add.gif" alt="add a note" width="13" height="13" class="middle"/></a><small><a href="/manual/add-note.php?sect=function.ob-start&amp;redirect=http://ru.php.net/manual/en/function.ob-start.php">add a note</a></small></div></div><br></br></div><div class="cleaner">&nbsp;</div></div><div id="footnav"><a href="/source.php?url=/manual/en/function.ob-start.php">show source</a>|<a href="/credits.php">credits</a>|<a href="/sitemap.php">sitemap</a>|<a href="/contact.php">contact</a>|<a href="/contact.php#ads">advertising</a>|<a href="/mirrors.php">mirror sites</a></div><div id="pagefooter"><div id="copyright"><a href="/copyright.php">Copyright &copy; 2001-2011 The PHP Group</a><br></br>All rights reserved.</div><div id="thismirror"><a href="/mirror.php">This mirror</a>generously provided by:<a href="http://ngenix.net">NGENIX CDN</a><br></br>Last updated: Sun Mar 13 06:11:40 2011 UTC</div></div><!-- [if IE 6]><script type="text/javascript">  /*Load jQuery if not already loaded*/ if(typeof jQuery == 'undefined'){ document.write("<script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js\"></"+"script>"); var __noconflict = true; ']; ?&gt;  var IE6UPDATE_OPTIONS = { icons_path: "/ie6update/images/" ']; ?&gt;</script><script type="text/javascript" src="/ie6update/ie6update.js"></script><![endif] !--></body></html>